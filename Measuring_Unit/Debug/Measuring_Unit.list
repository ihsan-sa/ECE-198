
Measuring_Unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007764  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007904  08007904  00008904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a24  08007a24  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a2c  08007a2c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a2c  08007a2c  00008a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a30  08007a30  00008a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007a34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b5c  2000006c  08007aa0  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc8  08007aa0  00009bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f0f  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b0  00000000  00000000  0001ffab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00023360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001005  00000000  00000000  00024800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004842  00000000  00000000  00025805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168dd  00000000  00000000  0002a047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b92  00000000  00000000  00040924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006030  00000000  00000000  000da4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078ec 	.word	0x080078ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080078ec 	.word	0x080078ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <writeMPU>:
#ifndef SRC_MPUDATACOLLECTION_H_
#define SRC_MPUDATACOLLECTION_H_

void writeMPU(GPIO_TypeDef* gpioTypeSDA, int sdaPin, GPIO_TypeDef* gpioTypeSCL,
			  int sclPin, GPIO_TypeDef* gpioTypeRead, int readPin, int deviceAddress, int writeAddress,
			  int message, int delayVal) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
//	printf("writing to device\r\n");
//	HAL_Delay(1000);
//	printf("test hal delay\r\n");

	// start condition:
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f001 fc1a 	bl	800264c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f001 fc13 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f96d 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f001 fc08 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f962 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f001 fbfd 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 f957 	bl	8002108 <HAL_Delay>


	// send device address
	for (int i=0; i<7; i++){
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e03a      	b.n	8000ed6 <writeMPU+0xda>
		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(deviceAddress & (1 << 6-i)) );
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	b299      	uxth	r1, r3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0306 	rsb	r3, r3, #6
 8000e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e6c:	fa42 f303 	asr.w	r3, r2, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f001 fbe3 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 f93d 	bl	8002108 <HAL_Delay>
//	    }
//	    else{
//	    	printf("0\r\n");
//	    }

	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	2201      	movs	r2, #1
 8000e94:	4619      	mov	r1, r3
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f001 fbd8 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 f932 	bl	8002108 <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f001 fbcd 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 f927 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f001 fbc2 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 f91c 	bl	8002108 <HAL_Delay>
	for (int i=0; i<7; i++){
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	2b06      	cmp	r3, #6
 8000eda:	ddc1      	ble.n	8000e60 <writeMPU+0x64>
	}


	// write is logic low
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f001 fbb1 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 f90b 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4619      	mov	r1, r3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f001 fba6 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f900 	bl	8002108 <HAL_Delay>
//		    }
//		    else{
//		    	printf("0\r\n");
//		    }

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f001 fb9b 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 f8f5 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f001 fb90 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 f8ea 	bl	8002108 <HAL_Delay>


	// read acknowledge bit
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);  // set SDA line to default high state
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f001 fb85 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 f8df 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f001 fb7a 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 f8d4 	bl	8002108 <HAL_Delay>
//		    }
//		    else{
//		    	printf("0\r\n");
//		    }

	if (!HAL_GPIO_ReadPin(gpioTypeRead, readPin)){
 8000f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4619      	mov	r1, r3
 8000f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000f68:	f001 fb58 	bl	800261c <HAL_GPIO_ReadPin>
//		printf("device address received\r\n");
	}
	HAL_Delay(delayVal);
 8000f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f8ca 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f001 fb65 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f8bf 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0); // reset SDA line to low after the device lets go of the SDA line
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f001 fb5a 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8000f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 f8b4 	bl	8002108 <HAL_Delay>


	// send internal register address
	for (int i=0; i<8; i++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	e03a      	b.n	800101c <writeMPU+0x220>
		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(writeAddress & (1 << 7-i)) );
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f1c3 0307 	rsb	r3, r3, #7
 8000fb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bf14      	ite	ne
 8000fbe:	2301      	movne	r3, #1
 8000fc0:	2300      	moveq	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f001 fb40 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f89a 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f001 fb35 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f88f 	bl	8002108 <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f001 fb2a 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 f884 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	b29b      	uxth	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f001 fb1f 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 800100e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f879 	bl	8002108 <HAL_Delay>
	for (int i=0; i<8; i++){
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	3301      	adds	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b07      	cmp	r3, #7
 8001020:	ddc1      	ble.n	8000fa6 <writeMPU+0x1aa>
	}


	// read acknowledge bit
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);  // set SDA line to default high state
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	b29b      	uxth	r3, r3
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f001 fb0e 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f868 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fb03 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001048:	4618      	mov	r0, r3
 800104a:	f001 f85d 	bl	8002108 <HAL_Delay>

	if (!HAL_GPIO_ReadPin(gpioTypeRead, readPin)){
 800104e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001050:	b29b      	uxth	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001056:	f001 fae1 	bl	800261c <HAL_GPIO_ReadPin>
//		printf("register address received\r\n");
	}
	HAL_Delay(delayVal);
 800105a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800105c:	4618      	mov	r0, r3
 800105e:	f001 f853 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 faee 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001072:	4618      	mov	r0, r3
 8001074:	f001 f848 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0); // reset SDA line to low after the device lets go of the SDA line
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	b29b      	uxth	r3, r3
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f001 fae3 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f83d 	bl	8002108 <HAL_Delay>


	// send data to register, for power register of MPU, 0 means it keeps it always awake
	for (int i=0; i<8; i++){
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e03a      	b.n	800110a <writeMPU+0x30e>
		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(message & (1 << 7-i)) );
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	b299      	uxth	r1, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010a0:	fa42 f303 	asr.w	r3, r2, r3
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f001 fac9 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80010ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 f823 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 fabe 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80010d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 f818 	bl	8002108 <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 fab3 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80010e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f80d 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f001 faa8 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80010fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f802 	bl	8002108 <HAL_Delay>
	for (int i=0; i<8; i++){
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b07      	cmp	r3, #7
 800110e:	ddc1      	ble.n	8001094 <writeMPU+0x298>
	}


	// read acknowledge bit
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);  // set SDA line to default high state
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	b29b      	uxth	r3, r3
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f001 fa97 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800111e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fff1 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f001 fa8c 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001136:	4618      	mov	r0, r3
 8001138:	f000 ffe6 	bl	8002108 <HAL_Delay>

	if (!HAL_GPIO_ReadPin(gpioTypeRead, readPin)){
 800113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113e:	b29b      	uxth	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001144:	f001 fa6a 	bl	800261c <HAL_GPIO_ReadPin>
//		printf("message received\r\n");
	}
	HAL_Delay(delayVal);
 8001148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800114a:	4618      	mov	r0, r3
 800114c:	f000 ffdc 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 fa77 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800115e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001160:	4618      	mov	r0, r3
 8001162:	f000 ffd1 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0); // reset SDA line to low after the device lets go of the SDA line
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	b29b      	uxth	r3, r3
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f001 fa6c 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001176:	4618      	mov	r0, r3
 8001178:	f000 ffc6 	bl	8002108 <HAL_Delay>



	// stop condition
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f001 fa61 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800118a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800118c:	4618      	mov	r0, r3
 800118e:	f000 ffbb 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	b29b      	uxth	r3, r3
 8001196:	2201      	movs	r2, #1
 8001198:	4619      	mov	r1, r3
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f001 fa56 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80011a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ffb0 	bl	8002108 <HAL_Delay>
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <readMPU>:


int readMPU(GPIO_TypeDef* gpioTypeSDA, int sdaPin, GPIO_TypeDef* gpioTypeSCL, int sclPin,
			GPIO_TypeDef* gpioTypeRead, int readPin, int deviceAddress, int readAddress, int delayVal) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]

//	printf("reading from device\r\n");

	int storeData = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
	// start condition:
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f001 fa3e 	bl	800264c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 fa37 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80011de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 ff91 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f001 fa2c 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80011f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 ff86 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 fa21 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800120a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800120c:	4618      	mov	r0, r3
 800120e:	f000 ff7b 	bl	8002108 <HAL_Delay>


	// send device address
	for (int i=0; i<7; i++){
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
 8001216:	e03a      	b.n	800128e <readMPU+0xde>
		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(deviceAddress & (1 << 6-i)) );
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b299      	uxth	r1, r3
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f1c3 0306 	rsb	r3, r3, #6
 8001222:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001224:	fa42 f303 	asr.w	r3, r2, r3
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f001 fa07 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 800123e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001240:	4618      	mov	r0, r3
 8001242:	f000 ff61 	bl	8002108 <HAL_Delay>

		HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f001 f9fc 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 8001254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001256:	4618      	mov	r0, r3
 8001258:	f000 ff56 	bl	8002108 <HAL_Delay>
		HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f001 f9f1 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 800126a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800126c:	4618      	mov	r0, r3
 800126e:	f000 ff4b 	bl	8002108 <HAL_Delay>

		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	b29b      	uxth	r3, r3
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f001 f9e6 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 8001280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001282:	4618      	mov	r0, r3
 8001284:	f000 ff40 	bl	8002108 <HAL_Delay>
	for (int i=0; i<7; i++){
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	3301      	adds	r3, #1
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	2b06      	cmp	r3, #6
 8001292:	ddc1      	ble.n	8001218 <readMPU+0x68>
	}


	// write is logic low
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	b29b      	uxth	r3, r3
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f001 f9d5 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80012a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 ff2f 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2201      	movs	r2, #1
 80012b0:	4619      	mov	r1, r3
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f001 f9ca 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80012b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 ff24 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f001 f9bf 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80012ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 ff19 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f001 f9b4 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80012e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 ff0e 	bl	8002108 <HAL_Delay>


	// read acknowledge bit
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);  // set SDA line to default high state
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2201      	movs	r2, #1
 80012f2:	4619      	mov	r1, r3
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f001 f9a9 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80012fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 ff03 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	2201      	movs	r2, #1
 8001308:	4619      	mov	r1, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f001 f99e 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fef8 	bl	8002108 <HAL_Delay>

	if (!HAL_GPIO_ReadPin(gpioTypeRead, readPin)){
 8001318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800131a:	b29b      	uxth	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001320:	f001 f97c 	bl	800261c <HAL_GPIO_ReadPin>
//		printf("device address received\r\n");
	}
	HAL_Delay(delayVal);
 8001324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001326:	4618      	mov	r0, r3
 8001328:	f000 feee 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f001 f989 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800133a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fee3 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0); // reset SDA line to low after the device lets go of the SDA line
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	b29b      	uxth	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f001 f97e 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fed8 	bl	8002108 <HAL_Delay>



	// send internal register address
	for (int i=0; i<8; i++){
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	e03a      	b.n	80013d4 <readMPU+0x224>
		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(readAddress & (1 << 7-i)) );
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	b299      	uxth	r1, r3
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f1c3 0307 	rsb	r3, r3, #7
 8001368:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800136a:	fa42 f303 	asr.w	r3, r2, r3
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f001 f964 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8001384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001386:	4618      	mov	r0, r3
 8001388:	f000 febe 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f001 f959 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 800139a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800139c:	4618      	mov	r0, r3
 800139e:	f000 feb3 	bl	8002108 <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f001 f94e 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80013b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fea8 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f001 f943 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80013c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fe9d 	bl	8002108 <HAL_Delay>
	for (int i=0; i<8; i++){
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	ddc1      	ble.n	800135e <readMPU+0x1ae>
	}


	// read acknowledge bit
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);  // set SDA line to default high state
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2201      	movs	r2, #1
 80013e0:	4619      	mov	r1, r3
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f001 f932 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80013e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fe8c 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f001 f927 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80013fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fe81 	bl	8002108 <HAL_Delay>

	if (!HAL_GPIO_ReadPin(gpioTypeRead, readPin)){
 8001406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001408:	b29b      	uxth	r3, r3
 800140a:	4619      	mov	r1, r3
 800140c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800140e:	f001 f905 	bl	800261c <HAL_GPIO_ReadPin>
//		printf("register address received\r\n");
	}
	HAL_Delay(delayVal);
 8001412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fe77 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f001 f912 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fe6c 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0); // reset SDA line to low after the device lets go of the SDA line
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	b29b      	uxth	r3, r3
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f001 f907 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800143e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fe61 	bl	8002108 <HAL_Delay>



	// start condition again
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	b29b      	uxth	r3, r3
 800144a:	2201      	movs	r2, #1
 800144c:	4619      	mov	r1, r3
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f001 f8fc 	bl	800264c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	2201      	movs	r2, #1
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f001 f8f5 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fe4f 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	b29b      	uxth	r3, r3
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f001 f8ea 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fe44 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f001 f8df 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800148e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fe39 	bl	8002108 <HAL_Delay>


	// send device address
	for (int i=0; i<7; i++){
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	e03a      	b.n	8001512 <readMPU+0x362>
		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(deviceAddress & (1 << 6-i)) );
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	b299      	uxth	r1, r3
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	f1c3 0306 	rsb	r3, r3, #6
 80014a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014a8:	fa42 f303 	asr.w	r3, r2, r3
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f001 f8c5 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 80014c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fe1f 	bl	8002108 <HAL_Delay>

		HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f001 f8ba 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 80014d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fe14 	bl	8002108 <HAL_Delay>
		HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f001 f8af 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 80014ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fe09 	bl	8002108 <HAL_Delay>

		HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f001 f8a4 	bl	800264c <HAL_GPIO_WritePin>
		HAL_Delay(delayVal);
 8001504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fdfe 	bl	8002108 <HAL_Delay>
	for (int i=0; i<7; i++){
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	3301      	adds	r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b06      	cmp	r3, #6
 8001516:	ddc1      	ble.n	800149c <readMPU+0x2ec>
	}


	// read is logic high
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	b29b      	uxth	r3, r3
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f001 f893 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fded 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	2201      	movs	r2, #1
 8001534:	4619      	mov	r1, r3
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f001 f888 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800153c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fde2 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 f87d 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fdd7 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	b29b      	uxth	r3, r3
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f001 f872 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fdcc 	bl	8002108 <HAL_Delay>


	// read acknowledge bit
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);  // set SDA line to default high state
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	b29b      	uxth	r3, r3
 8001574:	2201      	movs	r2, #1
 8001576:	4619      	mov	r1, r3
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f001 f867 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800157e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fdc1 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	2201      	movs	r2, #1
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f001 f85c 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fdb6 	bl	8002108 <HAL_Delay>

	if (!HAL_GPIO_ReadPin(gpioTypeRead, readPin)){
 800159c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80015a4:	f001 f83a 	bl	800261c <HAL_GPIO_ReadPin>
//		printf("register address to READ received\r\n");
	}
	HAL_Delay(delayVal);
 80015a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fdac 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f001 f847 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80015be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fda1 	bl	8002108 <HAL_Delay>


	// keep SDA line default high before device pulls line and input stream of bits comes in
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f001 f83c 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80015d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fd96 	bl	8002108 <HAL_Delay>


	// Receive register data
	for (int i=0; i<8; i++){
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e02c      	b.n	800163c <readMPU+0x48c>
		HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2201      	movs	r2, #1
 80015e8:	4619      	mov	r1, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f001 f82e 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80015f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fd88 	bl	8002108 <HAL_Delay>

	    storeData |= (HAL_GPIO_ReadPin(gpioTypeRead, readPin)) * (1 << 7-i); // add bit to acclZ
 80015f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001600:	f001 f80c 	bl	800261c <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001614:	4313      	orrs	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_Delay(delayVal);
 8001618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fd74 	bl	8002108 <HAL_Delay>

	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0); // now after this clock pulse, the sda line should change to corresponding value
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f001 f80f 	bl	800264c <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal); // pause it a bit longer at 0 just in case
 800162e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fd69 	bl	8002108 <HAL_Delay>
	for (int i=0; i<8; i++){
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b07      	cmp	r3, #7
 8001640:	ddcf      	ble.n	80015e2 <readMPU+0x432>
	}


	// send nack signal
	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 1);
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	b29b      	uxth	r3, r3
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fffe 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fd58 	bl	8002108 <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	2201      	movs	r2, #1
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fff3 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fd4d 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 0);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 ffe8 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 800167c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fd42 	bl	8002108 <HAL_Delay>
//	printf("sent NACK signal\r\n");

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, 0);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	b29b      	uxth	r3, r3
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 ffdd 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 8001692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fd37 	bl	8002108 <HAL_Delay>


	//stop condition
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, 1);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	2201      	movs	r2, #1
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 ffd2 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80016a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fd2c 	bl	8002108 <HAL_Delay>
	HAL_GPIO_WritePin(gpioTypeSCL, sdaPin, 1);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 ffc7 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(delayVal);
 80016be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fd21 	bl	8002108 <HAL_Delay>


	return storeData;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <sendMsg>:
 */

#ifndef SRC_UARTCOMMUNICATION_H_
#define SRC_UARTCOMMUNICATION_H_

void sendMsg(GPIO_TypeDef* gpioTypeTransmit, int transmitPin, int8_t message, int baudDelay, int bufferDelay){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
	// start bit
	HAL_GPIO_WritePin(gpioTypeTransmit, transmitPin, 0);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 ffaf 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(baudDelay);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fd09 	bl	8002108 <HAL_Delay>

	// send message
	for (int i=0; i<8; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e01a      	b.n	8001732 <sendMsg+0x62>
		HAL_GPIO_WritePin(gpioTypeTransmit, transmitPin, !!(message & (1 << 7-i)) );
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	b299      	uxth	r1, r3
 8001700:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	fa42 f303 	asr.w	r3, r2, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 ff94 	bl	800264c <HAL_GPIO_WritePin>
//		}
//		else{
//			printf("0\r\n");
//		}

		HAL_Delay(baudDelay);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fcee 	bl	8002108 <HAL_Delay>
	for (int i=0; i<8; i++){
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b07      	cmp	r3, #7
 8001736:	dde1      	ble.n	80016fc <sendMsg+0x2c>
	}
//	printf("\n");
	// go back to default high
	HAL_GPIO_WritePin(gpioTypeTransmit, transmitPin, 1);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 ff83 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(bufferDelay);
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fcdd 	bl	8002108 <HAL_Delay>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
/* Support printf over UART */
(void) HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFFU);
 8001760:	1d39      	adds	r1, r7, #4
 8001762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001766:	2201      	movs	r2, #1
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <__io_putchar+0x20>)
 800176a:	f001 ff17 	bl	800359c <HAL_UART_Transmit>
 return ch;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000088 	.word	0x20000088

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b092      	sub	sp, #72	@ 0x48
 8001780:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001782:	f000 fc7f 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001786:	f000 f861 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178a:	f000 f8f5 	bl	8001978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800178e:	f000 f8c9 	bl	8001924 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int mpuDeviceAddress = 0x68; // first 7 bits of i2c data
 8001792:	2368      	movs	r3, #104	@ 0x68
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int acclZAxisRegisterBits15_8 = 0x3F; // 0x3f, 0x40
 8001796:	233f      	movs	r3, #63	@ 0x3f
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
  int acclZAxisRegisterBits7_0 = 0x40;
 800179a:	2340      	movs	r3, #64	@ 0x40
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
  int powerRegister = 0x6B;
 800179e:	236b      	movs	r3, #107	@ 0x6b
 80017a0:	623b      	str	r3, [r7, #32]

  int sda = GPIO_PIN_8; // D7 --> PA_8
 80017a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a6:	61fb      	str	r3, [r7, #28]
  #define sdaType GPIOA

  int scl = GPIO_PIN_9; //D8 --> PA_9
 80017a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ac:	61bb      	str	r3, [r7, #24]
  #define sclType GPIOA

  int read = GPIO_PIN_5; //D4 --> PB_5
 80017ae:	2320      	movs	r3, #32
 80017b0:	617b      	str	r3, [r7, #20]
  #define readType GPIOB

  int UART_TX_Pin = GPIO_PIN_7;
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	613b      	str	r3, [r7, #16]
  #define txType GPIOA

  int delayTime = 1; // 1 ms
 80017b6:	2301      	movs	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]

  int16_t acclZ = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	817b      	strh	r3, [r7, #10]
  float acclMS2 = 0;
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]

  // uint8_t readVal = 0;

  // wake up MPU
  writeMPU(sdaType, sda, sclType, scl, readType, read, mpuDeviceAddress, powerRegister, 0, delayTime);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	9305      	str	r3, [sp, #20]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9304      	str	r3, [sp, #16]
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	9303      	str	r3, [sp, #12]
 80017d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <main+0xa8>)
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4a12      	ldr	r2, [pc, #72]	@ (8001828 <main+0xac>)
 80017e0:	69f9      	ldr	r1, [r7, #28]
 80017e2:	4811      	ldr	r0, [pc, #68]	@ (8001828 <main+0xac>)
 80017e4:	f7ff fb0a 	bl	8000dfc <writeMPU>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017e8:	f002 fad8 	bl	8003d9c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of accel_data */
  accel_dataHandle = osMessageQueueNew (16, sizeof(uint16_t), &accel_data_attributes);
 80017ec:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <main+0xb0>)
 80017ee:	2102      	movs	r1, #2
 80017f0:	2010      	movs	r0, #16
 80017f2:	f002 fbca 	bl	8003f8a <osMessageQueueNew>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <main+0xb4>)
 80017fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of read_accl */
  read_acclHandle = osThreadNew(read_accl_function, NULL, &read_accl_attributes);
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <main+0xb8>)
 80017fe:	2100      	movs	r1, #0
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <main+0xbc>)
 8001802:	f002 fb15 	bl	8003e30 <osThreadNew>
 8001806:	4603      	mov	r3, r0
 8001808:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <main+0xc0>)
 800180a:	6013      	str	r3, [r2, #0]

  /* creation of send_data */
  send_dataHandle = osThreadNew(send_data_function, NULL, &send_data_attributes);
 800180c:	4a0c      	ldr	r2, [pc, #48]	@ (8001840 <main+0xc4>)
 800180e:	2100      	movs	r1, #0
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <main+0xc8>)
 8001812:	f002 fb0d 	bl	8003e30 <osThreadNew>
 8001816:	4603      	mov	r3, r0
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <main+0xcc>)
 800181a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800181c:	f002 fae2 	bl	8003de4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <main+0xa4>
 8001824:	40020400 	.word	0x40020400
 8001828:	40020000 	.word	0x40020000
 800182c:	080079c0 	.word	0x080079c0
 8001830:	200000d8 	.word	0x200000d8
 8001834:	08007978 	.word	0x08007978
 8001838:	08001ab1 	.word	0x08001ab1
 800183c:	200000d0 	.word	0x200000d0
 8001840:	0800799c 	.word	0x0800799c
 8001844:	08001c4d 	.word	0x08001c4d
 8001848:	200000d4 	.word	0x200000d4

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	@ 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2230      	movs	r2, #48	@ 0x30
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f005 fa80 	bl	8006d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b29      	ldr	r3, [pc, #164]	@ (800191c <SystemClock_Config+0xd0>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a28      	ldr	r2, [pc, #160]	@ (800191c <SystemClock_Config+0xd0>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001880:	4b26      	ldr	r3, [pc, #152]	@ (800191c <SystemClock_Config+0xd0>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <SystemClock_Config+0xd4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001898:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <SystemClock_Config+0xd4>)
 800189a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <SystemClock_Config+0xd4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ac:	2302      	movs	r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b4:	2310      	movs	r3, #16
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b8:	2302      	movs	r3, #2
 80018ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018bc:	2300      	movs	r3, #0
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018c0:	2310      	movs	r3, #16
 80018c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ca:	2304      	movs	r3, #4
 80018cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018ce:	2307      	movs	r3, #7
 80018d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fed2 	bl	8002680 <HAL_RCC_OscConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018e2:	f000 f9d3 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e6:	230f      	movs	r3, #15
 80018e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2102      	movs	r1, #2
 8001902:	4618      	mov	r0, r3
 8001904:	f001 f934 	bl	8002b70 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800190e:	f000 f9bd 	bl	8001c8c <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	3750      	adds	r7, #80	@ 0x50
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000

08001924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <MX_USART2_UART_Init+0x50>)
 800192c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	@ (8001970 <MX_USART2_UART_Init+0x4c>)
 800195c:	f001 fdce 	bl	80034fc <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001966:	f000 f991 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000088 	.word	0x20000088
 8001974:	40004400 	.word	0x40004400

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <MX_GPIO_Init+0x124>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a41      	ldr	r2, [pc, #260]	@ (8001a9c <MX_GPIO_Init+0x124>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b3b      	ldr	r3, [pc, #236]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a3a      	ldr	r2, [pc, #232]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a33      	ldr	r2, [pc, #204]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a2c      	ldr	r2, [pc, #176]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <MX_GPIO_Init+0x124>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
 8001a04:	4826      	ldr	r0, [pc, #152]	@ (8001aa0 <MX_GPIO_Init+0x128>)
 8001a06:	f000 fe21 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4820      	ldr	r0, [pc, #128]	@ (8001aa4 <MX_GPIO_Init+0x12c>)
 8001a22:	f000 fc77 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 8001a26:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8001a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4818      	ldr	r0, [pc, #96]	@ (8001aa0 <MX_GPIO_Init+0x128>)
 8001a40:	f000 fc68 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a44:	2340      	movs	r3, #64	@ 0x40
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4812      	ldr	r0, [pc, #72]	@ (8001aa0 <MX_GPIO_Init+0x128>)
 8001a58:	f000 fc5c 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a62:	2311      	movs	r3, #17
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	480a      	ldr	r0, [pc, #40]	@ (8001aa0 <MX_GPIO_Init+0x128>)
 8001a76:	f000 fc4d 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_GPIO_Init+0x130>)
 8001a8e:	f000 fc41 	bl	8002314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	00000000 	.word	0x00000000

08001ab0 <read_accl_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_read_accl_function */
void read_accl_function(void *argument)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b094      	sub	sp, #80	@ 0x50
 8001ab4:	af06      	add	r7, sp, #24
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  int mpuDeviceAddress = 0x68; // first 7 bits of i2c data
 8001ab8:	2368      	movs	r3, #104	@ 0x68
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
	    int acclZAxisRegisterBits15_8 = 0x3F; // 0x3f, 0x40
 8001abc:	233f      	movs	r3, #63	@ 0x3f
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
	    int acclZAxisRegisterBits7_0 = 0x40;
 8001ac0:	2340      	movs	r3, #64	@ 0x40
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    int powerRegister = 0x6B;
 8001ac4:	236b      	movs	r3, #107	@ 0x6b
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

	    int sda = GPIO_PIN_8; // D7 --> PA_8
 8001ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
	    #define sdaType GPIOA

	    int scl = GPIO_PIN_9; //D8 --> PA_9
 8001ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad2:	623b      	str	r3, [r7, #32]
	    #define sclType GPIOA

	    int read = GPIO_PIN_5; //D4 --> PB_5
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	61fb      	str	r3, [r7, #28]
	    #define readType GPIOB

	    int delayTime = 1; // 1 ms
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]

	    int16_t acclZ = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	82fb      	strh	r3, [r7, #22]
	    float acclMS2 = 0;
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
	    int sendAccl=0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
	    int UART_TX_Pin = GPIO_PIN_7;
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	60bb      	str	r3, [r7, #8]
	    	  #define txType GPIOA
	  acclZ |= ((readMPU(sdaType, sda, sclType, scl, readType, read, mpuDeviceAddress, acclZAxisRegisterBits15_8, delayTime)) << 8);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	9304      	str	r3, [sp, #16]
 8001af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af4:	9303      	str	r3, [sp, #12]
 8001af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	4b4c      	ldr	r3, [pc, #304]	@ (8001c30 <read_accl_function+0x180>)
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	@ (8001c34 <read_accl_function+0x184>)
 8001b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b08:	484a      	ldr	r0, [pc, #296]	@ (8001c34 <read_accl_function+0x184>)
 8001b0a:	f7ff fb51 	bl	80011b0 <readMPU>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	8afb      	ldrh	r3, [r7, #22]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	82fb      	strh	r3, [r7, #22]
	  acclZ |= readMPU(sdaType, sda, sclType, scl, readType, read, mpuDeviceAddress, acclZAxisRegisterBits7_0, delayTime);
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	9304      	str	r3, [sp, #16]
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	9303      	str	r3, [sp, #12]
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	4b41      	ldr	r3, [pc, #260]	@ (8001c30 <read_accl_function+0x180>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	4a40      	ldr	r2, [pc, #256]	@ (8001c34 <read_accl_function+0x184>)
 8001b32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b34:	483f      	ldr	r0, [pc, #252]	@ (8001c34 <read_accl_function+0x184>)
 8001b36:	f7ff fb3b 	bl	80011b0 <readMPU>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	8afb      	ldrh	r3, [r7, #22]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	82fb      	strh	r3, [r7, #22]
	  acclMS2 = (float)(acclZ) / 16000.0 * 9.8;
 8001b44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b50:	ee17 0a90 	vmov	r0, s15
 8001b54:	f7fe fcf8 	bl	8000548 <__aeabi_f2d>
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <read_accl_function+0x188>)
 8001b5e:	f7fe fe75 	bl	800084c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001c28 <read_accl_function+0x178>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd42 	bl	80005f8 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe ff76 	bl	8000a6c <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	613b      	str	r3, [r7, #16]

	  printf("\n");
 8001b84:	200a      	movs	r0, #10
 8001b86:	f005 f80b 	bl	8006ba0 <putchar>
	  printf("%d\r\n", acclZ);
 8001b8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	482a      	ldr	r0, [pc, #168]	@ (8001c3c <read_accl_function+0x18c>)
 8001b92:	f004 fff3 	bl	8006b7c <iprintf>

	  printf("\n");
 8001b96:	200a      	movs	r0, #10
 8001b98:	f005 f802 	bl	8006ba0 <putchar>
	  printf("%d", (int) acclMS2);
 8001b9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 1a90 	vmov	r1, s15
 8001ba8:	4825      	ldr	r0, [pc, #148]	@ (8001c40 <read_accl_function+0x190>)
 8001baa:	f004 ffe7 	bl	8006b7c <iprintf>
	  printf(".");
 8001bae:	202e      	movs	r0, #46	@ 0x2e
 8001bb0:	f004 fff6 	bl	8006ba0 <putchar>
	  printf("%d\r\n", ( (int)(acclMS2 * 10.0) ) % 10);
 8001bb4:	6938      	ldr	r0, [r7, #16]
 8001bb6:	f7fe fcc7 	bl	8000548 <__aeabi_f2d>
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <read_accl_function+0x194>)
 8001bc0:	f7fe fd1a 	bl	80005f8 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe ff26 	bl	8000a1c <__aeabi_d2iz>
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <read_accl_function+0x198>)
 8001bd4:	fb83 2301 	smull	r2, r3, r3, r1
 8001bd8:	109a      	asrs	r2, r3, #2
 8001bda:	17cb      	asrs	r3, r1, #31
 8001bdc:	1ad2      	subs	r2, r2, r3
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	1aca      	subs	r2, r1, r3
 8001be8:	4611      	mov	r1, r2
 8001bea:	4814      	ldr	r0, [pc, #80]	@ (8001c3c <read_accl_function+0x18c>)
 8001bec:	f004 ffc6 	bl	8006b7c <iprintf>

	  printf("\n");
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f004 ffd5 	bl	8006ba0 <putchar>
	  sendAccl = (int) (10*acclMS2);
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	ee17 3a90 	vmov	r3, s15
 8001c0a:	60fb      	str	r3, [r7, #12]

	  sendMsg(txType, UART_TX_Pin, sendAccl, 15, 10);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	b25a      	sxtb	r2, r3
 8001c10:	230a      	movs	r3, #10
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	230f      	movs	r3, #15
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	4806      	ldr	r0, [pc, #24]	@ (8001c34 <read_accl_function+0x184>)
 8001c1a:	f7ff fd59 	bl	80016d0 <sendMsg>

    osDelay(1);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f002 f998 	bl	8003f54 <osDelay>
  {
 8001c24:	bf00      	nop
 8001c26:	e747      	b.n	8001ab8 <read_accl_function+0x8>
 8001c28:	9999999a 	.word	0x9999999a
 8001c2c:	40239999 	.word	0x40239999
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40cf4000 	.word	0x40cf4000
 8001c3c:	08007954 	.word	0x08007954
 8001c40:	0800795c 	.word	0x0800795c
 8001c44:	40240000 	.word	0x40240000
 8001c48:	66666667 	.word	0x66666667

08001c4c <send_data_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_data_function */
void send_data_function(void *argument)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_data_function */
	int receiveData=0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  int UART_TX_Pin = GPIO_PIN_7;
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	60bb      	str	r3, [r7, #8]
	  #define txType GPIOA

//		  sendMsg(txType, UART_TX_Pin, receiveData, 15, 10);

    osDelay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f002 f979 	bl	8003f54 <osDelay>
  {
 8001c62:	bf00      	nop
 8001c64:	e7f8      	b.n	8001c58 <send_data_function+0xc>
	...

08001c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c7a:	f000 fa25 	bl	80020c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40000c00 	.word	0x40000c00

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <Error_Handler+0x8>

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_MspInit+0x54>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a11      	ldr	r2, [pc, #68]	@ (8001cec <HAL_MspInit+0x54>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_MspInit+0x54>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_MspInit+0x54>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <HAL_MspInit+0x54>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_MspInit+0x54>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	210f      	movs	r1, #15
 8001cda:	f06f 0001 	mvn.w	r0, #1
 8001cde:	f000 faef 	bl	80022c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	@ (8001d74 <HAL_UART_MspInit+0x84>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12b      	bne.n	8001d6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_UART_MspInit+0x88>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4a17      	ldr	r2, [pc, #92]	@ (8001d78 <HAL_UART_MspInit+0x88>)
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_UART_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_UART_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <HAL_UART_MspInit+0x88>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_UART_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <HAL_UART_MspInit+0x8c>)
 8001d66:	f000 fad5 	bl	8002314 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	@ 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000

08001d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	@ 0x38
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <HAL_InitTick+0xe4>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	4a32      	ldr	r2, [pc, #200]	@ (8001e64 <HAL_InitTick+0xe4>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da0:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <HAL_InitTick+0xe4>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dac:	f107 0210 	add.w	r2, r7, #16
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 f8fa 	bl	8002fb0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dc6:	f001 f8cb 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8001dca:	6378      	str	r0, [r7, #52]	@ 0x34
 8001dcc:	e004      	b.n	8001dd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dce:	f001 f8c7 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dda:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <HAL_InitTick+0xe8>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	3b01      	subs	r3, #1
 8001de4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_InitTick+0xec>)
 8001de8:	4a21      	ldr	r2, [pc, #132]	@ (8001e70 <HAL_InitTick+0xf0>)
 8001dea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <HAL_InitTick+0xec>)
 8001dee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001df2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001df4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e6c <HAL_InitTick+0xec>)
 8001df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_InitTick+0xec>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <HAL_InitTick+0xec>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_InitTick+0xec>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001e0c:	4817      	ldr	r0, [pc, #92]	@ (8001e6c <HAL_InitTick+0xec>)
 8001e0e:	f001 f901 	bl	8003014 <HAL_TIM_Base_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11b      	bne.n	8001e58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001e20:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <HAL_InitTick+0xec>)
 8001e22:	f001 f951 	bl	80030c8 <HAL_TIM_Base_Start_IT>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d111      	bne.n	8001e58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e34:	2032      	movs	r0, #50	@ 0x32
 8001e36:	f000 fa5f 	bl	80022f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d808      	bhi.n	8001e52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	2032      	movs	r0, #50	@ 0x32
 8001e46:	f000 fa3b 	bl	80022c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <HAL_InitTick+0xf4>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e002      	b.n	8001e58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3738      	adds	r7, #56	@ 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	431bde83 	.word	0x431bde83
 8001e6c:	200000dc 	.word	0x200000dc
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	20000004 	.word	0x20000004

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <NMI_Handler+0x4>

08001e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <MemManage_Handler+0x4>

08001e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <UsageFault_Handler+0x4>

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <TIM5_IRQHandler+0x10>)
 8001eb6:	f001 f969 	bl	800318c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200000dc 	.word	0x200000dc

08001ec4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
  }

  return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fc1d 	bl	8001758 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf1      	blt.n	8001f10 <_write+0x12>
  }
  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:

int _close(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:

int _isatty(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f004 ff14 	bl	8006dfc <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20018000 	.word	0x20018000
 8002000:	00000400 	.word	0x00000400
 8002004:	20000124 	.word	0x20000124
 8002008:	20004bc8 	.word	0x20004bc8

0800200c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002068 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002034:	f7ff ffea 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800203a:	490d      	ldr	r1, [pc, #52]	@ (8002070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800203c:	4a0d      	ldr	r2, [pc, #52]	@ (8002074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002050:	4c0a      	ldr	r4, [pc, #40]	@ (800207c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800205e:	f004 fed3 	bl	8006e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002062:	f7ff fb8b 	bl	800177c <main>
  bx  lr    
 8002066:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002068:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002074:	08007a34 	.word	0x08007a34
  ldr r2, =_sbss
 8002078:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800207c:	20004bc8 	.word	0x20004bc8

08002080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC_IRQHandler>
	...

08002084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <HAL_Init+0x40>)
 800208e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_Init+0x40>)
 800209a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <HAL_Init+0x40>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 f8fc 	bl	80022aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b2:	200f      	movs	r0, #15
 80020b4:	f7ff fe64 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b8:	f7ff fdee 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000128 	.word	0x20000128

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000128 	.word	0x20000128

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000008 	.word	0x20000008

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	@ (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	@ (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff4c 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d2:	f7ff ff61 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	6978      	ldr	r0, [r7, #20]
 80022de:	f7ff ffb1 	bl	8002244 <NVIC_EncodePriority>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff80 	bl	80021f0 <__NVIC_SetPriority>
}
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff54 	bl	80021b4 <__NVIC_EnableIRQ>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	@ 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e159      	b.n	80025e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8148 	bne.w	80025de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a2 	beq.w	80025de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b57      	ldr	r3, [pc, #348]	@ (80025fc <HAL_GPIO_Init+0x2e8>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	4a56      	ldr	r2, [pc, #344]	@ (80025fc <HAL_GPIO_Init+0x2e8>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024aa:	4b54      	ldr	r3, [pc, #336]	@ (80025fc <HAL_GPIO_Init+0x2e8>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_GPIO_Init+0x2ec>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a49      	ldr	r2, [pc, #292]	@ (8002604 <HAL_GPIO_Init+0x2f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x202>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a48      	ldr	r2, [pc, #288]	@ (8002608 <HAL_GPIO_Init+0x2f4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x1fe>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a47      	ldr	r2, [pc, #284]	@ (800260c <HAL_GPIO_Init+0x2f8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x1fa>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a46      	ldr	r2, [pc, #280]	@ (8002610 <HAL_GPIO_Init+0x2fc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x1f6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a45      	ldr	r2, [pc, #276]	@ (8002614 <HAL_GPIO_Init+0x300>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x1f2>
 8002502:	2304      	movs	r3, #4
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002506:	2307      	movs	r3, #7
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x204>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x204>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002516:	2300      	movs	r3, #0
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002528:	4935      	ldr	r1, [pc, #212]	@ (8002600 <HAL_GPIO_Init+0x2ec>)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002536:	4b38      	ldr	r3, [pc, #224]	@ (8002618 <HAL_GPIO_Init+0x304>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255a:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <HAL_GPIO_Init+0x304>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_GPIO_Init+0x304>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002584:	4a24      	ldr	r2, [pc, #144]	@ (8002618 <HAL_GPIO_Init+0x304>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258a:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_GPIO_Init+0x304>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002618 <HAL_GPIO_Init+0x304>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_GPIO_Init+0x304>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002618 <HAL_GPIO_Init+0x304>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	f67f aea2 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	@ 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40013c00 	.word	0x40013c00

0800261c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e001      	b.n	800263e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e267      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d075      	beq.n	800278a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800269e:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d00c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b85      	ldr	r3, [pc, #532]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d112      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b82      	ldr	r3, [pc, #520]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026c2:	d10b      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	4b7e      	ldr	r3, [pc, #504]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05b      	beq.n	8002788 <HAL_RCC_OscConfig+0x108>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d157      	bne.n	8002788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e242      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x74>
 80026e6:	4b76      	ldr	r3, [pc, #472]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a75      	ldr	r2, [pc, #468]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x98>
 80026fe:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6f      	ldr	r2, [pc, #444]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6d      	ldr	r3, [pc, #436]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6c      	ldr	r2, [pc, #432]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 8002718:	4b69      	ldr	r3, [pc, #420]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a68      	ldr	r2, [pc, #416]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b66      	ldr	r3, [pc, #408]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a65      	ldr	r2, [pc, #404]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fcda 	bl	80020f0 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fcd6 	bl	80020f0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	@ 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e207      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5b      	ldr	r3, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xc0>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fcc6 	bl	80020f0 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fcc2 	bl	80020f0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	@ 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1f3      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b51      	ldr	r3, [pc, #324]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0xe8>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002796:	4b4a      	ldr	r3, [pc, #296]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b44      	ldr	r3, [pc, #272]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1c7      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4937      	ldr	r1, [pc, #220]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <HAL_RCC_OscConfig+0x244>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7ff fc7b 	bl	80020f0 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff fc77 	bl	80020f0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1a8      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4925      	ldr	r1, [pc, #148]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_RCC_OscConfig+0x244>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7ff fc5a 	bl	80020f0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff fc56 	bl	80020f0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e187      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_RCC_OscConfig+0x248>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff fc3a 	bl	80020f0 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff fc36 	bl	80020f0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e167      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x200>
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_RCC_OscConfig+0x248>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7ff fc23 	bl	80020f0 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e00e      	b.n	80028cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ae:	f7ff fc1f 	bl	80020f0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d907      	bls.n	80028cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e150      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b88      	ldr	r3, [pc, #544]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ea      	bne.n	80028ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8097 	beq.w	8002a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b81      	ldr	r3, [pc, #516]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	4b7d      	ldr	r3, [pc, #500]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	4a7c      	ldr	r2, [pc, #496]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	@ 0x40
 8002906:	4b7a      	ldr	r3, [pc, #488]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b77      	ldr	r3, [pc, #476]	@ (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b74      	ldr	r3, [pc, #464]	@ (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a73      	ldr	r2, [pc, #460]	@ (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7ff fbdf 	bl	80020f0 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7ff fbdb 	bl	80020f0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e10c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b6a      	ldr	r3, [pc, #424]	@ (8002af4 <HAL_RCC_OscConfig+0x474>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x2ea>
 800295c:	4b64      	ldr	r3, [pc, #400]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a63      	ldr	r2, [pc, #396]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x30c>
 8002972:	4b5f      	ldr	r3, [pc, #380]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	4a5e      	ldr	r2, [pc, #376]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	@ 0x70
 800297e:	4b5c      	ldr	r3, [pc, #368]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a5b      	ldr	r2, [pc, #364]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800298c:	4b58      	ldr	r3, [pc, #352]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	4a57      	ldr	r2, [pc, #348]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	@ 0x70
 8002998:	4b55      	ldr	r3, [pc, #340]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a54      	ldr	r2, [pc, #336]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7ff fba0 	bl	80020f0 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7ff fb9c 	bl	80020f0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0cb      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	4b49      	ldr	r3, [pc, #292]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x334>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7ff fb8a 	bl	80020f0 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7ff fb86 	bl	80020f0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0b5      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f6:	4b3e      	ldr	r3, [pc, #248]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	4a38      	ldr	r2, [pc, #224]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a1 	beq.w	8002b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1e:	4b34      	ldr	r3, [pc, #208]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d05c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d141      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b31      	ldr	r3, [pc, #196]	@ (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff fb5a 	bl	80020f0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff fb56 	bl	80020f0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e087      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	491b      	ldr	r1, [pc, #108]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7ff fb2f 	bl	80020f0 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a96:	f7ff fb2b 	bl	80020f0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e05c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x416>
 8002ab4:	e054      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff fb18 	bl	80020f0 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7ff fb14 	bl	80020f0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e045      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x444>
 8002ae2:	e03d      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e038      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <HAL_RCC_OscConfig+0x4ec>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d028      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d121      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d11a      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	3b01      	subs	r3, #1
 8002b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cc      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b68      	ldr	r3, [pc, #416]	@ (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d90c      	bls.n	8002bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b65      	ldr	r3, [pc, #404]	@ (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b63      	ldr	r3, [pc, #396]	@ (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0b8      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc4:	4b59      	ldr	r3, [pc, #356]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bdc:	4b53      	ldr	r3, [pc, #332]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a52      	ldr	r2, [pc, #328]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b50      	ldr	r3, [pc, #320]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	494d      	ldr	r1, [pc, #308]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d044      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b47      	ldr	r3, [pc, #284]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d119      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e07f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e067      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b37      	ldr	r3, [pc, #220]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4934      	ldr	r1, [pc, #208]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c60:	f7ff fa46 	bl	80020f0 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7ff fa42 	bl	80020f0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d20c      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e032      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc4:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4916      	ldr	r1, [pc, #88]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce2:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	490e      	ldr	r1, [pc, #56]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf6:	f000 f821 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	490a      	ldr	r1, [pc, #40]	@ (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	5ccb      	ldrb	r3, [r1, r3]
 8002d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0e:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d12:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f832 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	080079d8 	.word	0x080079d8
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000004 	.word	0x20000004

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d40:	b094      	sub	sp, #80	@ 0x50
 8002d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d54:	4b79      	ldr	r3, [pc, #484]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d00d      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x40>
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	f200 80e1 	bhi.w	8002f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d6e:	e0db      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b73      	ldr	r3, [pc, #460]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d74:	e0db      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d76:	4b73      	ldr	r3, [pc, #460]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d7a:	e0d8      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d86:	4b6d      	ldr	r3, [pc, #436]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d063      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d92:	4b6a      	ldr	r3, [pc, #424]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	2200      	movs	r2, #0
 8002d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002da6:	2300      	movs	r3, #0
 8002da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dae:	4622      	mov	r2, r4
 8002db0:	462b      	mov	r3, r5
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	1a51      	subs	r1, r2, r1
 8002dca:	6139      	str	r1, [r7, #16]
 8002dcc:	4629      	mov	r1, r5
 8002dce:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de0:	4659      	mov	r1, fp
 8002de2:	018b      	lsls	r3, r1, #6
 8002de4:	4651      	mov	r1, sl
 8002de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dea:	4651      	mov	r1, sl
 8002dec:	018a      	lsls	r2, r1, #6
 8002dee:	4651      	mov	r1, sl
 8002df0:	ebb2 0801 	subs.w	r8, r2, r1
 8002df4:	4659      	mov	r1, fp
 8002df6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0e:	4690      	mov	r8, r2
 8002e10:	4699      	mov	r9, r3
 8002e12:	4623      	mov	r3, r4
 8002e14:	eb18 0303 	adds.w	r3, r8, r3
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	462b      	mov	r3, r5
 8002e1c:	eb49 0303 	adc.w	r3, r9, r3
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e2e:	4629      	mov	r1, r5
 8002e30:	024b      	lsls	r3, r1, #9
 8002e32:	4621      	mov	r1, r4
 8002e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e38:	4621      	mov	r1, r4
 8002e3a:	024a      	lsls	r2, r1, #9
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e42:	2200      	movs	r2, #0
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e4c:	f7fd fe5e 	bl	8000b0c <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e58:	e058      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5a:	4b38      	ldr	r3, [pc, #224]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	2200      	movs	r2, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	4611      	mov	r1, r2
 8002e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e6a:	623b      	str	r3, [r7, #32]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e74:	4642      	mov	r2, r8
 8002e76:	464b      	mov	r3, r9
 8002e78:	f04f 0000 	mov.w	r0, #0
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	0159      	lsls	r1, r3, #5
 8002e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e86:	0150      	lsls	r0, r2, #5
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e92:	4649      	mov	r1, r9
 8002e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eac:	ebb2 040a 	subs.w	r4, r2, sl
 8002eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	00eb      	lsls	r3, r5, #3
 8002ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec2:	00e2      	lsls	r2, r4, #3
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	4643      	mov	r3, r8
 8002eca:	18e3      	adds	r3, r4, r3
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	464b      	mov	r3, r9
 8002ed0:	eb45 0303 	adc.w	r3, r5, r3
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	028b      	lsls	r3, r1, #10
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eec:	4621      	mov	r1, r4
 8002eee:	028a      	lsls	r2, r1, #10
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	61fa      	str	r2, [r7, #28]
 8002efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f00:	f7fd fe04 	bl	8000b0c <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f26:	e002      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3750      	adds	r7, #80	@ 0x50
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	@ (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	080079e8 	.word	0x080079e8

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffdc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	@ (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	080079e8 	.word	0x080079e8

08002fb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fe4:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ff2:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <HAL_RCC_GetClockConfig+0x60>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0207 	and.w	r2, r3, #7
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	601a      	str	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40023c00 	.word	0x40023c00

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e041      	b.n	80030aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f839 	bl	80030b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 f9b2 	bl	80033bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e044      	b.n	800316a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003178 <HAL_TIM_Base_Start_IT+0xb0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x6c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310a:	d013      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x6c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1a      	ldr	r2, [pc, #104]	@ (800317c <HAL_TIM_Base_Start_IT+0xb4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x6c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a19      	ldr	r2, [pc, #100]	@ (8003180 <HAL_TIM_Base_Start_IT+0xb8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x6c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <HAL_TIM_Base_Start_IT+0xbc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x6c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a16      	ldr	r2, [pc, #88]	@ (8003188 <HAL_TIM_Base_Start_IT+0xc0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d111      	bne.n	8003158 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b06      	cmp	r3, #6
 8003144:	d010      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003156:	e007      	b.n	8003168 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40010000 	.word	0x40010000
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40014000 	.word	0x40014000

0800318c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d020      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0202 	mvn.w	r2, #2
 80031c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8d2 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f8c4 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f8d5 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d020      	beq.n	800323c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0204 	mvn.w	r2, #4
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8ac 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f89e 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f8af 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d020      	beq.n	8003288 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01b      	beq.n	8003288 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0208 	mvn.w	r2, #8
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2204      	movs	r2, #4
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f886 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f878 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f889 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d020      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01b      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0210 	mvn.w	r2, #16
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2208      	movs	r2, #8
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f860 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f852 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f863 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d007      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0201 	mvn.w	r2, #1
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fe fcb8 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8e6 	bl	80034e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00c      	beq.n	8003340 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f834 	bl	80033a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0220 	mvn.w	r2, #32
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8b8 	bl	80034d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3a      	ldr	r2, [pc, #232]	@ (80034b8 <TIM_Base_SetConfig+0xfc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0x38>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x38>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a37      	ldr	r2, [pc, #220]	@ (80034bc <TIM_Base_SetConfig+0x100>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x38>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a36      	ldr	r2, [pc, #216]	@ (80034c0 <TIM_Base_SetConfig+0x104>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x38>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a35      	ldr	r2, [pc, #212]	@ (80034c4 <TIM_Base_SetConfig+0x108>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2b      	ldr	r2, [pc, #172]	@ (80034b8 <TIM_Base_SetConfig+0xfc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01b      	beq.n	8003446 <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d017      	beq.n	8003446 <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a28      	ldr	r2, [pc, #160]	@ (80034bc <TIM_Base_SetConfig+0x100>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <TIM_Base_SetConfig+0x8a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a27      	ldr	r2, [pc, #156]	@ (80034c0 <TIM_Base_SetConfig+0x104>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00f      	beq.n	8003446 <TIM_Base_SetConfig+0x8a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a26      	ldr	r2, [pc, #152]	@ (80034c4 <TIM_Base_SetConfig+0x108>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_Base_SetConfig+0x8a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a25      	ldr	r2, [pc, #148]	@ (80034c8 <TIM_Base_SetConfig+0x10c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_Base_SetConfig+0x8a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a24      	ldr	r2, [pc, #144]	@ (80034cc <TIM_Base_SetConfig+0x110>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_Base_SetConfig+0x8a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a23      	ldr	r2, [pc, #140]	@ (80034d0 <TIM_Base_SetConfig+0x114>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d108      	bne.n	8003458 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800344c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a0e      	ldr	r2, [pc, #56]	@ (80034b8 <TIM_Base_SetConfig+0xfc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]
  }
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800

080034d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e042      	b.n	8003594 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe fbe4 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	@ 0x24
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800353e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f973 	bl	800382c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	@ 0x28
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d175      	bne.n	80036a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_UART_Transmit+0x2c>
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e06e      	b.n	80036aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2221      	movs	r2, #33	@ 0x21
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035da:	f7fe fd89 	bl	80020f0 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	88fa      	ldrh	r2, [r7, #6]
 80035ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f4:	d108      	bne.n	8003608 <HAL_UART_Transmit+0x6c>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e003      	b.n	8003610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003610:	e02e      	b.n	8003670 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	@ 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f848 	bl	80036b2 <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e03a      	b.n	80036aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10b      	bne.n	8003652 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	3302      	adds	r3, #2
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e007      	b.n	8003662 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1cb      	bne.n	8003612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	2140      	movs	r1, #64	@ 0x40
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f814 	bl	80036b2 <UART_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e006      	b.n	80036aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c2:	e03b      	b.n	800373c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d037      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036cc:	f7fe fd10 	bl	80020f0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e03a      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d023      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x8a>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b80      	cmp	r3, #128	@ 0x80
 80036f8:	d020      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x8a>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d01d      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d116      	bne.n	800373c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f81d 	bl	8003764 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2208      	movs	r2, #8
 800372e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e00f      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	429a      	cmp	r2, r3
 8003758:	d0b4      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b095      	sub	sp, #84	@ 0x54
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800378c:	643a      	str	r2, [r7, #64]	@ 0x40
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003792:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3314      	adds	r3, #20
 80037a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3314      	adds	r3, #20
 80037be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d119      	bne.n	8003810 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f023 0310 	bic.w	r3, r3, #16
 80037f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037fc:	61ba      	str	r2, [r7, #24]
 80037fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6979      	ldr	r1, [r7, #20]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	613b      	str	r3, [r7, #16]
   return(result);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e5      	bne.n	80037dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800381e:	bf00      	nop
 8003820:	3754      	adds	r7, #84	@ 0x54
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800382c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003830:	b0c0      	sub	sp, #256	@ 0x100
 8003832:	af00      	add	r7, sp, #0
 8003834:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	68d9      	ldr	r1, [r3, #12]
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	ea40 0301 	orr.w	r3, r0, r1
 8003854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	431a      	orrs	r2, r3
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	431a      	orrs	r2, r3
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003884:	f021 010c 	bic.w	r1, r1, #12
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003892:	430b      	orrs	r3, r1
 8003894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a6:	6999      	ldr	r1, [r3, #24]
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	ea40 0301 	orr.w	r3, r0, r1
 80038b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b8f      	ldr	r3, [pc, #572]	@ (8003af8 <UART_SetConfig+0x2cc>)
 80038bc:	429a      	cmp	r2, r3
 80038be:	d005      	beq.n	80038cc <UART_SetConfig+0xa0>
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b8d      	ldr	r3, [pc, #564]	@ (8003afc <UART_SetConfig+0x2d0>)
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d104      	bne.n	80038d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038cc:	f7ff fb5c 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 80038d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038d4:	e003      	b.n	80038de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038d6:	f7ff fb43 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 80038da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e8:	f040 810c 	bne.w	8003b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038fe:	4622      	mov	r2, r4
 8003900:	462b      	mov	r3, r5
 8003902:	1891      	adds	r1, r2, r2
 8003904:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003906:	415b      	adcs	r3, r3
 8003908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800390a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800390e:	4621      	mov	r1, r4
 8003910:	eb12 0801 	adds.w	r8, r2, r1
 8003914:	4629      	mov	r1, r5
 8003916:	eb43 0901 	adc.w	r9, r3, r1
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392e:	4690      	mov	r8, r2
 8003930:	4699      	mov	r9, r3
 8003932:	4623      	mov	r3, r4
 8003934:	eb18 0303 	adds.w	r3, r8, r3
 8003938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800393c:	462b      	mov	r3, r5
 800393e:	eb49 0303 	adc.w	r3, r9, r3
 8003942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003952:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800395a:	460b      	mov	r3, r1
 800395c:	18db      	adds	r3, r3, r3
 800395e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003960:	4613      	mov	r3, r2
 8003962:	eb42 0303 	adc.w	r3, r2, r3
 8003966:	657b      	str	r3, [r7, #84]	@ 0x54
 8003968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800396c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003970:	f7fd f8cc 	bl	8000b0c <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4b61      	ldr	r3, [pc, #388]	@ (8003b00 <UART_SetConfig+0x2d4>)
 800397a:	fba3 2302 	umull	r2, r3, r3, r2
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	011c      	lsls	r4, r3, #4
 8003982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800398c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003994:	4642      	mov	r2, r8
 8003996:	464b      	mov	r3, r9
 8003998:	1891      	adds	r1, r2, r2
 800399a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800399c:	415b      	adcs	r3, r3
 800399e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039a4:	4641      	mov	r1, r8
 80039a6:	eb12 0a01 	adds.w	sl, r2, r1
 80039aa:	4649      	mov	r1, r9
 80039ac:	eb43 0b01 	adc.w	fp, r3, r1
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c4:	4692      	mov	sl, r2
 80039c6:	469b      	mov	fp, r3
 80039c8:	4643      	mov	r3, r8
 80039ca:	eb1a 0303 	adds.w	r3, sl, r3
 80039ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d2:	464b      	mov	r3, r9
 80039d4:	eb4b 0303 	adc.w	r3, fp, r3
 80039d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039f0:	460b      	mov	r3, r1
 80039f2:	18db      	adds	r3, r3, r3
 80039f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039f6:	4613      	mov	r3, r2
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a06:	f7fd f881 	bl	8000b0c <__aeabi_uldivmod>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4b3b      	ldr	r3, [pc, #236]	@ (8003b00 <UART_SetConfig+0x2d4>)
 8003a12:	fba3 2301 	umull	r2, r3, r3, r1
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2264      	movs	r2, #100	@ 0x64
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	1acb      	subs	r3, r1, r3
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a26:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <UART_SetConfig+0x2d4>)
 8003a28:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a34:	441c      	add	r4, r3
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a50:	415b      	adcs	r3, r3
 8003a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a58:	4641      	mov	r1, r8
 8003a5a:	1851      	adds	r1, r2, r1
 8003a5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a5e:	4649      	mov	r1, r9
 8003a60:	414b      	adcs	r3, r1
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a70:	4659      	mov	r1, fp
 8003a72:	00cb      	lsls	r3, r1, #3
 8003a74:	4651      	mov	r1, sl
 8003a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	00ca      	lsls	r2, r1, #3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	4642      	mov	r2, r8
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	460a      	mov	r2, r1
 8003a90:	eb42 0303 	adc.w	r3, r2, r3
 8003a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003aac:	460b      	mov	r3, r1
 8003aae:	18db      	adds	r3, r3, r3
 8003ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	eb42 0303 	adc.w	r3, r2, r3
 8003ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ac2:	f7fd f823 	bl	8000b0c <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <UART_SetConfig+0x2d4>)
 8003acc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	2164      	movs	r1, #100	@ 0x64
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	3332      	adds	r3, #50	@ 0x32
 8003ade:	4a08      	ldr	r2, [pc, #32]	@ (8003b00 <UART_SetConfig+0x2d4>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f003 0207 	and.w	r2, r3, #7
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4422      	add	r2, r4
 8003af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003af4:	e106      	b.n	8003d04 <UART_SetConfig+0x4d8>
 8003af6:	bf00      	nop
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40011400 	.word	0x40011400
 8003b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b16:	4642      	mov	r2, r8
 8003b18:	464b      	mov	r3, r9
 8003b1a:	1891      	adds	r1, r2, r2
 8003b1c:	6239      	str	r1, [r7, #32]
 8003b1e:	415b      	adcs	r3, r3
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b26:	4641      	mov	r1, r8
 8003b28:	1854      	adds	r4, r2, r1
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	eb43 0501 	adc.w	r5, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	00eb      	lsls	r3, r5, #3
 8003b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3e:	00e2      	lsls	r2, r4, #3
 8003b40:	4614      	mov	r4, r2
 8003b42:	461d      	mov	r5, r3
 8003b44:	4643      	mov	r3, r8
 8003b46:	18e3      	adds	r3, r4, r3
 8003b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	eb45 0303 	adc.w	r3, r5, r3
 8003b52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b72:	4629      	mov	r1, r5
 8003b74:	008b      	lsls	r3, r1, #2
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	008a      	lsls	r2, r1, #2
 8003b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b84:	f7fc ffc2 	bl	8000b0c <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4b60      	ldr	r3, [pc, #384]	@ (8003d10 <UART_SetConfig+0x4e4>)
 8003b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	011c      	lsls	r4, r3, #4
 8003b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ba0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	1891      	adds	r1, r2, r2
 8003bae:	61b9      	str	r1, [r7, #24]
 8003bb0:	415b      	adcs	r3, r3
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb8:	4641      	mov	r1, r8
 8003bba:	1851      	adds	r1, r2, r1
 8003bbc:	6139      	str	r1, [r7, #16]
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	414b      	adcs	r3, r1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	00cb      	lsls	r3, r1, #3
 8003bd4:	4651      	mov	r1, sl
 8003bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bda:	4651      	mov	r1, sl
 8003bdc:	00ca      	lsls	r2, r1, #3
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	4642      	mov	r2, r8
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bec:	464b      	mov	r3, r9
 8003bee:	460a      	mov	r2, r1
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c10:	4649      	mov	r1, r9
 8003c12:	008b      	lsls	r3, r1, #2
 8003c14:	4641      	mov	r1, r8
 8003c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	008a      	lsls	r2, r1, #2
 8003c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c22:	f7fc ff73 	bl	8000b0c <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4b38      	ldr	r3, [pc, #224]	@ (8003d10 <UART_SetConfig+0x4e4>)
 8003c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2264      	movs	r2, #100	@ 0x64
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	1acb      	subs	r3, r1, r3
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	3332      	adds	r3, #50	@ 0x32
 8003c40:	4a33      	ldr	r2, [pc, #204]	@ (8003d10 <UART_SetConfig+0x4e4>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c4c:	441c      	add	r4, r3
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c56:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	415b      	adcs	r3, r3
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	1851      	adds	r1, r2, r1
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	4649      	mov	r1, r9
 8003c74:	414b      	adcs	r3, r1
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c84:	4659      	mov	r1, fp
 8003c86:	00cb      	lsls	r3, r1, #3
 8003c88:	4651      	mov	r1, sl
 8003c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8e:	4651      	mov	r1, sl
 8003c90:	00ca      	lsls	r2, r1, #3
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	4642      	mov	r2, r8
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	eb42 0303 	adc.w	r3, r2, r3
 8003ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	008b      	lsls	r3, r1, #2
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cca:	4641      	mov	r1, r8
 8003ccc:	008a      	lsls	r2, r1, #2
 8003cce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cd2:	f7fc ff1b 	bl	8000b0c <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <UART_SetConfig+0x4e4>)
 8003cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	2164      	movs	r1, #100	@ 0x64
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	3332      	adds	r3, #50	@ 0x32
 8003cee:	4a08      	ldr	r2, [pc, #32]	@ (8003d10 <UART_SetConfig+0x4e4>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	f003 020f 	and.w	r2, r3, #15
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4422      	add	r2, r4
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d10:	51eb851f 	.word	0x51eb851f

08003d14 <__NVIC_SetPriority>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	db0a      	blt.n	8003d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	490c      	ldr	r1, [pc, #48]	@ (8003d60 <__NVIC_SetPriority+0x4c>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	440b      	add	r3, r1
 8003d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d3c:	e00a      	b.n	8003d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4908      	ldr	r1, [pc, #32]	@ (8003d64 <__NVIC_SetPriority+0x50>)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	3b04      	subs	r3, #4
 8003d4c:	0112      	lsls	r2, r2, #4
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	440b      	add	r3, r1
 8003d52:	761a      	strb	r2, [r3, #24]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000e100 	.word	0xe000e100
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <SysTick_Handler+0x1c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003d70:	f001 fdc6 	bl	8005900 <xTaskGetSchedulerState>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003d7a:	f002 fbbd 	bl	80064f8 <xPortSysTickHandler>
  }
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f06f 0004 	mvn.w	r0, #4
 8003d92:	f7ff ffbf 	bl	8003d14 <__NVIC_SetPriority>
#endif
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003da2:	f3ef 8305 	mrs	r3, IPSR
 8003da6:	603b      	str	r3, [r7, #0]
  return(result);
 8003da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003dae:	f06f 0305 	mvn.w	r3, #5
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e00c      	b.n	8003dd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <osKernelInitialize+0x44>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <osKernelInitialize+0x44>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	e002      	b.n	8003dd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dd0:	687b      	ldr	r3, [r7, #4]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	2000012c 	.word	0x2000012c

08003de4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dea:	f3ef 8305 	mrs	r3, IPSR
 8003dee:	603b      	str	r3, [r7, #0]
  return(result);
 8003df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8003df6:	f06f 0305 	mvn.w	r3, #5
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	e010      	b.n	8003e20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <osKernelStart+0x48>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d109      	bne.n	8003e1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e06:	f7ff ffbf 	bl	8003d88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e0a:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <osKernelStart+0x48>)
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e10:	f001 f928 	bl	8005064 <vTaskStartScheduler>
      stat = osOK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	e002      	b.n	8003e20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e20:	687b      	ldr	r3, [r7, #4]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2000012c 	.word	0x2000012c

08003e30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	@ 0x38
 8003e34:	af04      	add	r7, sp, #16
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e40:	f3ef 8305 	mrs	r3, IPSR
 8003e44:	617b      	str	r3, [r7, #20]
  return(result);
 8003e46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d17e      	bne.n	8003f4a <osThreadNew+0x11a>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d07b      	beq.n	8003f4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e56:	2318      	movs	r3, #24
 8003e58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d045      	beq.n	8003ef6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <osThreadNew+0x48>
        name = attr->name;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <osThreadNew+0x6e>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b38      	cmp	r3, #56	@ 0x38
 8003e90:	d805      	bhi.n	8003e9e <osThreadNew+0x6e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <osThreadNew+0x72>
        return (NULL);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e054      	b.n	8003f4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <osThreadNew+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b5b      	cmp	r3, #91	@ 0x5b
 8003ec0:	d90a      	bls.n	8003ed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <osThreadNew+0xa8>
        mem = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e010      	b.n	8003efa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10c      	bne.n	8003efa <osThreadNew+0xca>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d108      	bne.n	8003efa <osThreadNew+0xca>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <osThreadNew+0xca>
          mem = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e001      	b.n	8003efa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d110      	bne.n	8003f22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f08:	9202      	str	r2, [sp, #8]
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a3a      	ldr	r2, [r7, #32]
 8003f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fec8 	bl	8004cac <xTaskCreateStatic>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	e013      	b.n	8003f4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d110      	bne.n	8003f4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	f107 0310 	add.w	r3, r7, #16
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 ff16 	bl	8004d6c <xTaskCreate>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d001      	beq.n	8003f4a <osThreadNew+0x11a>
            hTask = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f4a:	693b      	ldr	r3, [r7, #16]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	@ 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f5c:	f3ef 8305 	mrs	r3, IPSR
 8003f60:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <osDelay+0x1c>
    stat = osErrorISR;
 8003f68:	f06f 0305 	mvn.w	r3, #5
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e007      	b.n	8003f80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 f83c 	bl	8004ff8 <vTaskDelay>
    }
  }

  return (stat);
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b08a      	sub	sp, #40	@ 0x28
 8003f8e:	af02      	add	r7, sp, #8
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f9a:	f3ef 8305 	mrs	r3, IPSR
 8003f9e:	613b      	str	r3, [r7, #16]
  return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d15f      	bne.n	8004066 <osMessageQueueNew+0xdc>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05c      	beq.n	8004066 <osMessageQueueNew+0xdc>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d059      	beq.n	8004066 <osMessageQueueNew+0xdc>
    mem = -1;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d029      	beq.n	8004012 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <osMessageQueueNew+0x62>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b4f      	cmp	r3, #79	@ 0x4f
 8003fcc:	d90e      	bls.n	8003fec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <osMessageQueueNew+0x62>
        mem = 1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e014      	b.n	8004016 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d110      	bne.n	8004016 <osMessageQueueNew+0x8c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10c      	bne.n	8004016 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004000:	2b00      	cmp	r3, #0
 8004002:	d108      	bne.n	8004016 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d104      	bne.n	8004016 <osMessageQueueNew+0x8c>
          mem = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e001      	b.n	8004016 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10b      	bne.n	8004034 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2100      	movs	r1, #0
 8004026:	9100      	str	r1, [sp, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f972 	bl	8004314 <xQueueGenericCreateStatic>
 8004030:	61f8      	str	r0, [r7, #28]
 8004032:	e008      	b.n	8004046 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800403a:	2200      	movs	r2, #0
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f9e5 	bl	800440e <xQueueGenericCreate>
 8004044:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <osMessageQueueNew+0xd0>
        name = attr->name;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e001      	b.n	800405e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800405e:	6979      	ldr	r1, [r7, #20]
 8004060:	69f8      	ldr	r0, [r7, #28]
 8004062:	f000 fdc5 	bl	8004bf0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004066:	69fb      	ldr	r3, [r7, #28]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a07      	ldr	r2, [pc, #28]	@ (800409c <vApplicationGetIdleTaskMemory+0x2c>)
 8004080:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4a06      	ldr	r2, [pc, #24]	@ (80040a0 <vApplicationGetIdleTaskMemory+0x30>)
 8004086:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2280      	movs	r2, #128	@ 0x80
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000130 	.word	0x20000130
 80040a0:	2000018c 	.word	0x2000018c

080040a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80040b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4a06      	ldr	r2, [pc, #24]	@ (80040d4 <vApplicationGetTimerTaskMemory+0x30>)
 80040ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	2000038c 	.word	0x2000038c
 80040d4:	200003e8 	.word	0x200003e8

080040d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f103 0208 	add.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295
 80040f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f103 0208 	add.w	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f103 0208 	add.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	601a      	str	r2, [r3, #0]
}
 800416e:	bf00      	nop
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d103      	bne.n	800419a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e00c      	b.n	80041b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3308      	adds	r3, #8
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e002      	b.n	80041a8 <vListInsert+0x2e>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d2f6      	bcs.n	80041a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6852      	ldr	r2, [r2, #4]
 800420c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d103      	bne.n	8004220 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1e5a      	subs	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800426c:	f002 f8b4 	bl	80063d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004278:	68f9      	ldr	r1, [r7, #12]
 800427a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	441a      	add	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	3b01      	subs	r3, #1
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	441a      	add	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	22ff      	movs	r2, #255	@ 0xff
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	22ff      	movs	r2, #255	@ 0xff
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d114      	bne.n	80042ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01a      	beq.n	8004300 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3310      	adds	r3, #16
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 f956 	bl	8005580 <xTaskRemoveFromEventList>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d012      	beq.n	8004300 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <xQueueGenericReset+0xd0>)
 80042dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	e009      	b.n	8004300 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3310      	adds	r3, #16
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fef1 	bl	80040d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3324      	adds	r3, #36	@ 0x24
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff feec 	bl	80040d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004300:	f002 f89c 	bl	800643c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004304:	2301      	movs	r3, #1
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	@ 0x38
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800433a:	bf00      	nop
 800433c:	bf00      	nop
 800433e:	e7fd      	b.n	800433c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	e7fd      	b.n	800435a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <xQueueGenericCreateStatic+0x56>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <xQueueGenericCreateStatic+0x5a>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <xQueueGenericCreateStatic+0x5c>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	623b      	str	r3, [r7, #32]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <xQueueGenericCreateStatic+0x84>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <xQueueGenericCreateStatic+0x88>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <xQueueGenericCreateStatic+0x8a>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	61fb      	str	r3, [r7, #28]
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	e7fd      	b.n	80043b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043ba:	2350      	movs	r3, #80	@ 0x50
 80043bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	d00b      	beq.n	80043dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	61bb      	str	r3, [r7, #24]
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80043e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80043f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f840 	bl	8004484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004406:	4618      	mov	r0, r3
 8004408:	3730      	adds	r7, #48	@ 0x30
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800440e:	b580      	push	{r7, lr}
 8004410:	b08a      	sub	sp, #40	@ 0x28
 8004412:	af02      	add	r7, sp, #8
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10b      	bne.n	800443a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	613b      	str	r3, [r7, #16]
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	3350      	adds	r3, #80	@ 0x50
 8004448:	4618      	mov	r0, r3
 800444a:	f002 f8e7 	bl	800661c <pvPortMalloc>
 800444e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	3350      	adds	r3, #80	@ 0x50
 800445e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004468:	79fa      	ldrb	r2, [r7, #7]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f805 	bl	8004484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800447a:	69bb      	ldr	r3, [r7, #24]
	}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e002      	b.n	80044a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044b2:	2101      	movs	r1, #1
 80044b4:	69b8      	ldr	r0, [r7, #24]
 80044b6:	f7ff fec3 	bl	8004240 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08e      	sub	sp, #56	@ 0x38
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044da:	2300      	movs	r3, #0
 80044dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <xQueueGenericSend+0x34>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <xQueueGenericSend+0x42>
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <xQueueGenericSend+0x46>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <xQueueGenericSend+0x48>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <xQueueGenericSend+0x64>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d103      	bne.n	800453e <xQueueGenericSend+0x72>
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <xQueueGenericSend+0x76>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <xQueueGenericSend+0x78>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <xQueueGenericSend+0x94>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	623b      	str	r3, [r7, #32]
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	e7fd      	b.n	800455c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004560:	f001 f9ce 	bl	8005900 <xTaskGetSchedulerState>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <xQueueGenericSend+0xa4>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <xQueueGenericSend+0xa8>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <xQueueGenericSend+0xaa>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <xQueueGenericSend+0xc6>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	61fb      	str	r3, [r7, #28]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004592:	f001 ff21 	bl	80063d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <xQueueGenericSend+0xdc>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d129      	bne.n	80045fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ae:	f000 fa0f 	bl	80049d0 <prvCopyDataToQueue>
 80045b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	3324      	adds	r3, #36	@ 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 ffdd 	bl	8005580 <xTaskRemoveFromEventList>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045cc:	4b3f      	ldr	r3, [pc, #252]	@ (80046cc <xQueueGenericSend+0x200>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	e00a      	b.n	80045f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045e4:	4b39      	ldr	r3, [pc, #228]	@ (80046cc <xQueueGenericSend+0x200>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045f4:	f001 ff22 	bl	800643c <vPortExitCritical>
				return pdPASS;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e063      	b.n	80046c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004602:	f001 ff1b 	bl	800643c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004606:	2300      	movs	r3, #0
 8004608:	e05c      	b.n	80046c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800460a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004610:	f107 0314 	add.w	r3, r7, #20
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f817 	bl	8005648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800461a:	2301      	movs	r3, #1
 800461c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800461e:	f001 ff0d 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004622:	f000 fd87 	bl	8005134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004626:	f001 fed7 	bl	80063d8 <vPortEnterCritical>
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004630:	b25b      	sxtb	r3, r3
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d103      	bne.n	8004640 <xQueueGenericSend+0x174>
 8004638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004646:	b25b      	sxtb	r3, r3
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d103      	bne.n	8004656 <xQueueGenericSend+0x18a>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004656:	f001 fef1 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800465a:	1d3a      	adds	r2, r7, #4
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f001 f806 	bl	8005674 <xTaskCheckForTimeOut>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d124      	bne.n	80046b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800466e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004670:	f000 faa6 	bl	8004bc0 <prvIsQueueFull>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	3310      	adds	r3, #16
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f000 ff2a 	bl	80054dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800468a:	f000 fa31 	bl	8004af0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800468e:	f000 fd5f 	bl	8005150 <xTaskResumeAll>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	f47f af7c 	bne.w	8004592 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800469a:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <xQueueGenericSend+0x200>)
 800469c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	e772      	b.n	8004592 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ae:	f000 fa1f 	bl	8004af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046b2:	f000 fd4d 	bl	8005150 <xTaskResumeAll>
 80046b6:	e76c      	b.n	8004592 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ba:	f000 fa19 	bl	8004af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046be:	f000 fd47 	bl	8005150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3738      	adds	r7, #56	@ 0x38
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b090      	sub	sp, #64	@ 0x40
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d103      	bne.n	800470e <xQueueGenericSendFromISR+0x3e>
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <xQueueGenericSendFromISR+0x42>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <xQueueGenericSendFromISR+0x44>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d103      	bne.n	800473e <xQueueGenericSendFromISR+0x6e>
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <xQueueGenericSendFromISR+0x72>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <xQueueGenericSendFromISR+0x74>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	623b      	str	r3, [r7, #32]
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004760:	f001 ff1a 	bl	8006598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004764:	f3ef 8211 	mrs	r2, BASEPRI
 8004768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	61fa      	str	r2, [r7, #28]
 800477a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800477c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800477e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <xQueueGenericSendFromISR+0xc2>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d12f      	bne.n	80047f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80047a8:	f000 f912 	bl	80049d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d112      	bne.n	80047dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c0:	3324      	adds	r3, #36	@ 0x24
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fedc 	bl	8005580 <xTaskRemoveFromEventList>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00b      	beq.n	80047ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e007      	b.n	80047ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80047e0:	3301      	adds	r3, #1
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	b25a      	sxtb	r2, r3
 80047e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80047ec:	2301      	movs	r3, #1
 80047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80047f0:	e001      	b.n	80047f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004800:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004804:	4618      	mov	r0, r3
 8004806:	3740      	adds	r7, #64	@ 0x40
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	@ 0x30
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004818:	2300      	movs	r3, #0
 800481a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xQueueReceive+0x32>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	623b      	str	r3, [r7, #32]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <xQueueReceive+0x40>
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <xQueueReceive+0x44>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <xQueueReceive+0x46>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <xQueueReceive+0x62>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	61fb      	str	r3, [r7, #28]
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	e7fd      	b.n	800486a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800486e:	f001 f847 	bl	8005900 <xTaskGetSchedulerState>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <xQueueReceive+0x72>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <xQueueReceive+0x76>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueReceive+0x78>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <xQueueReceive+0x94>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	61bb      	str	r3, [r7, #24]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048a0:	f001 fd9a 	bl	80063d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01f      	beq.n	80048f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b4:	f000 f8f6 	bl	8004aa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	3310      	adds	r3, #16
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fe57 	bl	8005580 <xTaskRemoveFromEventList>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048d8:	4b3c      	ldr	r3, [pc, #240]	@ (80049cc <xQueueReceive+0x1c0>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048e8:	f001 fda8 	bl	800643c <vPortExitCritical>
				return pdPASS;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e069      	b.n	80049c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048f6:	f001 fda1 	bl	800643c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e062      	b.n	80049c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004904:	f107 0310 	add.w	r3, r7, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe9d 	bl	8005648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800490e:	2301      	movs	r3, #1
 8004910:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004912:	f001 fd93 	bl	800643c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004916:	f000 fc0d 	bl	8005134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800491a:	f001 fd5d 	bl	80063d8 <vPortEnterCritical>
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004924:	b25b      	sxtb	r3, r3
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d103      	bne.n	8004934 <xQueueReceive+0x128>
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800493a:	b25b      	sxtb	r3, r3
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d103      	bne.n	800494a <xQueueReceive+0x13e>
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494a:	f001 fd77 	bl	800643c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800494e:	1d3a      	adds	r2, r7, #4
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fe8c 	bl	8005674 <xTaskCheckForTimeOut>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d123      	bne.n	80049aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004964:	f000 f916 	bl	8004b94 <prvIsQueueEmpty>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	3324      	adds	r3, #36	@ 0x24
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fdb0 	bl	80054dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800497c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800497e:	f000 f8b7 	bl	8004af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004982:	f000 fbe5 	bl	8005150 <xTaskResumeAll>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d189      	bne.n	80048a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800498c:	4b0f      	ldr	r3, [pc, #60]	@ (80049cc <xQueueReceive+0x1c0>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	e780      	b.n	80048a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800499e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a0:	f000 f8a6 	bl	8004af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049a4:	f000 fbd4 	bl	8005150 <xTaskResumeAll>
 80049a8:	e77a      	b.n	80048a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ac:	f000 f8a0 	bl	8004af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049b0:	f000 fbce 	bl	8005150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049b6:	f000 f8ed 	bl	8004b94 <prvIsQueueEmpty>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f43f af6f 	beq.w	80048a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3730      	adds	r7, #48	@ 0x30
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	e000ed04 	.word	0xe000ed04

080049d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10d      	bne.n	8004a0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d14d      	bne.n	8004a92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 ff9e 	bl	800593c <xTaskPriorityDisinherit>
 8004a00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	e043      	b.n	8004a92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d119      	bne.n	8004a44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6858      	ldr	r0, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	f002 fa1b 	bl	8006e56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d32b      	bcc.n	8004a92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	e026      	b.n	8004a92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68d8      	ldr	r0, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	f002 fa01 	bl	8006e56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	425b      	negs	r3, r3
 8004a5e:	441a      	add	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d207      	bcs.n	8004a80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	425b      	negs	r3, r3
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d105      	bne.n	8004a92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a9a:	697b      	ldr	r3, [r7, #20]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d018      	beq.n	8004ae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	441a      	add	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d303      	bcc.n	8004ad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68d9      	ldr	r1, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6838      	ldr	r0, [r7, #0]
 8004ae4:	f002 f9b7 	bl	8006e56 <memcpy>
	}
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004af8:	f001 fc6e 	bl	80063d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b04:	e011      	b.n	8004b2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d012      	beq.n	8004b34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3324      	adds	r3, #36	@ 0x24
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fd34 	bl	8005580 <xTaskRemoveFromEventList>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b1e:	f000 fe0d 	bl	800573c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	dce9      	bgt.n	8004b06 <prvUnlockQueue+0x16>
 8004b32:	e000      	b.n	8004b36 <prvUnlockQueue+0x46>
					break;
 8004b34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	22ff      	movs	r2, #255	@ 0xff
 8004b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b3e:	f001 fc7d 	bl	800643c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b42:	f001 fc49 	bl	80063d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b4e:	e011      	b.n	8004b74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3310      	adds	r3, #16
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fd0f 	bl	8005580 <xTaskRemoveFromEventList>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b68:	f000 fde8 	bl	800573c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b6c:	7bbb      	ldrb	r3, [r7, #14]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dce9      	bgt.n	8004b50 <prvUnlockQueue+0x60>
 8004b7c:	e000      	b.n	8004b80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	22ff      	movs	r2, #255	@ 0xff
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b88:	f001 fc58 	bl	800643c <vPortExitCritical>
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b9c:	f001 fc1c 	bl	80063d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e001      	b.n	8004bb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bb2:	f001 fc43 	bl	800643c <vPortExitCritical>

	return xReturn;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bc8:	f001 fc06 	bl	80063d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d102      	bne.n	8004bde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e001      	b.n	8004be2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004be2:	f001 fc2b 	bl	800643c <vPortExitCritical>

	return xReturn;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e014      	b.n	8004c2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c00:	4a0f      	ldr	r2, [pc, #60]	@ (8004c40 <vQueueAddToRegistry+0x50>)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c0c:	490c      	ldr	r1, [pc, #48]	@ (8004c40 <vQueueAddToRegistry+0x50>)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c16:	4a0a      	ldr	r2, [pc, #40]	@ (8004c40 <vQueueAddToRegistry+0x50>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c22:	e006      	b.n	8004c32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b07      	cmp	r3, #7
 8004c2e:	d9e7      	bls.n	8004c00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	200007e8 	.word	0x200007e8

08004c44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c54:	f001 fbc0 	bl	80063d8 <vPortEnterCritical>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d103      	bne.n	8004c6e <vQueueWaitForMessageRestricted+0x2a>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d103      	bne.n	8004c84 <vQueueWaitForMessageRestricted+0x40>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c84:	f001 fbda 	bl	800643c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3324      	adds	r3, #36	@ 0x24
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fc45 	bl	8005528 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c9e:	6978      	ldr	r0, [r7, #20]
 8004ca0:	f7ff ff26 	bl	8004af0 <prvUnlockQueue>
	}
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	@ 0x38
 8004cb0:	af04      	add	r7, sp, #16
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	623b      	str	r3, [r7, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	61fb      	str	r3, [r7, #28]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cf6:	235c      	movs	r3, #92	@ 0x5c
 8004cf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b5c      	cmp	r3, #92	@ 0x5c
 8004cfe:	d00b      	beq.n	8004d18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	61bb      	str	r3, [r7, #24]
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01e      	beq.n	8004d5e <xTaskCreateStatic+0xb2>
 8004d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01b      	beq.n	8004d5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9303      	str	r3, [sp, #12]
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	f107 0314 	add.w	r3, r7, #20
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f850 	bl	8004df6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d58:	f000 f8de 	bl	8004f18 <prvAddNewTaskToReadyList>
 8004d5c:	e001      	b.n	8004d62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d62:	697b      	ldr	r3, [r7, #20]
	}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3728      	adds	r7, #40	@ 0x28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	@ 0x30
 8004d70:	af04      	add	r7, sp, #16
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fc4b 	bl	800661c <pvPortMalloc>
 8004d86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d8e:	205c      	movs	r0, #92	@ 0x5c
 8004d90:	f001 fc44 	bl	800661c <pvPortMalloc>
 8004d94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004da2:	e005      	b.n	8004db0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004da4:	6978      	ldr	r0, [r7, #20]
 8004da6:	f001 fd07 	bl	80067b8 <vPortFree>
 8004daa:	e001      	b.n	8004db0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	9302      	str	r3, [sp, #8]
 8004dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f80e 	bl	8004df6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dda:	69f8      	ldr	r0, [r7, #28]
 8004ddc:	f000 f89c 	bl	8004f18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004de0:	2301      	movs	r3, #1
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e002      	b.n	8004dec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dec:	69bb      	ldr	r3, [r7, #24]
	}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b088      	sub	sp, #32
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	21a5      	movs	r1, #165	@ 0xa5
 8004e10:	f001 ffa6 	bl	8006d60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f023 0307 	bic.w	r3, r3, #7
 8004e2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00b      	beq.n	8004e50 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	617b      	str	r3, [r7, #20]
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	e7fd      	b.n	8004e4c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01f      	beq.n	8004e96 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	e012      	b.n	8004e82 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	7819      	ldrb	r1, [r3, #0]
 8004e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	3334      	adds	r3, #52	@ 0x34
 8004e6c:	460a      	mov	r2, r1
 8004e6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d006      	beq.n	8004e8a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d9e9      	bls.n	8004e5c <prvInitialiseNewTask+0x66>
 8004e88:	e000      	b.n	8004e8c <prvInitialiseNewTask+0x96>
			{
				break;
 8004e8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e94:	e003      	b.n	8004e9e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	2b37      	cmp	r3, #55	@ 0x37
 8004ea2:	d901      	bls.n	8004ea8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ea4:	2337      	movs	r3, #55	@ 0x37
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff f92a 	bl	8004118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	3318      	adds	r3, #24
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff f925 	bl	8004118 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	68f9      	ldr	r1, [r7, #12]
 8004ef6:	69b8      	ldr	r0, [r7, #24]
 8004ef8:	f001 f93e 	bl	8006178 <pxPortInitialiseStack>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f0e:	bf00      	nop
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f20:	f001 fa5a 	bl	80063d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f24:	4b2d      	ldr	r3, [pc, #180]	@ (8004fdc <prvAddNewTaskToReadyList+0xc4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fdc <prvAddNewTaskToReadyList+0xc4>)
 8004f2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f36:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f3c:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <prvAddNewTaskToReadyList+0xc4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d110      	bne.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f44:	f000 fc1e 	bl	8005784 <prvInitialiseTaskLists>
 8004f48:	e00d      	b.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f4a:	4b26      	ldr	r3, [pc, #152]	@ (8004fe4 <prvAddNewTaskToReadyList+0xcc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f52:	4b23      	ldr	r3, [pc, #140]	@ (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d802      	bhi.n	8004f66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f60:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f66:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <prvAddNewTaskToReadyList+0xd0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <prvAddNewTaskToReadyList+0xd0>)
 8004f6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f70:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <prvAddNewTaskToReadyList+0xd0>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <prvAddNewTaskToReadyList+0xd4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <prvAddNewTaskToReadyList+0x74>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	4a18      	ldr	r2, [pc, #96]	@ (8004fec <prvAddNewTaskToReadyList+0xd4>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <prvAddNewTaskToReadyList+0xd8>)
 8004f9a:	441a      	add	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7ff f8c5 	bl	8004132 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fa8:	f001 fa48 	bl	800643c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fac:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <prvAddNewTaskToReadyList+0xcc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00e      	beq.n	8004fd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <prvAddNewTaskToReadyList+0xc8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d207      	bcs.n	8004fd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <prvAddNewTaskToReadyList+0xdc>)
 8004fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000cfc 	.word	0x20000cfc
 8004fe0:	20000828 	.word	0x20000828
 8004fe4:	20000d08 	.word	0x20000d08
 8004fe8:	20000d18 	.word	0x20000d18
 8004fec:	20000d04 	.word	0x20000d04
 8004ff0:	2000082c 	.word	0x2000082c
 8004ff4:	e000ed04 	.word	0xe000ed04

08004ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800500a:	4b14      	ldr	r3, [pc, #80]	@ (800505c <vTaskDelay+0x64>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <vTaskDelay+0x32>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	60bb      	str	r3, [r7, #8]
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	e7fd      	b.n	8005026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800502a:	f000 f883 	bl	8005134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800502e:	2100      	movs	r1, #0
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fcf3 	bl	8005a1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005036:	f000 f88b 	bl	8005150 <xTaskResumeAll>
 800503a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005042:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <vTaskDelay+0x68>)
 8005044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000d24 	.word	0x20000d24
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005072:	463a      	mov	r2, r7
 8005074:	1d39      	adds	r1, r7, #4
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fff8 	bl	8004070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	9202      	str	r2, [sp, #8]
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	2300      	movs	r3, #0
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2300      	movs	r3, #0
 8005090:	460a      	mov	r2, r1
 8005092:	4922      	ldr	r1, [pc, #136]	@ (800511c <vTaskStartScheduler+0xb8>)
 8005094:	4822      	ldr	r0, [pc, #136]	@ (8005120 <vTaskStartScheduler+0xbc>)
 8005096:	f7ff fe09 	bl	8004cac <xTaskCreateStatic>
 800509a:	4603      	mov	r3, r0
 800509c:	4a21      	ldr	r2, [pc, #132]	@ (8005124 <vTaskStartScheduler+0xc0>)
 800509e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050a0:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <vTaskStartScheduler+0xc0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e001      	b.n	80050b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050b8:	f000 fd04 	bl	8005ac4 <xTimerCreateTimerTask>
 80050bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d116      	bne.n	80050f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	613b      	str	r3, [r7, #16]
}
 80050d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050d8:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <vTaskStartScheduler+0xc4>)
 80050da:	f04f 32ff 	mov.w	r2, #4294967295
 80050de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050e0:	4b12      	ldr	r3, [pc, #72]	@ (800512c <vTaskStartScheduler+0xc8>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050e6:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <vTaskStartScheduler+0xcc>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050ec:	f001 f8d0 	bl	8006290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050f0:	e00f      	b.n	8005112 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d10b      	bne.n	8005112 <vTaskStartScheduler+0xae>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60fb      	str	r3, [r7, #12]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <vTaskStartScheduler+0xaa>
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	08007960 	.word	0x08007960
 8005120:	08005755 	.word	0x08005755
 8005124:	20000d20 	.word	0x20000d20
 8005128:	20000d1c 	.word	0x20000d1c
 800512c:	20000d08 	.word	0x20000d08
 8005130:	20000d00 	.word	0x20000d00

08005134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005138:	4b04      	ldr	r3, [pc, #16]	@ (800514c <vTaskSuspendAll+0x18>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	4a03      	ldr	r2, [pc, #12]	@ (800514c <vTaskSuspendAll+0x18>)
 8005140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	20000d24 	.word	0x20000d24

08005150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800515a:	2300      	movs	r3, #0
 800515c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800515e:	4b42      	ldr	r3, [pc, #264]	@ (8005268 <xTaskResumeAll+0x118>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <xTaskResumeAll+0x2e>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	603b      	str	r3, [r7, #0]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800517e:	f001 f92b 	bl	80063d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005182:	4b39      	ldr	r3, [pc, #228]	@ (8005268 <xTaskResumeAll+0x118>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3b01      	subs	r3, #1
 8005188:	4a37      	ldr	r2, [pc, #220]	@ (8005268 <xTaskResumeAll+0x118>)
 800518a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800518c:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <xTaskResumeAll+0x118>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d162      	bne.n	800525a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005194:	4b35      	ldr	r3, [pc, #212]	@ (800526c <xTaskResumeAll+0x11c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d05e      	beq.n	800525a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800519c:	e02f      	b.n	80051fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519e:	4b34      	ldr	r3, [pc, #208]	@ (8005270 <xTaskResumeAll+0x120>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3318      	adds	r3, #24
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff f81e 	bl	80041ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff f819 	bl	80041ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051be:	4b2d      	ldr	r3, [pc, #180]	@ (8005274 <xTaskResumeAll+0x124>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d903      	bls.n	80051ce <xTaskResumeAll+0x7e>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005274 <xTaskResumeAll+0x124>)
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a27      	ldr	r2, [pc, #156]	@ (8005278 <xTaskResumeAll+0x128>)
 80051dc:	441a      	add	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f7fe ffa4 	bl	8004132 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ee:	4b23      	ldr	r3, [pc, #140]	@ (800527c <xTaskResumeAll+0x12c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051f8:	4b21      	ldr	r3, [pc, #132]	@ (8005280 <xTaskResumeAll+0x130>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005270 <xTaskResumeAll+0x120>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1cb      	bne.n	800519e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800520c:	f000 fb58 	bl	80058c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005210:	4b1c      	ldr	r3, [pc, #112]	@ (8005284 <xTaskResumeAll+0x134>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d010      	beq.n	800523e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800521c:	f000 f846 	bl	80052ac <xTaskIncrementTick>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005226:	4b16      	ldr	r3, [pc, #88]	@ (8005280 <xTaskResumeAll+0x130>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3b01      	subs	r3, #1
 8005230:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f1      	bne.n	800521c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005238:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <xTaskResumeAll+0x134>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800523e:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <xTaskResumeAll+0x130>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005246:	2301      	movs	r3, #1
 8005248:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800524a:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <xTaskResumeAll+0x138>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800525a:	f001 f8ef 	bl	800643c <vPortExitCritical>

	return xAlreadyYielded;
 800525e:	68bb      	ldr	r3, [r7, #8]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000d24 	.word	0x20000d24
 800526c:	20000cfc 	.word	0x20000cfc
 8005270:	20000cbc 	.word	0x20000cbc
 8005274:	20000d04 	.word	0x20000d04
 8005278:	2000082c 	.word	0x2000082c
 800527c:	20000828 	.word	0x20000828
 8005280:	20000d10 	.word	0x20000d10
 8005284:	20000d0c 	.word	0x20000d0c
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005292:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <xTaskGetTickCount+0x1c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005298:	687b      	ldr	r3, [r7, #4]
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	20000d00 	.word	0x20000d00

080052ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b6:	4b4f      	ldr	r3, [pc, #316]	@ (80053f4 <xTaskIncrementTick+0x148>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 8090 	bne.w	80053e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052c0:	4b4d      	ldr	r3, [pc, #308]	@ (80053f8 <xTaskIncrementTick+0x14c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052c8:	4a4b      	ldr	r2, [pc, #300]	@ (80053f8 <xTaskIncrementTick+0x14c>)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d121      	bne.n	8005318 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052d4:	4b49      	ldr	r3, [pc, #292]	@ (80053fc <xTaskIncrementTick+0x150>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	603b      	str	r3, [r7, #0]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <xTaskIncrementTick+0x46>
 80052f6:	4b41      	ldr	r3, [pc, #260]	@ (80053fc <xTaskIncrementTick+0x150>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	4b40      	ldr	r3, [pc, #256]	@ (8005400 <xTaskIncrementTick+0x154>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a3e      	ldr	r2, [pc, #248]	@ (80053fc <xTaskIncrementTick+0x150>)
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4a3e      	ldr	r2, [pc, #248]	@ (8005400 <xTaskIncrementTick+0x154>)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	4b3e      	ldr	r3, [pc, #248]	@ (8005404 <xTaskIncrementTick+0x158>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3301      	adds	r3, #1
 8005310:	4a3c      	ldr	r2, [pc, #240]	@ (8005404 <xTaskIncrementTick+0x158>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	f000 fad4 	bl	80058c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005318:	4b3b      	ldr	r3, [pc, #236]	@ (8005408 <xTaskIncrementTick+0x15c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	429a      	cmp	r2, r3
 8005320:	d349      	bcc.n	80053b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005322:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <xTaskIncrementTick+0x150>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800532c:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <xTaskIncrementTick+0x15c>)
 800532e:	f04f 32ff 	mov.w	r2, #4294967295
 8005332:	601a      	str	r2, [r3, #0]
					break;
 8005334:	e03f      	b.n	80053b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005336:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <xTaskIncrementTick+0x150>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d203      	bcs.n	8005356 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800534e:	4a2e      	ldr	r2, [pc, #184]	@ (8005408 <xTaskIncrementTick+0x15c>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005354:	e02f      	b.n	80053b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	3304      	adds	r3, #4
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe ff46 	bl	80041ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe ff3d 	bl	80041ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	4b25      	ldr	r3, [pc, #148]	@ (800540c <xTaskIncrementTick+0x160>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d903      	bls.n	8005386 <xTaskIncrementTick+0xda>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	4a22      	ldr	r2, [pc, #136]	@ (800540c <xTaskIncrementTick+0x160>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4a1f      	ldr	r2, [pc, #124]	@ (8005410 <xTaskIncrementTick+0x164>)
 8005394:	441a      	add	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fe fec8 	bl	8004132 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005414 <xTaskIncrementTick+0x168>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d3b8      	bcc.n	8005322 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053b0:	2301      	movs	r3, #1
 80053b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b4:	e7b5      	b.n	8005322 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053b6:	4b17      	ldr	r3, [pc, #92]	@ (8005414 <xTaskIncrementTick+0x168>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053bc:	4914      	ldr	r1, [pc, #80]	@ (8005410 <xTaskIncrementTick+0x164>)
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d901      	bls.n	80053d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053d2:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <xTaskIncrementTick+0x16c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80053da:	2301      	movs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e004      	b.n	80053ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053e0:	4b0e      	ldr	r3, [pc, #56]	@ (800541c <xTaskIncrementTick+0x170>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	4a0d      	ldr	r2, [pc, #52]	@ (800541c <xTaskIncrementTick+0x170>)
 80053e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053ea:	697b      	ldr	r3, [r7, #20]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000d24 	.word	0x20000d24
 80053f8:	20000d00 	.word	0x20000d00
 80053fc:	20000cb4 	.word	0x20000cb4
 8005400:	20000cb8 	.word	0x20000cb8
 8005404:	20000d14 	.word	0x20000d14
 8005408:	20000d1c 	.word	0x20000d1c
 800540c:	20000d04 	.word	0x20000d04
 8005410:	2000082c 	.word	0x2000082c
 8005414:	20000828 	.word	0x20000828
 8005418:	20000d10 	.word	0x20000d10
 800541c:	20000d0c 	.word	0x20000d0c

08005420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005426:	4b28      	ldr	r3, [pc, #160]	@ (80054c8 <vTaskSwitchContext+0xa8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800542e:	4b27      	ldr	r3, [pc, #156]	@ (80054cc <vTaskSwitchContext+0xac>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005434:	e042      	b.n	80054bc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005436:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <vTaskSwitchContext+0xac>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800543c:	4b24      	ldr	r3, [pc, #144]	@ (80054d0 <vTaskSwitchContext+0xb0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e011      	b.n	8005468 <vTaskSwitchContext+0x48>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <vTaskSwitchContext+0x42>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <vTaskSwitchContext+0x3e>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3b01      	subs	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	491a      	ldr	r1, [pc, #104]	@ (80054d4 <vTaskSwitchContext+0xb4>)
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0e3      	beq.n	8005444 <vTaskSwitchContext+0x24>
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4a13      	ldr	r2, [pc, #76]	@ (80054d4 <vTaskSwitchContext+0xb4>)
 8005488:	4413      	add	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3308      	adds	r3, #8
 800549e:	429a      	cmp	r2, r3
 80054a0:	d104      	bne.n	80054ac <vTaskSwitchContext+0x8c>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <vTaskSwitchContext+0xb8>)
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4a06      	ldr	r2, [pc, #24]	@ (80054d0 <vTaskSwitchContext+0xb0>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	20000d24 	.word	0x20000d24
 80054cc:	20000d10 	.word	0x20000d10
 80054d0:	20000d04 	.word	0x20000d04
 80054d4:	2000082c 	.word	0x2000082c
 80054d8:	20000828 	.word	0x20000828

080054dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	60fb      	str	r3, [r7, #12]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005504:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <vTaskPlaceOnEventList+0x48>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3318      	adds	r3, #24
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fe fe34 	bl	800417a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005512:	2101      	movs	r1, #1
 8005514:	6838      	ldr	r0, [r7, #0]
 8005516:	f000 fa81 	bl	8005a1c <prvAddCurrentTaskToDelayedList>
}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000828 	.word	0x20000828

08005528 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	617b      	str	r3, [r7, #20]
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	e7fd      	b.n	800554e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005552:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <vTaskPlaceOnEventListRestricted+0x54>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3318      	adds	r3, #24
 8005558:	4619      	mov	r1, r3
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7fe fde9 	bl	8004132 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68b8      	ldr	r0, [r7, #8]
 8005570:	f000 fa54 	bl	8005a1c <prvAddCurrentTaskToDelayedList>
	}
 8005574:	bf00      	nop
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20000828 	.word	0x20000828

08005580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	60fb      	str	r3, [r7, #12]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3318      	adds	r3, #24
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fe1a 	bl	80041ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005630 <xTaskRemoveFromEventList+0xb0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d11d      	bne.n	80055fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fe fe11 	bl	80041ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	4b19      	ldr	r3, [pc, #100]	@ (8005634 <xTaskRemoveFromEventList+0xb4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d903      	bls.n	80055de <xTaskRemoveFromEventList+0x5e>
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	4a16      	ldr	r2, [pc, #88]	@ (8005634 <xTaskRemoveFromEventList+0xb4>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4a13      	ldr	r2, [pc, #76]	@ (8005638 <xTaskRemoveFromEventList+0xb8>)
 80055ec:	441a      	add	r2, r3
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7fe fd9c 	bl	8004132 <vListInsertEnd>
 80055fa:	e005      	b.n	8005608 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	3318      	adds	r3, #24
 8005600:	4619      	mov	r1, r3
 8005602:	480e      	ldr	r0, [pc, #56]	@ (800563c <xTaskRemoveFromEventList+0xbc>)
 8005604:	f7fe fd95 	bl	8004132 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <xTaskRemoveFromEventList+0xc0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	429a      	cmp	r2, r3
 8005614:	d905      	bls.n	8005622 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800561a:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <xTaskRemoveFromEventList+0xc4>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e001      	b.n	8005626 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005626:	697b      	ldr	r3, [r7, #20]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000d24 	.word	0x20000d24
 8005634:	20000d04 	.word	0x20000d04
 8005638:	2000082c 	.word	0x2000082c
 800563c:	20000cbc 	.word	0x20000cbc
 8005640:	20000828 	.word	0x20000828
 8005644:	20000d10 	.word	0x20000d10

08005648 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <vTaskInternalSetTimeOutState+0x24>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005658:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <vTaskInternalSetTimeOutState+0x28>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	20000d14 	.word	0x20000d14
 8005670:	20000d00 	.word	0x20000d00

08005674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	613b      	str	r3, [r7, #16]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60fb      	str	r3, [r7, #12]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056ba:	f000 fe8d 	bl	80063d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056be:	4b1d      	ldr	r3, [pc, #116]	@ (8005734 <xTaskCheckForTimeOut+0xc0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d102      	bne.n	80056de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e023      	b.n	8005726 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b15      	ldr	r3, [pc, #84]	@ (8005738 <xTaskCheckForTimeOut+0xc4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d007      	beq.n	80056fa <xTaskCheckForTimeOut+0x86>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d302      	bcc.n	80056fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	e015      	b.n	8005726 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	429a      	cmp	r2, r3
 8005702:	d20b      	bcs.n	800571c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff ff99 	bl	8005648 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	e004      	b.n	8005726 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005722:	2301      	movs	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005726:	f000 fe89 	bl	800643c <vPortExitCritical>

	return xReturn;
 800572a:	69fb      	ldr	r3, [r7, #28]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000d00 	.word	0x20000d00
 8005738:	20000d14 	.word	0x20000d14

0800573c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <vTaskMissedYield+0x14>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
}
 8005746:	bf00      	nop
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	20000d10 	.word	0x20000d10

08005754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800575c:	f000 f852 	bl	8005804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005760:	4b06      	ldr	r3, [pc, #24]	@ (800577c <prvIdleTask+0x28>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d9f9      	bls.n	800575c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005768:	4b05      	ldr	r3, [pc, #20]	@ (8005780 <prvIdleTask+0x2c>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005778:	e7f0      	b.n	800575c <prvIdleTask+0x8>
 800577a:	bf00      	nop
 800577c:	2000082c 	.word	0x2000082c
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800578a:	2300      	movs	r3, #0
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	e00c      	b.n	80057aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4a12      	ldr	r2, [pc, #72]	@ (80057e4 <prvInitialiseTaskLists+0x60>)
 800579c:	4413      	add	r3, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fc9a 	bl	80040d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3301      	adds	r3, #1
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b37      	cmp	r3, #55	@ 0x37
 80057ae:	d9ef      	bls.n	8005790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057b0:	480d      	ldr	r0, [pc, #52]	@ (80057e8 <prvInitialiseTaskLists+0x64>)
 80057b2:	f7fe fc91 	bl	80040d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057b6:	480d      	ldr	r0, [pc, #52]	@ (80057ec <prvInitialiseTaskLists+0x68>)
 80057b8:	f7fe fc8e 	bl	80040d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057bc:	480c      	ldr	r0, [pc, #48]	@ (80057f0 <prvInitialiseTaskLists+0x6c>)
 80057be:	f7fe fc8b 	bl	80040d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057c2:	480c      	ldr	r0, [pc, #48]	@ (80057f4 <prvInitialiseTaskLists+0x70>)
 80057c4:	f7fe fc88 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057c8:	480b      	ldr	r0, [pc, #44]	@ (80057f8 <prvInitialiseTaskLists+0x74>)
 80057ca:	f7fe fc85 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057ce:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <prvInitialiseTaskLists+0x78>)
 80057d0:	4a05      	ldr	r2, [pc, #20]	@ (80057e8 <prvInitialiseTaskLists+0x64>)
 80057d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005800 <prvInitialiseTaskLists+0x7c>)
 80057d6:	4a05      	ldr	r2, [pc, #20]	@ (80057ec <prvInitialiseTaskLists+0x68>)
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	2000082c 	.word	0x2000082c
 80057e8:	20000c8c 	.word	0x20000c8c
 80057ec:	20000ca0 	.word	0x20000ca0
 80057f0:	20000cbc 	.word	0x20000cbc
 80057f4:	20000cd0 	.word	0x20000cd0
 80057f8:	20000ce8 	.word	0x20000ce8
 80057fc:	20000cb4 	.word	0x20000cb4
 8005800:	20000cb8 	.word	0x20000cb8

08005804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800580a:	e019      	b.n	8005840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800580c:	f000 fde4 	bl	80063d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005810:	4b10      	ldr	r3, [pc, #64]	@ (8005854 <prvCheckTasksWaitingTermination+0x50>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fce5 	bl	80041ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <prvCheckTasksWaitingTermination+0x54>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3b01      	subs	r3, #1
 8005828:	4a0b      	ldr	r2, [pc, #44]	@ (8005858 <prvCheckTasksWaitingTermination+0x54>)
 800582a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800582c:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <prvCheckTasksWaitingTermination+0x58>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3b01      	subs	r3, #1
 8005832:	4a0a      	ldr	r2, [pc, #40]	@ (800585c <prvCheckTasksWaitingTermination+0x58>)
 8005834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005836:	f000 fe01 	bl	800643c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f810 	bl	8005860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005840:	4b06      	ldr	r3, [pc, #24]	@ (800585c <prvCheckTasksWaitingTermination+0x58>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e1      	bne.n	800580c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000cd0 	.word	0x20000cd0
 8005858:	20000cfc 	.word	0x20000cfc
 800585c:	20000ce4 	.word	0x20000ce4

08005860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800586e:	2b00      	cmp	r3, #0
 8005870:	d108      	bne.n	8005884 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005876:	4618      	mov	r0, r3
 8005878:	f000 ff9e 	bl	80067b8 <vPortFree>
				vPortFree( pxTCB );
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 ff9b 	bl	80067b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005882:	e019      	b.n	80058b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800588a:	2b01      	cmp	r3, #1
 800588c:	d103      	bne.n	8005896 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 ff92 	bl	80067b8 <vPortFree>
	}
 8005894:	e010      	b.n	80058b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800589c:	2b02      	cmp	r3, #2
 800589e:	d00b      	beq.n	80058b8 <prvDeleteTCB+0x58>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <prvDeleteTCB+0x54>
	}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c6:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <prvResetNextTaskUnblockTime+0x38>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058d0:	4b0a      	ldr	r3, [pc, #40]	@ (80058fc <prvResetNextTaskUnblockTime+0x3c>)
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295
 80058d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058d8:	e008      	b.n	80058ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058da:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <prvResetNextTaskUnblockTime+0x38>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a04      	ldr	r2, [pc, #16]	@ (80058fc <prvResetNextTaskUnblockTime+0x3c>)
 80058ea:	6013      	str	r3, [r2, #0]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20000cb4 	.word	0x20000cb4
 80058fc:	20000d1c 	.word	0x20000d1c

08005900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005906:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <xTaskGetSchedulerState+0x34>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800590e:	2301      	movs	r3, #1
 8005910:	607b      	str	r3, [r7, #4]
 8005912:	e008      	b.n	8005926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005914:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <xTaskGetSchedulerState+0x38>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800591c:	2302      	movs	r3, #2
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	e001      	b.n	8005926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005926:	687b      	ldr	r3, [r7, #4]
	}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	20000d08 	.word	0x20000d08
 8005938:	20000d24 	.word	0x20000d24

0800593c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d058      	beq.n	8005a04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005952:	4b2f      	ldr	r3, [pc, #188]	@ (8005a10 <xTaskPriorityDisinherit+0xd4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	429a      	cmp	r2, r3
 800595a:	d00b      	beq.n	8005974 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10b      	bne.n	8005994 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d02c      	beq.n	8005a04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d128      	bne.n	8005a04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fc18 	bl	80041ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a14 <xTaskPriorityDisinherit+0xd8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d903      	bls.n	80059e4 <xTaskPriorityDisinherit+0xa8>
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005a14 <xTaskPriorityDisinherit+0xd8>)
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4a09      	ldr	r2, [pc, #36]	@ (8005a18 <xTaskPriorityDisinherit+0xdc>)
 80059f2:	441a      	add	r2, r3
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7fe fb99 	bl	8004132 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a04:	697b      	ldr	r3, [r7, #20]
	}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000828 	.word	0x20000828
 8005a14:	20000d04 	.word	0x20000d04
 8005a18:	2000082c 	.word	0x2000082c

08005a1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a26:	4b21      	ldr	r3, [pc, #132]	@ (8005aac <prvAddCurrentTaskToDelayedList+0x90>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a2c:	4b20      	ldr	r3, [pc, #128]	@ (8005ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fbda 	bl	80041ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d10a      	bne.n	8005a56 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a46:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4819      	ldr	r0, [pc, #100]	@ (8005ab4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a50:	f7fe fb6f 	bl	8004132 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a54:	e026      	b.n	8005aa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a5e:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d209      	bcs.n	8005a82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a6e:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f7fe fb7d 	bl	800417a <vListInsert>
}
 8005a80:	e010      	b.n	8005aa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a82:	4b0e      	ldr	r3, [pc, #56]	@ (8005abc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fe fb73 	bl	800417a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a94:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d202      	bcs.n	8005aa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a9e:	4a08      	ldr	r2, [pc, #32]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000d00 	.word	0x20000d00
 8005ab0:	20000828 	.word	0x20000828
 8005ab4:	20000ce8 	.word	0x20000ce8
 8005ab8:	20000cb8 	.word	0x20000cb8
 8005abc:	20000cb4 	.word	0x20000cb4
 8005ac0:	20000d1c 	.word	0x20000d1c

08005ac4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08a      	sub	sp, #40	@ 0x28
 8005ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ace:	f000 fb13 	bl	80060f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b48 <xTimerCreateTimerTask+0x84>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d021      	beq.n	8005b1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ae2:	1d3a      	adds	r2, r7, #4
 8005ae4:	f107 0108 	add.w	r1, r7, #8
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fad9 	bl	80040a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	9202      	str	r2, [sp, #8]
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	2302      	movs	r3, #2
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2300      	movs	r3, #0
 8005b02:	460a      	mov	r2, r1
 8005b04:	4911      	ldr	r1, [pc, #68]	@ (8005b4c <xTimerCreateTimerTask+0x88>)
 8005b06:	4812      	ldr	r0, [pc, #72]	@ (8005b50 <xTimerCreateTimerTask+0x8c>)
 8005b08:	f7ff f8d0 	bl	8004cac <xTaskCreateStatic>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4a11      	ldr	r2, [pc, #68]	@ (8005b54 <xTimerCreateTimerTask+0x90>)
 8005b10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b12:	4b10      	ldr	r3, [pc, #64]	@ (8005b54 <xTimerCreateTimerTask+0x90>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	613b      	str	r3, [r7, #16]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b3c:	697b      	ldr	r3, [r7, #20]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000d58 	.word	0x20000d58
 8005b4c:	08007968 	.word	0x08007968
 8005b50:	08005c91 	.word	0x08005c91
 8005b54:	20000d5c 	.word	0x20000d5c

08005b58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	@ 0x28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	623b      	str	r3, [r7, #32]
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b88:	4b19      	ldr	r3, [pc, #100]	@ (8005bf0 <xTimerGenericCommand+0x98>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02a      	beq.n	8005be6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	dc18      	bgt.n	8005bd4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ba2:	f7ff fead 	bl	8005900 <xTaskGetSchedulerState>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d109      	bne.n	8005bc0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bac:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <xTimerGenericCommand+0x98>)
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	f107 0110 	add.w	r1, r7, #16
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb8:	f7fe fc88 	bl	80044cc <xQueueGenericSend>
 8005bbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bbe:	e012      	b.n	8005be6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <xTimerGenericCommand+0x98>)
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	f107 0110 	add.w	r1, r7, #16
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f7fe fc7e 	bl	80044cc <xQueueGenericSend>
 8005bd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bd2:	e008      	b.n	8005be6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bd4:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <xTimerGenericCommand+0x98>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	f107 0110 	add.w	r1, r7, #16
 8005bdc:	2300      	movs	r3, #0
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	f7fe fd76 	bl	80046d0 <xQueueGenericSendFromISR>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3728      	adds	r7, #40	@ 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000d58 	.word	0x20000d58

08005bf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfe:	4b23      	ldr	r3, [pc, #140]	@ (8005c8c <prvProcessExpiredTimer+0x98>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fe faed 	bl	80041ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d023      	beq.n	8005c68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	18d1      	adds	r1, r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	6978      	ldr	r0, [r7, #20]
 8005c2e:	f000 f8d5 	bl	8005ddc <prvInsertTimerInActiveList>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d020      	beq.n	8005c7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	2100      	movs	r1, #0
 8005c42:	6978      	ldr	r0, [r7, #20]
 8005c44:	f7ff ff88 	bl	8005b58 <xTimerGenericCommand>
 8005c48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d114      	bne.n	8005c7a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60fb      	str	r3, [r7, #12]
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	6978      	ldr	r0, [r7, #20]
 8005c80:	4798      	blx	r3
}
 8005c82:	bf00      	nop
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000d50 	.word	0x20000d50

08005c90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c98:	f107 0308 	add.w	r3, r7, #8
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 f859 	bl	8005d54 <prvGetNextExpireTime>
 8005ca2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f805 	bl	8005cb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cae:	f000 f8d7 	bl	8005e60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cb2:	bf00      	nop
 8005cb4:	e7f0      	b.n	8005c98 <prvTimerTask+0x8>
	...

08005cb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cc2:	f7ff fa37 	bl	8005134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cc6:	f107 0308 	add.w	r3, r7, #8
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 f866 	bl	8005d9c <prvSampleTimeNow>
 8005cd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d130      	bne.n	8005d3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <prvProcessTimerOrBlockTask+0x3c>
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d806      	bhi.n	8005cf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ce6:	f7ff fa33 	bl	8005150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ff81 	bl	8005bf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cf2:	e024      	b.n	8005d3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cfa:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <prvProcessTimerOrBlockTask+0x90>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <prvProcessTimerOrBlockTask+0x50>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <prvProcessTimerOrBlockTask+0x52>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <prvProcessTimerOrBlockTask+0x94>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f7fe ff93 	bl	8004c44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d1e:	f7ff fa17 	bl	8005150 <xTaskResumeAll>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d28:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <prvProcessTimerOrBlockTask+0x98>)
 8005d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	f3bf 8f6f 	isb	sy
}
 8005d38:	e001      	b.n	8005d3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d3a:	f7ff fa09 	bl	8005150 <xTaskResumeAll>
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000d54 	.word	0x20000d54
 8005d4c:	20000d58 	.word	0x20000d58
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d98 <prvGetNextExpireTime+0x44>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <prvGetNextExpireTime+0x16>
 8005d66:	2201      	movs	r2, #1
 8005d68:	e000      	b.n	8005d6c <prvGetNextExpireTime+0x18>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d78:	4b07      	ldr	r3, [pc, #28]	@ (8005d98 <prvGetNextExpireTime+0x44>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e001      	b.n	8005d88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000d50 	.word	0x20000d50

08005d9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005da4:	f7ff fa72 	bl	800528c <xTaskGetTickCount>
 8005da8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005daa:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd8 <prvSampleTimeNow+0x3c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d205      	bcs.n	8005dc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005db4:	f000 f93a 	bl	800602c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005dc6:	4a04      	ldr	r2, [pc, #16]	@ (8005dd8 <prvSampleTimeNow+0x3c>)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000d60 	.word	0x20000d60

08005ddc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d812      	bhi.n	8005e28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d302      	bcc.n	8005e16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e01b      	b.n	8005e4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e16:	4b10      	ldr	r3, [pc, #64]	@ (8005e58 <prvInsertTimerInActiveList+0x7c>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f7fe f9aa 	bl	800417a <vListInsert>
 8005e26:	e012      	b.n	8005e4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d206      	bcs.n	8005e3e <prvInsertTimerInActiveList+0x62>
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d302      	bcc.n	8005e3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	e007      	b.n	8005e4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e3e:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <prvInsertTimerInActiveList+0x80>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f7fe f996 	bl	800417a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e4e:	697b      	ldr	r3, [r7, #20]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000d54 	.word	0x20000d54
 8005e5c:	20000d50 	.word	0x20000d50

08005e60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08e      	sub	sp, #56	@ 0x38
 8005e64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e66:	e0ce      	b.n	8006006 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da19      	bge.n	8005ea2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e6e:	1d3b      	adds	r3, r7, #4
 8005e70:	3304      	adds	r3, #4
 8005e72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	61fb      	str	r3, [r7, #28]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e98:	6850      	ldr	r0, [r2, #4]
 8005e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e9c:	6892      	ldr	r2, [r2, #8]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f2c0 80ae 	blt.w	8006006 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe f996 	bl	80041ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ff6a 	bl	8005d9c <prvSampleTimeNow>
 8005ec8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b09      	cmp	r3, #9
 8005ece:	f200 8097 	bhi.w	8006000 <prvProcessReceivedCommands+0x1a0>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <prvProcessReceivedCommands+0x78>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f01 	.word	0x08005f01
 8005ee4:	08005f77 	.word	0x08005f77
 8005ee8:	08005f8b 	.word	0x08005f8b
 8005eec:	08005fd7 	.word	0x08005fd7
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f01 	.word	0x08005f01
 8005ef8:	08005f77 	.word	0x08005f77
 8005efc:	08005f8b 	.word	0x08005f8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	18d1      	adds	r1, r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f20:	f7ff ff5c 	bl	8005ddc <prvInsertTimerInActiveList>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d06c      	beq.n	8006004 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d061      	beq.n	8006004 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	441a      	add	r2, r3
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	2100      	movs	r1, #0
 8005f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f52:	f7ff fe01 	bl	8005b58 <xTimerGenericCommand>
 8005f56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d152      	bne.n	8006004 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	61bb      	str	r3, [r7, #24]
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	e7fd      	b.n	8005f72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f88:	e03d      	b.n	8006006 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	617b      	str	r3, [r7, #20]
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	18d1      	adds	r1, r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fd0:	f7ff ff04 	bl	8005ddc <prvInsertTimerInActiveList>
					break;
 8005fd4:	e017      	b.n	8006006 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fe6:	f000 fbe7 	bl	80067b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005fea:	e00c      	b.n	8006006 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ffe:	e002      	b.n	8006006 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006000:	bf00      	nop
 8006002:	e000      	b.n	8006006 <prvProcessReceivedCommands+0x1a6>
					break;
 8006004:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006006:	4b08      	ldr	r3, [pc, #32]	@ (8006028 <prvProcessReceivedCommands+0x1c8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1d39      	adds	r1, r7, #4
 800600c:	2200      	movs	r2, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe fbfc 	bl	800480c <xQueueReceive>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	f47f af26 	bne.w	8005e68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	3730      	adds	r7, #48	@ 0x30
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000d58 	.word	0x20000d58

0800602c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006032:	e049      	b.n	80060c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006034:	4b2e      	ldr	r3, [pc, #184]	@ (80060f0 <prvSwitchTimerLists+0xc4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800603e:	4b2c      	ldr	r3, [pc, #176]	@ (80060f0 <prvSwitchTimerLists+0xc4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3304      	adds	r3, #4
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe f8cd 	bl	80041ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d02f      	beq.n	80060c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	429a      	cmp	r2, r3
 8006078:	d90e      	bls.n	8006098 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006086:	4b1a      	ldr	r3, [pc, #104]	@ (80060f0 <prvSwitchTimerLists+0xc4>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3304      	adds	r3, #4
 800608e:	4619      	mov	r1, r3
 8006090:	4610      	mov	r0, r2
 8006092:	f7fe f872 	bl	800417a <vListInsert>
 8006096:	e017      	b.n	80060c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006098:	2300      	movs	r3, #0
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	2100      	movs	r1, #0
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff fd58 	bl	8005b58 <xTimerGenericCommand>
 80060a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	603b      	str	r3, [r7, #0]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060c8:	4b09      	ldr	r3, [pc, #36]	@ (80060f0 <prvSwitchTimerLists+0xc4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1b0      	bne.n	8006034 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <prvSwitchTimerLists+0xc4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060d8:	4b06      	ldr	r3, [pc, #24]	@ (80060f4 <prvSwitchTimerLists+0xc8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a04      	ldr	r2, [pc, #16]	@ (80060f0 <prvSwitchTimerLists+0xc4>)
 80060de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060e0:	4a04      	ldr	r2, [pc, #16]	@ (80060f4 <prvSwitchTimerLists+0xc8>)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	6013      	str	r3, [r2, #0]
}
 80060e6:	bf00      	nop
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000d50 	.word	0x20000d50
 80060f4:	20000d54 	.word	0x20000d54

080060f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060fe:	f000 f96b 	bl	80063d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006102:	4b15      	ldr	r3, [pc, #84]	@ (8006158 <prvCheckForValidListAndQueue+0x60>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d120      	bne.n	800614c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800610a:	4814      	ldr	r0, [pc, #80]	@ (800615c <prvCheckForValidListAndQueue+0x64>)
 800610c:	f7fd ffe4 	bl	80040d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006110:	4813      	ldr	r0, [pc, #76]	@ (8006160 <prvCheckForValidListAndQueue+0x68>)
 8006112:	f7fd ffe1 	bl	80040d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <prvCheckForValidListAndQueue+0x6c>)
 8006118:	4a10      	ldr	r2, [pc, #64]	@ (800615c <prvCheckForValidListAndQueue+0x64>)
 800611a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800611c:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <prvCheckForValidListAndQueue+0x70>)
 800611e:	4a10      	ldr	r2, [pc, #64]	@ (8006160 <prvCheckForValidListAndQueue+0x68>)
 8006120:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006122:	2300      	movs	r3, #0
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	4b11      	ldr	r3, [pc, #68]	@ (800616c <prvCheckForValidListAndQueue+0x74>)
 8006128:	4a11      	ldr	r2, [pc, #68]	@ (8006170 <prvCheckForValidListAndQueue+0x78>)
 800612a:	2110      	movs	r1, #16
 800612c:	200a      	movs	r0, #10
 800612e:	f7fe f8f1 	bl	8004314 <xQueueGenericCreateStatic>
 8006132:	4603      	mov	r3, r0
 8006134:	4a08      	ldr	r2, [pc, #32]	@ (8006158 <prvCheckForValidListAndQueue+0x60>)
 8006136:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006138:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <prvCheckForValidListAndQueue+0x60>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006140:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <prvCheckForValidListAndQueue+0x60>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	490b      	ldr	r1, [pc, #44]	@ (8006174 <prvCheckForValidListAndQueue+0x7c>)
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fd52 	bl	8004bf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800614c:	f000 f976 	bl	800643c <vPortExitCritical>
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000d58 	.word	0x20000d58
 800615c:	20000d28 	.word	0x20000d28
 8006160:	20000d3c 	.word	0x20000d3c
 8006164:	20000d50 	.word	0x20000d50
 8006168:	20000d54 	.word	0x20000d54
 800616c:	20000e04 	.word	0x20000e04
 8006170:	20000d64 	.word	0x20000d64
 8006174:	08007970 	.word	0x08007970

08006178 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3b04      	subs	r3, #4
 8006188:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3b04      	subs	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3b04      	subs	r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061a8:	4a0c      	ldr	r2, [pc, #48]	@ (80061dc <pxPortInitialiseStack+0x64>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3b14      	subs	r3, #20
 80061b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3b04      	subs	r3, #4
 80061be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f06f 0202 	mvn.w	r2, #2
 80061c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3b20      	subs	r3, #32
 80061cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	080061e1 	.word	0x080061e1

080061e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ea:	4b13      	ldr	r3, [pc, #76]	@ (8006238 <prvTaskExitError+0x58>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d00b      	beq.n	800620c <prvTaskExitError+0x2c>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <prvTaskExitError+0x28>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60bb      	str	r3, [r7, #8]
}
 800621e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006220:	bf00      	nop
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0fc      	beq.n	8006222 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	2000000c 	.word	0x2000000c
 800623c:	00000000 	.word	0x00000000

08006240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006240:	4b07      	ldr	r3, [pc, #28]	@ (8006260 <pxCurrentTCBConst2>)
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	f380 8809 	msr	PSP, r0
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f380 8811 	msr	BASEPRI, r0
 800625a:	4770      	bx	lr
 800625c:	f3af 8000 	nop.w

08006260 <pxCurrentTCBConst2>:
 8006260:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop

08006268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006268:	4808      	ldr	r0, [pc, #32]	@ (800628c <prvPortStartFirstTask+0x24>)
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f380 8808 	msr	MSP, r0
 8006272:	f04f 0000 	mov.w	r0, #0
 8006276:	f380 8814 	msr	CONTROL, r0
 800627a:	b662      	cpsie	i
 800627c:	b661      	cpsie	f
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	df00      	svc	0
 8006288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800628a:	bf00      	nop
 800628c:	e000ed08 	.word	0xe000ed08

08006290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <xPortStartScheduler+0x124>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a47      	ldr	r2, [pc, #284]	@ (80063b8 <xPortStartScheduler+0x128>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10b      	bne.n	80062b8 <xPortStartScheduler+0x28>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062b8:	4b3e      	ldr	r3, [pc, #248]	@ (80063b4 <xPortStartScheduler+0x124>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3f      	ldr	r2, [pc, #252]	@ (80063bc <xPortStartScheduler+0x12c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10b      	bne.n	80062da <xPortStartScheduler+0x4a>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	60fb      	str	r3, [r7, #12]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062da:	4b39      	ldr	r3, [pc, #228]	@ (80063c0 <xPortStartScheduler+0x130>)
 80062dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	22ff      	movs	r2, #255	@ 0xff
 80062ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	4b31      	ldr	r3, [pc, #196]	@ (80063c4 <xPortStartScheduler+0x134>)
 8006300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006302:	4b31      	ldr	r3, [pc, #196]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006304:	2207      	movs	r2, #7
 8006306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006308:	e009      	b.n	800631e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800630a:	4b2f      	ldr	r3, [pc, #188]	@ (80063c8 <xPortStartScheduler+0x138>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3b01      	subs	r3, #1
 8006310:	4a2d      	ldr	r2, [pc, #180]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b80      	cmp	r3, #128	@ 0x80
 8006328:	d0ef      	beq.n	800630a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800632a:	4b27      	ldr	r3, [pc, #156]	@ (80063c8 <xPortStartScheduler+0x138>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1c3 0307 	rsb	r3, r3, #7
 8006332:	2b04      	cmp	r3, #4
 8006334:	d00b      	beq.n	800634e <xPortStartScheduler+0xbe>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800634e:	4b1e      	ldr	r3, [pc, #120]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	4a1c      	ldr	r2, [pc, #112]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006358:	4b1b      	ldr	r3, [pc, #108]	@ (80063c8 <xPortStartScheduler+0x138>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006360:	4a19      	ldr	r2, [pc, #100]	@ (80063c8 <xPortStartScheduler+0x138>)
 8006362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800636c:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <xPortStartScheduler+0x13c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a16      	ldr	r2, [pc, #88]	@ (80063cc <xPortStartScheduler+0x13c>)
 8006372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006378:	4b14      	ldr	r3, [pc, #80]	@ (80063cc <xPortStartScheduler+0x13c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a13      	ldr	r2, [pc, #76]	@ (80063cc <xPortStartScheduler+0x13c>)
 800637e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006384:	f000 f8da 	bl	800653c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006388:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <xPortStartScheduler+0x140>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800638e:	f000 f8f9 	bl	8006584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006392:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <xPortStartScheduler+0x144>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a0f      	ldr	r2, [pc, #60]	@ (80063d4 <xPortStartScheduler+0x144>)
 8006398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800639c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800639e:	f7ff ff63 	bl	8006268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063a2:	f7ff f83d 	bl	8005420 <vTaskSwitchContext>
	prvTaskExitError();
 80063a6:	f7ff ff1b 	bl	80061e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	e000ed00 	.word	0xe000ed00
 80063b8:	410fc271 	.word	0x410fc271
 80063bc:	410fc270 	.word	0x410fc270
 80063c0:	e000e400 	.word	0xe000e400
 80063c4:	20000e54 	.word	0x20000e54
 80063c8:	20000e58 	.word	0x20000e58
 80063cc:	e000ed20 	.word	0xe000ed20
 80063d0:	2000000c 	.word	0x2000000c
 80063d4:	e000ef34 	.word	0xe000ef34

080063d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063f2:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <vPortEnterCritical+0x5c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006434 <vPortEnterCritical+0x5c>)
 80063fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <vPortEnterCritical+0x5c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d110      	bne.n	8006426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006404:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <vPortEnterCritical+0x60>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <vPortEnterCritical+0x4e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	603b      	str	r3, [r7, #0]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <vPortEnterCritical+0x4a>
	}
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	2000000c 	.word	0x2000000c
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006442:	4b12      	ldr	r3, [pc, #72]	@ (800648c <vPortExitCritical+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <vPortExitCritical+0x26>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006462:	4b0a      	ldr	r3, [pc, #40]	@ (800648c <vPortExitCritical+0x50>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3b01      	subs	r3, #1
 8006468:	4a08      	ldr	r2, [pc, #32]	@ (800648c <vPortExitCritical+0x50>)
 800646a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800646c:	4b07      	ldr	r3, [pc, #28]	@ (800648c <vPortExitCritical+0x50>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <vPortExitCritical+0x44>
 8006474:	2300      	movs	r3, #0
 8006476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f383 8811 	msr	BASEPRI, r3
}
 800647e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	2000000c 	.word	0x2000000c

08006490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006490:	f3ef 8009 	mrs	r0, PSP
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <pxCurrentTCBConst>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	f01e 0f10 	tst.w	lr, #16
 80064a0:	bf08      	it	eq
 80064a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	6010      	str	r0, [r2, #0]
 80064ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064b4:	f380 8811 	msr	BASEPRI, r0
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f7fe ffae 	bl	8005420 <vTaskSwitchContext>
 80064c4:	f04f 0000 	mov.w	r0, #0
 80064c8:	f380 8811 	msr	BASEPRI, r0
 80064cc:	bc09      	pop	{r0, r3}
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	6808      	ldr	r0, [r1, #0]
 80064d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d6:	f01e 0f10 	tst.w	lr, #16
 80064da:	bf08      	it	eq
 80064dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064e0:	f380 8809 	msr	PSP, r0
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w

080064f0 <pxCurrentTCBConst>:
 80064f0:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop

080064f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006512:	f7fe fecb 	bl	80052ac <xTaskIncrementTick>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <xPortSysTickHandler+0x40>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006540:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <vPortSetupTimerInterrupt+0x34>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006546:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <vPortSetupTimerInterrupt+0x38>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800654c:	4b0a      	ldr	r3, [pc, #40]	@ (8006578 <vPortSetupTimerInterrupt+0x3c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a0a      	ldr	r2, [pc, #40]	@ (800657c <vPortSetupTimerInterrupt+0x40>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	099b      	lsrs	r3, r3, #6
 8006558:	4a09      	ldr	r2, [pc, #36]	@ (8006580 <vPortSetupTimerInterrupt+0x44>)
 800655a:	3b01      	subs	r3, #1
 800655c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800655e:	4b04      	ldr	r3, [pc, #16]	@ (8006570 <vPortSetupTimerInterrupt+0x34>)
 8006560:	2207      	movs	r2, #7
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	e000e010 	.word	0xe000e010
 8006574:	e000e018 	.word	0xe000e018
 8006578:	20000000 	.word	0x20000000
 800657c:	10624dd3 	.word	0x10624dd3
 8006580:	e000e014 	.word	0xe000e014

08006584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006594 <vPortEnableVFP+0x10>
 8006588:	6801      	ldr	r1, [r0, #0]
 800658a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800658e:	6001      	str	r1, [r0, #0]
 8006590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006592:	bf00      	nop
 8006594:	e000ed88 	.word	0xe000ed88

08006598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800659e:	f3ef 8305 	mrs	r3, IPSR
 80065a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b0f      	cmp	r3, #15
 80065a8:	d915      	bls.n	80065d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065aa:	4a18      	ldr	r2, [pc, #96]	@ (800660c <vPortValidateInterruptPriority+0x74>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065b4:	4b16      	ldr	r3, [pc, #88]	@ (8006610 <vPortValidateInterruptPriority+0x78>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	7afa      	ldrb	r2, [r7, #11]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d20b      	bcs.n	80065d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006614 <vPortValidateInterruptPriority+0x7c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065de:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <vPortValidateInterruptPriority+0x80>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d90b      	bls.n	80065fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	603b      	str	r3, [r7, #0]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <vPortValidateInterruptPriority+0x62>
	}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	e000e3f0 	.word	0xe000e3f0
 8006610:	20000e54 	.word	0x20000e54
 8006614:	e000ed0c 	.word	0xe000ed0c
 8006618:	20000e58 	.word	0x20000e58

0800661c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	@ 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006628:	f7fe fd84 	bl	8005134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800662c:	4b5c      	ldr	r3, [pc, #368]	@ (80067a0 <pvPortMalloc+0x184>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006634:	f000 f924 	bl	8006880 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006638:	4b5a      	ldr	r3, [pc, #360]	@ (80067a4 <pvPortMalloc+0x188>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8095 	bne.w	8006770 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01e      	beq.n	800668a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800664c:	2208      	movs	r2, #8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d015      	beq.n	800668a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f023 0307 	bic.w	r3, r3, #7
 8006664:	3308      	adds	r3, #8
 8006666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <pvPortMalloc+0x6e>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	617b      	str	r3, [r7, #20]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d06f      	beq.n	8006770 <pvPortMalloc+0x154>
 8006690:	4b45      	ldr	r3, [pc, #276]	@ (80067a8 <pvPortMalloc+0x18c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d86a      	bhi.n	8006770 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800669a:	4b44      	ldr	r3, [pc, #272]	@ (80067ac <pvPortMalloc+0x190>)
 800669c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800669e:	4b43      	ldr	r3, [pc, #268]	@ (80067ac <pvPortMalloc+0x190>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066a4:	e004      	b.n	80066b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d903      	bls.n	80066c2 <pvPortMalloc+0xa6>
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f1      	bne.n	80066a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066c2:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <pvPortMalloc+0x184>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d051      	beq.n	8006770 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2208      	movs	r2, #8
 80066d2:	4413      	add	r3, r2
 80066d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	1ad2      	subs	r2, r2, r3
 80066e6:	2308      	movs	r3, #8
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d920      	bls.n	8006730 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <pvPortMalloc+0xfc>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	613b      	str	r3, [r7, #16]
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	e7fd      	b.n	8006714 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800672a:	69b8      	ldr	r0, [r7, #24]
 800672c:	f000 f90a 	bl	8006944 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006730:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <pvPortMalloc+0x18c>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	4a1b      	ldr	r2, [pc, #108]	@ (80067a8 <pvPortMalloc+0x18c>)
 800673c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800673e:	4b1a      	ldr	r3, [pc, #104]	@ (80067a8 <pvPortMalloc+0x18c>)
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b1b      	ldr	r3, [pc, #108]	@ (80067b0 <pvPortMalloc+0x194>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d203      	bcs.n	8006752 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800674a:	4b17      	ldr	r3, [pc, #92]	@ (80067a8 <pvPortMalloc+0x18c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <pvPortMalloc+0x194>)
 8006750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	4b13      	ldr	r3, [pc, #76]	@ (80067a4 <pvPortMalloc+0x188>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	431a      	orrs	r2, r3
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006766:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <pvPortMalloc+0x198>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	4a11      	ldr	r2, [pc, #68]	@ (80067b4 <pvPortMalloc+0x198>)
 800676e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006770:	f7fe fcee 	bl	8005150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <pvPortMalloc+0x17a>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	60fb      	str	r3, [r7, #12]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <pvPortMalloc+0x176>
	return pvReturn;
 8006796:	69fb      	ldr	r3, [r7, #28]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3728      	adds	r7, #40	@ 0x28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20004a64 	.word	0x20004a64
 80067a4:	20004a78 	.word	0x20004a78
 80067a8:	20004a68 	.word	0x20004a68
 80067ac:	20004a5c 	.word	0x20004a5c
 80067b0:	20004a6c 	.word	0x20004a6c
 80067b4:	20004a70 	.word	0x20004a70

080067b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d04f      	beq.n	800686a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067ca:	2308      	movs	r3, #8
 80067cc:	425b      	negs	r3, r3
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4413      	add	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	4b25      	ldr	r3, [pc, #148]	@ (8006874 <vPortFree+0xbc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <vPortFree+0x46>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <vPortFree+0x66>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	60bb      	str	r3, [r7, #8]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	4b14      	ldr	r3, [pc, #80]	@ (8006874 <vPortFree+0xbc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01e      	beq.n	800686a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11a      	bne.n	800686a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	4b0e      	ldr	r3, [pc, #56]	@ (8006874 <vPortFree+0xbc>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	43db      	mvns	r3, r3
 800683e:	401a      	ands	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006844:	f7fe fc76 	bl	8005134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <vPortFree+0xc0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4413      	add	r3, r2
 8006852:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <vPortFree+0xc0>)
 8006854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006856:	6938      	ldr	r0, [r7, #16]
 8006858:	f000 f874 	bl	8006944 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800685c:	4b07      	ldr	r3, [pc, #28]	@ (800687c <vPortFree+0xc4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	4a06      	ldr	r2, [pc, #24]	@ (800687c <vPortFree+0xc4>)
 8006864:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006866:	f7fe fc73 	bl	8005150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800686a:	bf00      	nop
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20004a78 	.word	0x20004a78
 8006878:	20004a68 	.word	0x20004a68
 800687c:	20004a74 	.word	0x20004a74

08006880 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006886:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800688a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800688c:	4b27      	ldr	r3, [pc, #156]	@ (800692c <prvHeapInit+0xac>)
 800688e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3307      	adds	r3, #7
 800689e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0307 	bic.w	r3, r3, #7
 80068a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	4a1f      	ldr	r2, [pc, #124]	@ (800692c <prvHeapInit+0xac>)
 80068b0:	4413      	add	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006930 <prvHeapInit+0xb0>)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068be:	4b1c      	ldr	r3, [pc, #112]	@ (8006930 <prvHeapInit+0xb0>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	4413      	add	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068cc:	2208      	movs	r2, #8
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <prvHeapInit+0xb4>)
 80068e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068e2:	4b14      	ldr	r3, [pc, #80]	@ (8006934 <prvHeapInit+0xb4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ea:	4b12      	ldr	r3, [pc, #72]	@ (8006934 <prvHeapInit+0xb4>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006900:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <prvHeapInit+0xb4>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a0a      	ldr	r2, [pc, #40]	@ (8006938 <prvHeapInit+0xb8>)
 800690e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4a09      	ldr	r2, [pc, #36]	@ (800693c <prvHeapInit+0xbc>)
 8006916:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006918:	4b09      	ldr	r3, [pc, #36]	@ (8006940 <prvHeapInit+0xc0>)
 800691a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	20000e5c 	.word	0x20000e5c
 8006930:	20004a5c 	.word	0x20004a5c
 8006934:	20004a64 	.word	0x20004a64
 8006938:	20004a6c 	.word	0x20004a6c
 800693c:	20004a68 	.word	0x20004a68
 8006940:	20004a78 	.word	0x20004a78

08006944 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800694c:	4b28      	ldr	r3, [pc, #160]	@ (80069f0 <prvInsertBlockIntoFreeList+0xac>)
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e002      	b.n	8006958 <prvInsertBlockIntoFreeList+0x14>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	429a      	cmp	r2, r3
 8006960:	d8f7      	bhi.n	8006952 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d108      	bne.n	8006986 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	441a      	add	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	441a      	add	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d118      	bne.n	80069cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4b15      	ldr	r3, [pc, #84]	@ (80069f4 <prvInsertBlockIntoFreeList+0xb0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d00d      	beq.n	80069c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	441a      	add	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e008      	b.n	80069d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <prvInsertBlockIntoFreeList+0xb0>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	e003      	b.n	80069d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d002      	beq.n	80069e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20004a5c 	.word	0x20004a5c
 80069f4:	20004a64 	.word	0x20004a64

080069f8 <std>:
 80069f8:	2300      	movs	r3, #0
 80069fa:	b510      	push	{r4, lr}
 80069fc:	4604      	mov	r4, r0
 80069fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a06:	6083      	str	r3, [r0, #8]
 8006a08:	8181      	strh	r1, [r0, #12]
 8006a0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a0c:	81c2      	strh	r2, [r0, #14]
 8006a0e:	6183      	str	r3, [r0, #24]
 8006a10:	4619      	mov	r1, r3
 8006a12:	2208      	movs	r2, #8
 8006a14:	305c      	adds	r0, #92	@ 0x5c
 8006a16:	f000 f9a3 	bl	8006d60 <memset>
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <std+0x58>)
 8006a1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <std+0x5c>)
 8006a20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a22:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <std+0x60>)
 8006a24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <std+0x64>)
 8006a28:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a60 <std+0x68>)
 8006a2c:	6224      	str	r4, [r4, #32]
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d006      	beq.n	8006a40 <std+0x48>
 8006a32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a36:	4294      	cmp	r4, r2
 8006a38:	d002      	beq.n	8006a40 <std+0x48>
 8006a3a:	33d0      	adds	r3, #208	@ 0xd0
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	d105      	bne.n	8006a4c <std+0x54>
 8006a40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a48:	f000 ba02 	b.w	8006e50 <__retarget_lock_init_recursive>
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	bf00      	nop
 8006a50:	08006bb1 	.word	0x08006bb1
 8006a54:	08006bd3 	.word	0x08006bd3
 8006a58:	08006c0b 	.word	0x08006c0b
 8006a5c:	08006c2f 	.word	0x08006c2f
 8006a60:	20004a7c 	.word	0x20004a7c

08006a64 <stdio_exit_handler>:
 8006a64:	4a02      	ldr	r2, [pc, #8]	@ (8006a70 <stdio_exit_handler+0xc>)
 8006a66:	4903      	ldr	r1, [pc, #12]	@ (8006a74 <stdio_exit_handler+0x10>)
 8006a68:	4803      	ldr	r0, [pc, #12]	@ (8006a78 <stdio_exit_handler+0x14>)
 8006a6a:	f000 b869 	b.w	8006b40 <_fwalk_sglue>
 8006a6e:	bf00      	nop
 8006a70:	20000010 	.word	0x20000010
 8006a74:	0800770d 	.word	0x0800770d
 8006a78:	20000020 	.word	0x20000020

08006a7c <cleanup_stdio>:
 8006a7c:	6841      	ldr	r1, [r0, #4]
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab0 <cleanup_stdio+0x34>)
 8006a80:	4299      	cmp	r1, r3
 8006a82:	b510      	push	{r4, lr}
 8006a84:	4604      	mov	r4, r0
 8006a86:	d001      	beq.n	8006a8c <cleanup_stdio+0x10>
 8006a88:	f000 fe40 	bl	800770c <_fflush_r>
 8006a8c:	68a1      	ldr	r1, [r4, #8]
 8006a8e:	4b09      	ldr	r3, [pc, #36]	@ (8006ab4 <cleanup_stdio+0x38>)
 8006a90:	4299      	cmp	r1, r3
 8006a92:	d002      	beq.n	8006a9a <cleanup_stdio+0x1e>
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fe39 	bl	800770c <_fflush_r>
 8006a9a:	68e1      	ldr	r1, [r4, #12]
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <cleanup_stdio+0x3c>)
 8006a9e:	4299      	cmp	r1, r3
 8006aa0:	d004      	beq.n	8006aac <cleanup_stdio+0x30>
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa8:	f000 be30 	b.w	800770c <_fflush_r>
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	bf00      	nop
 8006ab0:	20004a7c 	.word	0x20004a7c
 8006ab4:	20004ae4 	.word	0x20004ae4
 8006ab8:	20004b4c 	.word	0x20004b4c

08006abc <global_stdio_init.part.0>:
 8006abc:	b510      	push	{r4, lr}
 8006abe:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <global_stdio_init.part.0+0x30>)
 8006ac0:	4c0b      	ldr	r4, [pc, #44]	@ (8006af0 <global_stdio_init.part.0+0x34>)
 8006ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8006af4 <global_stdio_init.part.0+0x38>)
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2104      	movs	r1, #4
 8006acc:	f7ff ff94 	bl	80069f8 <std>
 8006ad0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	2109      	movs	r1, #9
 8006ad8:	f7ff ff8e 	bl	80069f8 <std>
 8006adc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae6:	2112      	movs	r1, #18
 8006ae8:	f7ff bf86 	b.w	80069f8 <std>
 8006aec:	20004bb4 	.word	0x20004bb4
 8006af0:	20004a7c 	.word	0x20004a7c
 8006af4:	08006a65 	.word	0x08006a65

08006af8 <__sfp_lock_acquire>:
 8006af8:	4801      	ldr	r0, [pc, #4]	@ (8006b00 <__sfp_lock_acquire+0x8>)
 8006afa:	f000 b9aa 	b.w	8006e52 <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	20004bbd 	.word	0x20004bbd

08006b04 <__sfp_lock_release>:
 8006b04:	4801      	ldr	r0, [pc, #4]	@ (8006b0c <__sfp_lock_release+0x8>)
 8006b06:	f000 b9a5 	b.w	8006e54 <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	20004bbd 	.word	0x20004bbd

08006b10 <__sinit>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	4604      	mov	r4, r0
 8006b14:	f7ff fff0 	bl	8006af8 <__sfp_lock_acquire>
 8006b18:	6a23      	ldr	r3, [r4, #32]
 8006b1a:	b11b      	cbz	r3, 8006b24 <__sinit+0x14>
 8006b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b20:	f7ff bff0 	b.w	8006b04 <__sfp_lock_release>
 8006b24:	4b04      	ldr	r3, [pc, #16]	@ (8006b38 <__sinit+0x28>)
 8006b26:	6223      	str	r3, [r4, #32]
 8006b28:	4b04      	ldr	r3, [pc, #16]	@ (8006b3c <__sinit+0x2c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f5      	bne.n	8006b1c <__sinit+0xc>
 8006b30:	f7ff ffc4 	bl	8006abc <global_stdio_init.part.0>
 8006b34:	e7f2      	b.n	8006b1c <__sinit+0xc>
 8006b36:	bf00      	nop
 8006b38:	08006a7d 	.word	0x08006a7d
 8006b3c:	20004bb4 	.word	0x20004bb4

08006b40 <_fwalk_sglue>:
 8006b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b44:	4607      	mov	r7, r0
 8006b46:	4688      	mov	r8, r1
 8006b48:	4614      	mov	r4, r2
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b50:	f1b9 0901 	subs.w	r9, r9, #1
 8006b54:	d505      	bpl.n	8006b62 <_fwalk_sglue+0x22>
 8006b56:	6824      	ldr	r4, [r4, #0]
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	d1f7      	bne.n	8006b4c <_fwalk_sglue+0xc>
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b62:	89ab      	ldrh	r3, [r5, #12]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d907      	bls.n	8006b78 <_fwalk_sglue+0x38>
 8006b68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	d003      	beq.n	8006b78 <_fwalk_sglue+0x38>
 8006b70:	4629      	mov	r1, r5
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	4306      	orrs	r6, r0
 8006b78:	3568      	adds	r5, #104	@ 0x68
 8006b7a:	e7e9      	b.n	8006b50 <_fwalk_sglue+0x10>

08006b7c <iprintf>:
 8006b7c:	b40f      	push	{r0, r1, r2, r3}
 8006b7e:	b507      	push	{r0, r1, r2, lr}
 8006b80:	4906      	ldr	r1, [pc, #24]	@ (8006b9c <iprintf+0x20>)
 8006b82:	ab04      	add	r3, sp, #16
 8006b84:	6808      	ldr	r0, [r1, #0]
 8006b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b8a:	6881      	ldr	r1, [r0, #8]
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	f000 fa93 	bl	80070b8 <_vfiprintf_r>
 8006b92:	b003      	add	sp, #12
 8006b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b98:	b004      	add	sp, #16
 8006b9a:	4770      	bx	lr
 8006b9c:	2000001c 	.word	0x2000001c

08006ba0 <putchar>:
 8006ba0:	4b02      	ldr	r3, [pc, #8]	@ (8006bac <putchar+0xc>)
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	6882      	ldr	r2, [r0, #8]
 8006ba8:	f000 be3a 	b.w	8007820 <_putc_r>
 8006bac:	2000001c 	.word	0x2000001c

08006bb0 <__sread>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb8:	f000 f8fc 	bl	8006db4 <_read_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	bfab      	itete	ge
 8006bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc4:	181b      	addge	r3, r3, r0
 8006bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bca:	bfac      	ite	ge
 8006bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bce:	81a3      	strhlt	r3, [r4, #12]
 8006bd0:	bd10      	pop	{r4, pc}

08006bd2 <__swrite>:
 8006bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd6:	461f      	mov	r7, r3
 8006bd8:	898b      	ldrh	r3, [r1, #12]
 8006bda:	05db      	lsls	r3, r3, #23
 8006bdc:	4605      	mov	r5, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	4616      	mov	r6, r2
 8006be2:	d505      	bpl.n	8006bf0 <__swrite+0x1e>
 8006be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be8:	2302      	movs	r3, #2
 8006bea:	2200      	movs	r2, #0
 8006bec:	f000 f8d0 	bl	8006d90 <_lseek_r>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	463b      	mov	r3, r7
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c06:	f000 b8e7 	b.w	8006dd8 <_write_r>

08006c0a <__sseek>:
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	f000 f8bd 	bl	8006d90 <_lseek_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	bf15      	itete	ne
 8006c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c26:	81a3      	strheq	r3, [r4, #12]
 8006c28:	bf18      	it	ne
 8006c2a:	81a3      	strhne	r3, [r4, #12]
 8006c2c:	bd10      	pop	{r4, pc}

08006c2e <__sclose>:
 8006c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c32:	f000 b89d 	b.w	8006d70 <_close_r>

08006c36 <__swbuf_r>:
 8006c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c38:	460e      	mov	r6, r1
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	b118      	cbz	r0, 8006c48 <__swbuf_r+0x12>
 8006c40:	6a03      	ldr	r3, [r0, #32]
 8006c42:	b90b      	cbnz	r3, 8006c48 <__swbuf_r+0x12>
 8006c44:	f7ff ff64 	bl	8006b10 <__sinit>
 8006c48:	69a3      	ldr	r3, [r4, #24]
 8006c4a:	60a3      	str	r3, [r4, #8]
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	071a      	lsls	r2, r3, #28
 8006c50:	d501      	bpl.n	8006c56 <__swbuf_r+0x20>
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	b943      	cbnz	r3, 8006c68 <__swbuf_r+0x32>
 8006c56:	4621      	mov	r1, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 f82b 	bl	8006cb4 <__swsetup_r>
 8006c5e:	b118      	cbz	r0, 8006c68 <__swbuf_r+0x32>
 8006c60:	f04f 37ff 	mov.w	r7, #4294967295
 8006c64:	4638      	mov	r0, r7
 8006c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	6922      	ldr	r2, [r4, #16]
 8006c6c:	1a98      	subs	r0, r3, r2
 8006c6e:	6963      	ldr	r3, [r4, #20]
 8006c70:	b2f6      	uxtb	r6, r6
 8006c72:	4283      	cmp	r3, r0
 8006c74:	4637      	mov	r7, r6
 8006c76:	dc05      	bgt.n	8006c84 <__swbuf_r+0x4e>
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 fd46 	bl	800770c <_fflush_r>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d1ed      	bne.n	8006c60 <__swbuf_r+0x2a>
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	701e      	strb	r6, [r3, #0]
 8006c92:	6962      	ldr	r2, [r4, #20]
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d004      	beq.n	8006ca4 <__swbuf_r+0x6e>
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	07db      	lsls	r3, r3, #31
 8006c9e:	d5e1      	bpl.n	8006c64 <__swbuf_r+0x2e>
 8006ca0:	2e0a      	cmp	r6, #10
 8006ca2:	d1df      	bne.n	8006c64 <__swbuf_r+0x2e>
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 fd30 	bl	800770c <_fflush_r>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d0d9      	beq.n	8006c64 <__swbuf_r+0x2e>
 8006cb0:	e7d6      	b.n	8006c60 <__swbuf_r+0x2a>
	...

08006cb4 <__swsetup_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4b29      	ldr	r3, [pc, #164]	@ (8006d5c <__swsetup_r+0xa8>)
 8006cb8:	4605      	mov	r5, r0
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	b118      	cbz	r0, 8006cc8 <__swsetup_r+0x14>
 8006cc0:	6a03      	ldr	r3, [r0, #32]
 8006cc2:	b90b      	cbnz	r3, 8006cc8 <__swsetup_r+0x14>
 8006cc4:	f7ff ff24 	bl	8006b10 <__sinit>
 8006cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ccc:	0719      	lsls	r1, r3, #28
 8006cce:	d422      	bmi.n	8006d16 <__swsetup_r+0x62>
 8006cd0:	06da      	lsls	r2, r3, #27
 8006cd2:	d407      	bmi.n	8006ce4 <__swsetup_r+0x30>
 8006cd4:	2209      	movs	r2, #9
 8006cd6:	602a      	str	r2, [r5, #0]
 8006cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	e033      	b.n	8006d4c <__swsetup_r+0x98>
 8006ce4:	0758      	lsls	r0, r3, #29
 8006ce6:	d512      	bpl.n	8006d0e <__swsetup_r+0x5a>
 8006ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cea:	b141      	cbz	r1, 8006cfe <__swsetup_r+0x4a>
 8006cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d002      	beq.n	8006cfa <__swsetup_r+0x46>
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f000 f8bd 	bl	8006e74 <_free_r>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	2300      	movs	r3, #0
 8006d08:	6063      	str	r3, [r4, #4]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f043 0308 	orr.w	r3, r3, #8
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	b94b      	cbnz	r3, 8006d2e <__swsetup_r+0x7a>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d24:	d003      	beq.n	8006d2e <__swsetup_r+0x7a>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 fd3d 	bl	80077a8 <__smakebuf_r>
 8006d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d32:	f013 0201 	ands.w	r2, r3, #1
 8006d36:	d00a      	beq.n	8006d4e <__swsetup_r+0x9a>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	60a2      	str	r2, [r4, #8]
 8006d3c:	6962      	ldr	r2, [r4, #20]
 8006d3e:	4252      	negs	r2, r2
 8006d40:	61a2      	str	r2, [r4, #24]
 8006d42:	6922      	ldr	r2, [r4, #16]
 8006d44:	b942      	cbnz	r2, 8006d58 <__swsetup_r+0xa4>
 8006d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d4a:	d1c5      	bne.n	8006cd8 <__swsetup_r+0x24>
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
 8006d4e:	0799      	lsls	r1, r3, #30
 8006d50:	bf58      	it	pl
 8006d52:	6962      	ldrpl	r2, [r4, #20]
 8006d54:	60a2      	str	r2, [r4, #8]
 8006d56:	e7f4      	b.n	8006d42 <__swsetup_r+0x8e>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e7f7      	b.n	8006d4c <__swsetup_r+0x98>
 8006d5c:	2000001c 	.word	0x2000001c

08006d60 <memset>:
 8006d60:	4402      	add	r2, r0
 8006d62:	4603      	mov	r3, r0
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d100      	bne.n	8006d6a <memset+0xa>
 8006d68:	4770      	bx	lr
 8006d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6e:	e7f9      	b.n	8006d64 <memset+0x4>

08006d70 <_close_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d06      	ldr	r5, [pc, #24]	@ (8006d8c <_close_r+0x1c>)
 8006d74:	2300      	movs	r3, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7fb f8db 	bl	8001f36 <_close>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_close_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_close_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20004bb8 	.word	0x20004bb8

08006d90 <_lseek_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	@ (8006db0 <_lseek_r+0x20>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fb f8f0 	bl	8001f84 <_lseek>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_lseek_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_lseek_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20004bb8 	.word	0x20004bb8

08006db4 <_read_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d07      	ldr	r5, [pc, #28]	@ (8006dd4 <_read_r+0x20>)
 8006db8:	4604      	mov	r4, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7fb f87e 	bl	8001ec4 <_read>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_read_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_read_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	20004bb8 	.word	0x20004bb8

08006dd8 <_write_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	@ (8006df8 <_write_r+0x20>)
 8006ddc:	4604      	mov	r4, r0
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	2200      	movs	r2, #0
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7fb f889 	bl	8001efe <_write>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_write_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_write_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20004bb8 	.word	0x20004bb8

08006dfc <__errno>:
 8006dfc:	4b01      	ldr	r3, [pc, #4]	@ (8006e04 <__errno+0x8>)
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000001c 	.word	0x2000001c

08006e08 <__libc_init_array>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e40 <__libc_init_array+0x38>)
 8006e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006e44 <__libc_init_array+0x3c>)
 8006e0e:	1b64      	subs	r4, r4, r5
 8006e10:	10a4      	asrs	r4, r4, #2
 8006e12:	2600      	movs	r6, #0
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	d109      	bne.n	8006e2c <__libc_init_array+0x24>
 8006e18:	4d0b      	ldr	r5, [pc, #44]	@ (8006e48 <__libc_init_array+0x40>)
 8006e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006e4c <__libc_init_array+0x44>)
 8006e1c:	f000 fd66 	bl	80078ec <_init>
 8006e20:	1b64      	subs	r4, r4, r5
 8006e22:	10a4      	asrs	r4, r4, #2
 8006e24:	2600      	movs	r6, #0
 8006e26:	42a6      	cmp	r6, r4
 8006e28:	d105      	bne.n	8006e36 <__libc_init_array+0x2e>
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e30:	4798      	blx	r3
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7ee      	b.n	8006e14 <__libc_init_array+0xc>
 8006e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3a:	4798      	blx	r3
 8006e3c:	3601      	adds	r6, #1
 8006e3e:	e7f2      	b.n	8006e26 <__libc_init_array+0x1e>
 8006e40:	08007a2c 	.word	0x08007a2c
 8006e44:	08007a2c 	.word	0x08007a2c
 8006e48:	08007a2c 	.word	0x08007a2c
 8006e4c:	08007a30 	.word	0x08007a30

08006e50 <__retarget_lock_init_recursive>:
 8006e50:	4770      	bx	lr

08006e52 <__retarget_lock_acquire_recursive>:
 8006e52:	4770      	bx	lr

08006e54 <__retarget_lock_release_recursive>:
 8006e54:	4770      	bx	lr

08006e56 <memcpy>:
 8006e56:	440a      	add	r2, r1
 8006e58:	4291      	cmp	r1, r2
 8006e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e5e:	d100      	bne.n	8006e62 <memcpy+0xc>
 8006e60:	4770      	bx	lr
 8006e62:	b510      	push	{r4, lr}
 8006e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6c:	4291      	cmp	r1, r2
 8006e6e:	d1f9      	bne.n	8006e64 <memcpy+0xe>
 8006e70:	bd10      	pop	{r4, pc}
	...

08006e74 <_free_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4605      	mov	r5, r0
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d041      	beq.n	8006f00 <_free_r+0x8c>
 8006e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e80:	1f0c      	subs	r4, r1, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfb8      	it	lt
 8006e86:	18e4      	addlt	r4, r4, r3
 8006e88:	f000 f8e0 	bl	800704c <__malloc_lock>
 8006e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f04 <_free_r+0x90>)
 8006e8e:	6813      	ldr	r3, [r2, #0]
 8006e90:	b933      	cbnz	r3, 8006ea0 <_free_r+0x2c>
 8006e92:	6063      	str	r3, [r4, #4]
 8006e94:	6014      	str	r4, [r2, #0]
 8006e96:	4628      	mov	r0, r5
 8006e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e9c:	f000 b8dc 	b.w	8007058 <__malloc_unlock>
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	d908      	bls.n	8006eb6 <_free_r+0x42>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	1821      	adds	r1, r4, r0
 8006ea8:	428b      	cmp	r3, r1
 8006eaa:	bf01      	itttt	eq
 8006eac:	6819      	ldreq	r1, [r3, #0]
 8006eae:	685b      	ldreq	r3, [r3, #4]
 8006eb0:	1809      	addeq	r1, r1, r0
 8006eb2:	6021      	streq	r1, [r4, #0]
 8006eb4:	e7ed      	b.n	8006e92 <_free_r+0x1e>
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	b10b      	cbz	r3, 8006ec0 <_free_r+0x4c>
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	d9fa      	bls.n	8006eb6 <_free_r+0x42>
 8006ec0:	6811      	ldr	r1, [r2, #0]
 8006ec2:	1850      	adds	r0, r2, r1
 8006ec4:	42a0      	cmp	r0, r4
 8006ec6:	d10b      	bne.n	8006ee0 <_free_r+0x6c>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	4401      	add	r1, r0
 8006ecc:	1850      	adds	r0, r2, r1
 8006ece:	4283      	cmp	r3, r0
 8006ed0:	6011      	str	r1, [r2, #0]
 8006ed2:	d1e0      	bne.n	8006e96 <_free_r+0x22>
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	6053      	str	r3, [r2, #4]
 8006eda:	4408      	add	r0, r1
 8006edc:	6010      	str	r0, [r2, #0]
 8006ede:	e7da      	b.n	8006e96 <_free_r+0x22>
 8006ee0:	d902      	bls.n	8006ee8 <_free_r+0x74>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	e7d6      	b.n	8006e96 <_free_r+0x22>
 8006ee8:	6820      	ldr	r0, [r4, #0]
 8006eea:	1821      	adds	r1, r4, r0
 8006eec:	428b      	cmp	r3, r1
 8006eee:	bf04      	itt	eq
 8006ef0:	6819      	ldreq	r1, [r3, #0]
 8006ef2:	685b      	ldreq	r3, [r3, #4]
 8006ef4:	6063      	str	r3, [r4, #4]
 8006ef6:	bf04      	itt	eq
 8006ef8:	1809      	addeq	r1, r1, r0
 8006efa:	6021      	streq	r1, [r4, #0]
 8006efc:	6054      	str	r4, [r2, #4]
 8006efe:	e7ca      	b.n	8006e96 <_free_r+0x22>
 8006f00:	bd38      	pop	{r3, r4, r5, pc}
 8006f02:	bf00      	nop
 8006f04:	20004bc4 	.word	0x20004bc4

08006f08 <sbrk_aligned>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8006f48 <sbrk_aligned+0x40>)
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	6831      	ldr	r1, [r6, #0]
 8006f10:	4605      	mov	r5, r0
 8006f12:	b911      	cbnz	r1, 8006f1a <sbrk_aligned+0x12>
 8006f14:	f000 fcda 	bl	80078cc <_sbrk_r>
 8006f18:	6030      	str	r0, [r6, #0]
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 fcd5 	bl	80078cc <_sbrk_r>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d103      	bne.n	8006f2e <sbrk_aligned+0x26>
 8006f26:	f04f 34ff 	mov.w	r4, #4294967295
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	1cc4      	adds	r4, r0, #3
 8006f30:	f024 0403 	bic.w	r4, r4, #3
 8006f34:	42a0      	cmp	r0, r4
 8006f36:	d0f8      	beq.n	8006f2a <sbrk_aligned+0x22>
 8006f38:	1a21      	subs	r1, r4, r0
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 fcc6 	bl	80078cc <_sbrk_r>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1f2      	bne.n	8006f2a <sbrk_aligned+0x22>
 8006f44:	e7ef      	b.n	8006f26 <sbrk_aligned+0x1e>
 8006f46:	bf00      	nop
 8006f48:	20004bc0 	.word	0x20004bc0

08006f4c <_malloc_r>:
 8006f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f50:	1ccd      	adds	r5, r1, #3
 8006f52:	f025 0503 	bic.w	r5, r5, #3
 8006f56:	3508      	adds	r5, #8
 8006f58:	2d0c      	cmp	r5, #12
 8006f5a:	bf38      	it	cc
 8006f5c:	250c      	movcc	r5, #12
 8006f5e:	2d00      	cmp	r5, #0
 8006f60:	4606      	mov	r6, r0
 8006f62:	db01      	blt.n	8006f68 <_malloc_r+0x1c>
 8006f64:	42a9      	cmp	r1, r5
 8006f66:	d904      	bls.n	8006f72 <_malloc_r+0x26>
 8006f68:	230c      	movs	r3, #12
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007048 <_malloc_r+0xfc>
 8006f76:	f000 f869 	bl	800704c <__malloc_lock>
 8006f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f7e:	461c      	mov	r4, r3
 8006f80:	bb44      	cbnz	r4, 8006fd4 <_malloc_r+0x88>
 8006f82:	4629      	mov	r1, r5
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7ff ffbf 	bl	8006f08 <sbrk_aligned>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	d158      	bne.n	8007042 <_malloc_r+0xf6>
 8006f90:	f8d8 4000 	ldr.w	r4, [r8]
 8006f94:	4627      	mov	r7, r4
 8006f96:	2f00      	cmp	r7, #0
 8006f98:	d143      	bne.n	8007022 <_malloc_r+0xd6>
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	d04b      	beq.n	8007036 <_malloc_r+0xea>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	eb04 0903 	add.w	r9, r4, r3
 8006fa8:	f000 fc90 	bl	80078cc <_sbrk_r>
 8006fac:	4581      	cmp	r9, r0
 8006fae:	d142      	bne.n	8007036 <_malloc_r+0xea>
 8006fb0:	6821      	ldr	r1, [r4, #0]
 8006fb2:	1a6d      	subs	r5, r5, r1
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ffa6 	bl	8006f08 <sbrk_aligned>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d03a      	beq.n	8007036 <_malloc_r+0xea>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	442b      	add	r3, r5
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	bb62      	cbnz	r2, 8007028 <_malloc_r+0xdc>
 8006fce:	f8c8 7000 	str.w	r7, [r8]
 8006fd2:	e00f      	b.n	8006ff4 <_malloc_r+0xa8>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	1b52      	subs	r2, r2, r5
 8006fd8:	d420      	bmi.n	800701c <_malloc_r+0xd0>
 8006fda:	2a0b      	cmp	r2, #11
 8006fdc:	d917      	bls.n	800700e <_malloc_r+0xc2>
 8006fde:	1961      	adds	r1, r4, r5
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	6025      	str	r5, [r4, #0]
 8006fe4:	bf18      	it	ne
 8006fe6:	6059      	strne	r1, [r3, #4]
 8006fe8:	6863      	ldr	r3, [r4, #4]
 8006fea:	bf08      	it	eq
 8006fec:	f8c8 1000 	streq.w	r1, [r8]
 8006ff0:	5162      	str	r2, [r4, r5]
 8006ff2:	604b      	str	r3, [r1, #4]
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f000 f82f 	bl	8007058 <__malloc_unlock>
 8006ffa:	f104 000b 	add.w	r0, r4, #11
 8006ffe:	1d23      	adds	r3, r4, #4
 8007000:	f020 0007 	bic.w	r0, r0, #7
 8007004:	1ac2      	subs	r2, r0, r3
 8007006:	bf1c      	itt	ne
 8007008:	1a1b      	subne	r3, r3, r0
 800700a:	50a3      	strne	r3, [r4, r2]
 800700c:	e7af      	b.n	8006f6e <_malloc_r+0x22>
 800700e:	6862      	ldr	r2, [r4, #4]
 8007010:	42a3      	cmp	r3, r4
 8007012:	bf0c      	ite	eq
 8007014:	f8c8 2000 	streq.w	r2, [r8]
 8007018:	605a      	strne	r2, [r3, #4]
 800701a:	e7eb      	b.n	8006ff4 <_malloc_r+0xa8>
 800701c:	4623      	mov	r3, r4
 800701e:	6864      	ldr	r4, [r4, #4]
 8007020:	e7ae      	b.n	8006f80 <_malloc_r+0x34>
 8007022:	463c      	mov	r4, r7
 8007024:	687f      	ldr	r7, [r7, #4]
 8007026:	e7b6      	b.n	8006f96 <_malloc_r+0x4a>
 8007028:	461a      	mov	r2, r3
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	42a3      	cmp	r3, r4
 800702e:	d1fb      	bne.n	8007028 <_malloc_r+0xdc>
 8007030:	2300      	movs	r3, #0
 8007032:	6053      	str	r3, [r2, #4]
 8007034:	e7de      	b.n	8006ff4 <_malloc_r+0xa8>
 8007036:	230c      	movs	r3, #12
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	4630      	mov	r0, r6
 800703c:	f000 f80c 	bl	8007058 <__malloc_unlock>
 8007040:	e794      	b.n	8006f6c <_malloc_r+0x20>
 8007042:	6005      	str	r5, [r0, #0]
 8007044:	e7d6      	b.n	8006ff4 <_malloc_r+0xa8>
 8007046:	bf00      	nop
 8007048:	20004bc4 	.word	0x20004bc4

0800704c <__malloc_lock>:
 800704c:	4801      	ldr	r0, [pc, #4]	@ (8007054 <__malloc_lock+0x8>)
 800704e:	f7ff bf00 	b.w	8006e52 <__retarget_lock_acquire_recursive>
 8007052:	bf00      	nop
 8007054:	20004bbc 	.word	0x20004bbc

08007058 <__malloc_unlock>:
 8007058:	4801      	ldr	r0, [pc, #4]	@ (8007060 <__malloc_unlock+0x8>)
 800705a:	f7ff befb 	b.w	8006e54 <__retarget_lock_release_recursive>
 800705e:	bf00      	nop
 8007060:	20004bbc 	.word	0x20004bbc

08007064 <__sfputc_r>:
 8007064:	6893      	ldr	r3, [r2, #8]
 8007066:	3b01      	subs	r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	b410      	push	{r4}
 800706c:	6093      	str	r3, [r2, #8]
 800706e:	da08      	bge.n	8007082 <__sfputc_r+0x1e>
 8007070:	6994      	ldr	r4, [r2, #24]
 8007072:	42a3      	cmp	r3, r4
 8007074:	db01      	blt.n	800707a <__sfputc_r+0x16>
 8007076:	290a      	cmp	r1, #10
 8007078:	d103      	bne.n	8007082 <__sfputc_r+0x1e>
 800707a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800707e:	f7ff bdda 	b.w	8006c36 <__swbuf_r>
 8007082:	6813      	ldr	r3, [r2, #0]
 8007084:	1c58      	adds	r0, r3, #1
 8007086:	6010      	str	r0, [r2, #0]
 8007088:	7019      	strb	r1, [r3, #0]
 800708a:	4608      	mov	r0, r1
 800708c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007090:	4770      	bx	lr

08007092 <__sfputs_r>:
 8007092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007094:	4606      	mov	r6, r0
 8007096:	460f      	mov	r7, r1
 8007098:	4614      	mov	r4, r2
 800709a:	18d5      	adds	r5, r2, r3
 800709c:	42ac      	cmp	r4, r5
 800709e:	d101      	bne.n	80070a4 <__sfputs_r+0x12>
 80070a0:	2000      	movs	r0, #0
 80070a2:	e007      	b.n	80070b4 <__sfputs_r+0x22>
 80070a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a8:	463a      	mov	r2, r7
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff ffda 	bl	8007064 <__sfputc_r>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d1f3      	bne.n	800709c <__sfputs_r+0xa>
 80070b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070b8 <_vfiprintf_r>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	460d      	mov	r5, r1
 80070be:	b09d      	sub	sp, #116	@ 0x74
 80070c0:	4614      	mov	r4, r2
 80070c2:	4698      	mov	r8, r3
 80070c4:	4606      	mov	r6, r0
 80070c6:	b118      	cbz	r0, 80070d0 <_vfiprintf_r+0x18>
 80070c8:	6a03      	ldr	r3, [r0, #32]
 80070ca:	b90b      	cbnz	r3, 80070d0 <_vfiprintf_r+0x18>
 80070cc:	f7ff fd20 	bl	8006b10 <__sinit>
 80070d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	d405      	bmi.n	80070e2 <_vfiprintf_r+0x2a>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	059a      	lsls	r2, r3, #22
 80070da:	d402      	bmi.n	80070e2 <_vfiprintf_r+0x2a>
 80070dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070de:	f7ff feb8 	bl	8006e52 <__retarget_lock_acquire_recursive>
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	d501      	bpl.n	80070ec <_vfiprintf_r+0x34>
 80070e8:	692b      	ldr	r3, [r5, #16]
 80070ea:	b99b      	cbnz	r3, 8007114 <_vfiprintf_r+0x5c>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff fde0 	bl	8006cb4 <__swsetup_r>
 80070f4:	b170      	cbz	r0, 8007114 <_vfiprintf_r+0x5c>
 80070f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070f8:	07dc      	lsls	r4, r3, #31
 80070fa:	d504      	bpl.n	8007106 <_vfiprintf_r+0x4e>
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	b01d      	add	sp, #116	@ 0x74
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	89ab      	ldrh	r3, [r5, #12]
 8007108:	0598      	lsls	r0, r3, #22
 800710a:	d4f7      	bmi.n	80070fc <_vfiprintf_r+0x44>
 800710c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800710e:	f7ff fea1 	bl	8006e54 <__retarget_lock_release_recursive>
 8007112:	e7f3      	b.n	80070fc <_vfiprintf_r+0x44>
 8007114:	2300      	movs	r3, #0
 8007116:	9309      	str	r3, [sp, #36]	@ 0x24
 8007118:	2320      	movs	r3, #32
 800711a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800711e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007122:	2330      	movs	r3, #48	@ 0x30
 8007124:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80072d4 <_vfiprintf_r+0x21c>
 8007128:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800712c:	f04f 0901 	mov.w	r9, #1
 8007130:	4623      	mov	r3, r4
 8007132:	469a      	mov	sl, r3
 8007134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007138:	b10a      	cbz	r2, 800713e <_vfiprintf_r+0x86>
 800713a:	2a25      	cmp	r2, #37	@ 0x25
 800713c:	d1f9      	bne.n	8007132 <_vfiprintf_r+0x7a>
 800713e:	ebba 0b04 	subs.w	fp, sl, r4
 8007142:	d00b      	beq.n	800715c <_vfiprintf_r+0xa4>
 8007144:	465b      	mov	r3, fp
 8007146:	4622      	mov	r2, r4
 8007148:	4629      	mov	r1, r5
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff ffa1 	bl	8007092 <__sfputs_r>
 8007150:	3001      	adds	r0, #1
 8007152:	f000 80a7 	beq.w	80072a4 <_vfiprintf_r+0x1ec>
 8007156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007158:	445a      	add	r2, fp
 800715a:	9209      	str	r2, [sp, #36]	@ 0x24
 800715c:	f89a 3000 	ldrb.w	r3, [sl]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 809f 	beq.w	80072a4 <_vfiprintf_r+0x1ec>
 8007166:	2300      	movs	r3, #0
 8007168:	f04f 32ff 	mov.w	r2, #4294967295
 800716c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007170:	f10a 0a01 	add.w	sl, sl, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	9307      	str	r3, [sp, #28]
 8007178:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800717c:	931a      	str	r3, [sp, #104]	@ 0x68
 800717e:	4654      	mov	r4, sl
 8007180:	2205      	movs	r2, #5
 8007182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007186:	4853      	ldr	r0, [pc, #332]	@ (80072d4 <_vfiprintf_r+0x21c>)
 8007188:	f7f9 f82a 	bl	80001e0 <memchr>
 800718c:	9a04      	ldr	r2, [sp, #16]
 800718e:	b9d8      	cbnz	r0, 80071c8 <_vfiprintf_r+0x110>
 8007190:	06d1      	lsls	r1, r2, #27
 8007192:	bf44      	itt	mi
 8007194:	2320      	movmi	r3, #32
 8007196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800719a:	0713      	lsls	r3, r2, #28
 800719c:	bf44      	itt	mi
 800719e:	232b      	movmi	r3, #43	@ 0x2b
 80071a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071a4:	f89a 3000 	ldrb.w	r3, [sl]
 80071a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80071aa:	d015      	beq.n	80071d8 <_vfiprintf_r+0x120>
 80071ac:	9a07      	ldr	r2, [sp, #28]
 80071ae:	4654      	mov	r4, sl
 80071b0:	2000      	movs	r0, #0
 80071b2:	f04f 0c0a 	mov.w	ip, #10
 80071b6:	4621      	mov	r1, r4
 80071b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071bc:	3b30      	subs	r3, #48	@ 0x30
 80071be:	2b09      	cmp	r3, #9
 80071c0:	d94b      	bls.n	800725a <_vfiprintf_r+0x1a2>
 80071c2:	b1b0      	cbz	r0, 80071f2 <_vfiprintf_r+0x13a>
 80071c4:	9207      	str	r2, [sp, #28]
 80071c6:	e014      	b.n	80071f2 <_vfiprintf_r+0x13a>
 80071c8:	eba0 0308 	sub.w	r3, r0, r8
 80071cc:	fa09 f303 	lsl.w	r3, r9, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	46a2      	mov	sl, r4
 80071d6:	e7d2      	b.n	800717e <_vfiprintf_r+0xc6>
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	1d19      	adds	r1, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	9103      	str	r1, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bfbb      	ittet	lt
 80071e4:	425b      	neglt	r3, r3
 80071e6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ea:	9307      	strge	r3, [sp, #28]
 80071ec:	9307      	strlt	r3, [sp, #28]
 80071ee:	bfb8      	it	lt
 80071f0:	9204      	strlt	r2, [sp, #16]
 80071f2:	7823      	ldrb	r3, [r4, #0]
 80071f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80071f6:	d10a      	bne.n	800720e <_vfiprintf_r+0x156>
 80071f8:	7863      	ldrb	r3, [r4, #1]
 80071fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80071fc:	d132      	bne.n	8007264 <_vfiprintf_r+0x1ac>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	9203      	str	r2, [sp, #12]
 8007206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800720a:	3402      	adds	r4, #2
 800720c:	9305      	str	r3, [sp, #20]
 800720e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80072e4 <_vfiprintf_r+0x22c>
 8007212:	7821      	ldrb	r1, [r4, #0]
 8007214:	2203      	movs	r2, #3
 8007216:	4650      	mov	r0, sl
 8007218:	f7f8 ffe2 	bl	80001e0 <memchr>
 800721c:	b138      	cbz	r0, 800722e <_vfiprintf_r+0x176>
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	eba0 000a 	sub.w	r0, r0, sl
 8007224:	2240      	movs	r2, #64	@ 0x40
 8007226:	4082      	lsls	r2, r0
 8007228:	4313      	orrs	r3, r2
 800722a:	3401      	adds	r4, #1
 800722c:	9304      	str	r3, [sp, #16]
 800722e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007232:	4829      	ldr	r0, [pc, #164]	@ (80072d8 <_vfiprintf_r+0x220>)
 8007234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007238:	2206      	movs	r2, #6
 800723a:	f7f8 ffd1 	bl	80001e0 <memchr>
 800723e:	2800      	cmp	r0, #0
 8007240:	d03f      	beq.n	80072c2 <_vfiprintf_r+0x20a>
 8007242:	4b26      	ldr	r3, [pc, #152]	@ (80072dc <_vfiprintf_r+0x224>)
 8007244:	bb1b      	cbnz	r3, 800728e <_vfiprintf_r+0x1d6>
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	3307      	adds	r3, #7
 800724a:	f023 0307 	bic.w	r3, r3, #7
 800724e:	3308      	adds	r3, #8
 8007250:	9303      	str	r3, [sp, #12]
 8007252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007254:	443b      	add	r3, r7
 8007256:	9309      	str	r3, [sp, #36]	@ 0x24
 8007258:	e76a      	b.n	8007130 <_vfiprintf_r+0x78>
 800725a:	fb0c 3202 	mla	r2, ip, r2, r3
 800725e:	460c      	mov	r4, r1
 8007260:	2001      	movs	r0, #1
 8007262:	e7a8      	b.n	80071b6 <_vfiprintf_r+0xfe>
 8007264:	2300      	movs	r3, #0
 8007266:	3401      	adds	r4, #1
 8007268:	9305      	str	r3, [sp, #20]
 800726a:	4619      	mov	r1, r3
 800726c:	f04f 0c0a 	mov.w	ip, #10
 8007270:	4620      	mov	r0, r4
 8007272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007276:	3a30      	subs	r2, #48	@ 0x30
 8007278:	2a09      	cmp	r2, #9
 800727a:	d903      	bls.n	8007284 <_vfiprintf_r+0x1cc>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0c6      	beq.n	800720e <_vfiprintf_r+0x156>
 8007280:	9105      	str	r1, [sp, #20]
 8007282:	e7c4      	b.n	800720e <_vfiprintf_r+0x156>
 8007284:	fb0c 2101 	mla	r1, ip, r1, r2
 8007288:	4604      	mov	r4, r0
 800728a:	2301      	movs	r3, #1
 800728c:	e7f0      	b.n	8007270 <_vfiprintf_r+0x1b8>
 800728e:	ab03      	add	r3, sp, #12
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	462a      	mov	r2, r5
 8007294:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <_vfiprintf_r+0x228>)
 8007296:	a904      	add	r1, sp, #16
 8007298:	4630      	mov	r0, r6
 800729a:	f3af 8000 	nop.w
 800729e:	4607      	mov	r7, r0
 80072a0:	1c78      	adds	r0, r7, #1
 80072a2:	d1d6      	bne.n	8007252 <_vfiprintf_r+0x19a>
 80072a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072a6:	07d9      	lsls	r1, r3, #31
 80072a8:	d405      	bmi.n	80072b6 <_vfiprintf_r+0x1fe>
 80072aa:	89ab      	ldrh	r3, [r5, #12]
 80072ac:	059a      	lsls	r2, r3, #22
 80072ae:	d402      	bmi.n	80072b6 <_vfiprintf_r+0x1fe>
 80072b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072b2:	f7ff fdcf 	bl	8006e54 <__retarget_lock_release_recursive>
 80072b6:	89ab      	ldrh	r3, [r5, #12]
 80072b8:	065b      	lsls	r3, r3, #25
 80072ba:	f53f af1f 	bmi.w	80070fc <_vfiprintf_r+0x44>
 80072be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072c0:	e71e      	b.n	8007100 <_vfiprintf_r+0x48>
 80072c2:	ab03      	add	r3, sp, #12
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	462a      	mov	r2, r5
 80072c8:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <_vfiprintf_r+0x228>)
 80072ca:	a904      	add	r1, sp, #16
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 f879 	bl	80073c4 <_printf_i>
 80072d2:	e7e4      	b.n	800729e <_vfiprintf_r+0x1e6>
 80072d4:	080079f0 	.word	0x080079f0
 80072d8:	080079fa 	.word	0x080079fa
 80072dc:	00000000 	.word	0x00000000
 80072e0:	08007093 	.word	0x08007093
 80072e4:	080079f6 	.word	0x080079f6

080072e8 <_printf_common>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	4616      	mov	r6, r2
 80072ee:	4698      	mov	r8, r3
 80072f0:	688a      	ldr	r2, [r1, #8]
 80072f2:	690b      	ldr	r3, [r1, #16]
 80072f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bfb8      	it	lt
 80072fc:	4613      	movlt	r3, r2
 80072fe:	6033      	str	r3, [r6, #0]
 8007300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007304:	4607      	mov	r7, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b10a      	cbz	r2, 800730e <_printf_common+0x26>
 800730a:	3301      	adds	r3, #1
 800730c:	6033      	str	r3, [r6, #0]
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	0699      	lsls	r1, r3, #26
 8007312:	bf42      	ittt	mi
 8007314:	6833      	ldrmi	r3, [r6, #0]
 8007316:	3302      	addmi	r3, #2
 8007318:	6033      	strmi	r3, [r6, #0]
 800731a:	6825      	ldr	r5, [r4, #0]
 800731c:	f015 0506 	ands.w	r5, r5, #6
 8007320:	d106      	bne.n	8007330 <_printf_common+0x48>
 8007322:	f104 0a19 	add.w	sl, r4, #25
 8007326:	68e3      	ldr	r3, [r4, #12]
 8007328:	6832      	ldr	r2, [r6, #0]
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	42ab      	cmp	r3, r5
 800732e:	dc26      	bgt.n	800737e <_printf_common+0x96>
 8007330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007334:	6822      	ldr	r2, [r4, #0]
 8007336:	3b00      	subs	r3, #0
 8007338:	bf18      	it	ne
 800733a:	2301      	movne	r3, #1
 800733c:	0692      	lsls	r2, r2, #26
 800733e:	d42b      	bmi.n	8007398 <_printf_common+0xb0>
 8007340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007344:	4641      	mov	r1, r8
 8007346:	4638      	mov	r0, r7
 8007348:	47c8      	blx	r9
 800734a:	3001      	adds	r0, #1
 800734c:	d01e      	beq.n	800738c <_printf_common+0xa4>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	f003 0306 	and.w	r3, r3, #6
 8007356:	2b04      	cmp	r3, #4
 8007358:	bf02      	ittt	eq
 800735a:	68e5      	ldreq	r5, [r4, #12]
 800735c:	6833      	ldreq	r3, [r6, #0]
 800735e:	1aed      	subeq	r5, r5, r3
 8007360:	68a3      	ldr	r3, [r4, #8]
 8007362:	bf0c      	ite	eq
 8007364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007368:	2500      	movne	r5, #0
 800736a:	4293      	cmp	r3, r2
 800736c:	bfc4      	itt	gt
 800736e:	1a9b      	subgt	r3, r3, r2
 8007370:	18ed      	addgt	r5, r5, r3
 8007372:	2600      	movs	r6, #0
 8007374:	341a      	adds	r4, #26
 8007376:	42b5      	cmp	r5, r6
 8007378:	d11a      	bne.n	80073b0 <_printf_common+0xc8>
 800737a:	2000      	movs	r0, #0
 800737c:	e008      	b.n	8007390 <_printf_common+0xa8>
 800737e:	2301      	movs	r3, #1
 8007380:	4652      	mov	r2, sl
 8007382:	4641      	mov	r1, r8
 8007384:	4638      	mov	r0, r7
 8007386:	47c8      	blx	r9
 8007388:	3001      	adds	r0, #1
 800738a:	d103      	bne.n	8007394 <_printf_common+0xac>
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	3501      	adds	r5, #1
 8007396:	e7c6      	b.n	8007326 <_printf_common+0x3e>
 8007398:	18e1      	adds	r1, r4, r3
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	2030      	movs	r0, #48	@ 0x30
 800739e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073a2:	4422      	add	r2, r4
 80073a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073ac:	3302      	adds	r3, #2
 80073ae:	e7c7      	b.n	8007340 <_printf_common+0x58>
 80073b0:	2301      	movs	r3, #1
 80073b2:	4622      	mov	r2, r4
 80073b4:	4641      	mov	r1, r8
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c8      	blx	r9
 80073ba:	3001      	adds	r0, #1
 80073bc:	d0e6      	beq.n	800738c <_printf_common+0xa4>
 80073be:	3601      	adds	r6, #1
 80073c0:	e7d9      	b.n	8007376 <_printf_common+0x8e>
	...

080073c4 <_printf_i>:
 80073c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	7e0f      	ldrb	r7, [r1, #24]
 80073ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073cc:	2f78      	cmp	r7, #120	@ 0x78
 80073ce:	4691      	mov	r9, r2
 80073d0:	4680      	mov	r8, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	469a      	mov	sl, r3
 80073d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073da:	d807      	bhi.n	80073ec <_printf_i+0x28>
 80073dc:	2f62      	cmp	r7, #98	@ 0x62
 80073de:	d80a      	bhi.n	80073f6 <_printf_i+0x32>
 80073e0:	2f00      	cmp	r7, #0
 80073e2:	f000 80d2 	beq.w	800758a <_printf_i+0x1c6>
 80073e6:	2f58      	cmp	r7, #88	@ 0x58
 80073e8:	f000 80b9 	beq.w	800755e <_printf_i+0x19a>
 80073ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073f4:	e03a      	b.n	800746c <_printf_i+0xa8>
 80073f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073fa:	2b15      	cmp	r3, #21
 80073fc:	d8f6      	bhi.n	80073ec <_printf_i+0x28>
 80073fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007404 <_printf_i+0x40>)
 8007400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007404:	0800745d 	.word	0x0800745d
 8007408:	08007471 	.word	0x08007471
 800740c:	080073ed 	.word	0x080073ed
 8007410:	080073ed 	.word	0x080073ed
 8007414:	080073ed 	.word	0x080073ed
 8007418:	080073ed 	.word	0x080073ed
 800741c:	08007471 	.word	0x08007471
 8007420:	080073ed 	.word	0x080073ed
 8007424:	080073ed 	.word	0x080073ed
 8007428:	080073ed 	.word	0x080073ed
 800742c:	080073ed 	.word	0x080073ed
 8007430:	08007571 	.word	0x08007571
 8007434:	0800749b 	.word	0x0800749b
 8007438:	0800752b 	.word	0x0800752b
 800743c:	080073ed 	.word	0x080073ed
 8007440:	080073ed 	.word	0x080073ed
 8007444:	08007593 	.word	0x08007593
 8007448:	080073ed 	.word	0x080073ed
 800744c:	0800749b 	.word	0x0800749b
 8007450:	080073ed 	.word	0x080073ed
 8007454:	080073ed 	.word	0x080073ed
 8007458:	08007533 	.word	0x08007533
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6032      	str	r2, [r6, #0]
 8007464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800746c:	2301      	movs	r3, #1
 800746e:	e09d      	b.n	80075ac <_printf_i+0x1e8>
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	1d19      	adds	r1, r3, #4
 8007476:	6031      	str	r1, [r6, #0]
 8007478:	0606      	lsls	r6, r0, #24
 800747a:	d501      	bpl.n	8007480 <_printf_i+0xbc>
 800747c:	681d      	ldr	r5, [r3, #0]
 800747e:	e003      	b.n	8007488 <_printf_i+0xc4>
 8007480:	0645      	lsls	r5, r0, #25
 8007482:	d5fb      	bpl.n	800747c <_printf_i+0xb8>
 8007484:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007488:	2d00      	cmp	r5, #0
 800748a:	da03      	bge.n	8007494 <_printf_i+0xd0>
 800748c:	232d      	movs	r3, #45	@ 0x2d
 800748e:	426d      	negs	r5, r5
 8007490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007494:	4859      	ldr	r0, [pc, #356]	@ (80075fc <_printf_i+0x238>)
 8007496:	230a      	movs	r3, #10
 8007498:	e011      	b.n	80074be <_printf_i+0xfa>
 800749a:	6821      	ldr	r1, [r4, #0]
 800749c:	6833      	ldr	r3, [r6, #0]
 800749e:	0608      	lsls	r0, r1, #24
 80074a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80074a4:	d402      	bmi.n	80074ac <_printf_i+0xe8>
 80074a6:	0649      	lsls	r1, r1, #25
 80074a8:	bf48      	it	mi
 80074aa:	b2ad      	uxthmi	r5, r5
 80074ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80074ae:	4853      	ldr	r0, [pc, #332]	@ (80075fc <_printf_i+0x238>)
 80074b0:	6033      	str	r3, [r6, #0]
 80074b2:	bf14      	ite	ne
 80074b4:	230a      	movne	r3, #10
 80074b6:	2308      	moveq	r3, #8
 80074b8:	2100      	movs	r1, #0
 80074ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074be:	6866      	ldr	r6, [r4, #4]
 80074c0:	60a6      	str	r6, [r4, #8]
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	bfa2      	ittt	ge
 80074c6:	6821      	ldrge	r1, [r4, #0]
 80074c8:	f021 0104 	bicge.w	r1, r1, #4
 80074cc:	6021      	strge	r1, [r4, #0]
 80074ce:	b90d      	cbnz	r5, 80074d4 <_printf_i+0x110>
 80074d0:	2e00      	cmp	r6, #0
 80074d2:	d04b      	beq.n	800756c <_printf_i+0x1a8>
 80074d4:	4616      	mov	r6, r2
 80074d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80074da:	fb03 5711 	mls	r7, r3, r1, r5
 80074de:	5dc7      	ldrb	r7, [r0, r7]
 80074e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074e4:	462f      	mov	r7, r5
 80074e6:	42bb      	cmp	r3, r7
 80074e8:	460d      	mov	r5, r1
 80074ea:	d9f4      	bls.n	80074d6 <_printf_i+0x112>
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d10b      	bne.n	8007508 <_printf_i+0x144>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	07df      	lsls	r7, r3, #31
 80074f4:	d508      	bpl.n	8007508 <_printf_i+0x144>
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	6861      	ldr	r1, [r4, #4]
 80074fa:	4299      	cmp	r1, r3
 80074fc:	bfde      	ittt	le
 80074fe:	2330      	movle	r3, #48	@ 0x30
 8007500:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007504:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007508:	1b92      	subs	r2, r2, r6
 800750a:	6122      	str	r2, [r4, #16]
 800750c:	f8cd a000 	str.w	sl, [sp]
 8007510:	464b      	mov	r3, r9
 8007512:	aa03      	add	r2, sp, #12
 8007514:	4621      	mov	r1, r4
 8007516:	4640      	mov	r0, r8
 8007518:	f7ff fee6 	bl	80072e8 <_printf_common>
 800751c:	3001      	adds	r0, #1
 800751e:	d14a      	bne.n	80075b6 <_printf_i+0x1f2>
 8007520:	f04f 30ff 	mov.w	r0, #4294967295
 8007524:	b004      	add	sp, #16
 8007526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f043 0320 	orr.w	r3, r3, #32
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	4833      	ldr	r0, [pc, #204]	@ (8007600 <_printf_i+0x23c>)
 8007534:	2778      	movs	r7, #120	@ 0x78
 8007536:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	6831      	ldr	r1, [r6, #0]
 800753e:	061f      	lsls	r7, r3, #24
 8007540:	f851 5b04 	ldr.w	r5, [r1], #4
 8007544:	d402      	bmi.n	800754c <_printf_i+0x188>
 8007546:	065f      	lsls	r7, r3, #25
 8007548:	bf48      	it	mi
 800754a:	b2ad      	uxthmi	r5, r5
 800754c:	6031      	str	r1, [r6, #0]
 800754e:	07d9      	lsls	r1, r3, #31
 8007550:	bf44      	itt	mi
 8007552:	f043 0320 	orrmi.w	r3, r3, #32
 8007556:	6023      	strmi	r3, [r4, #0]
 8007558:	b11d      	cbz	r5, 8007562 <_printf_i+0x19e>
 800755a:	2310      	movs	r3, #16
 800755c:	e7ac      	b.n	80074b8 <_printf_i+0xf4>
 800755e:	4827      	ldr	r0, [pc, #156]	@ (80075fc <_printf_i+0x238>)
 8007560:	e7e9      	b.n	8007536 <_printf_i+0x172>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	f023 0320 	bic.w	r3, r3, #32
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	e7f6      	b.n	800755a <_printf_i+0x196>
 800756c:	4616      	mov	r6, r2
 800756e:	e7bd      	b.n	80074ec <_printf_i+0x128>
 8007570:	6833      	ldr	r3, [r6, #0]
 8007572:	6825      	ldr	r5, [r4, #0]
 8007574:	6961      	ldr	r1, [r4, #20]
 8007576:	1d18      	adds	r0, r3, #4
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	062e      	lsls	r6, r5, #24
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	d501      	bpl.n	8007584 <_printf_i+0x1c0>
 8007580:	6019      	str	r1, [r3, #0]
 8007582:	e002      	b.n	800758a <_printf_i+0x1c6>
 8007584:	0668      	lsls	r0, r5, #25
 8007586:	d5fb      	bpl.n	8007580 <_printf_i+0x1bc>
 8007588:	8019      	strh	r1, [r3, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	4616      	mov	r6, r2
 8007590:	e7bc      	b.n	800750c <_printf_i+0x148>
 8007592:	6833      	ldr	r3, [r6, #0]
 8007594:	1d1a      	adds	r2, r3, #4
 8007596:	6032      	str	r2, [r6, #0]
 8007598:	681e      	ldr	r6, [r3, #0]
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	2100      	movs	r1, #0
 800759e:	4630      	mov	r0, r6
 80075a0:	f7f8 fe1e 	bl	80001e0 <memchr>
 80075a4:	b108      	cbz	r0, 80075aa <_printf_i+0x1e6>
 80075a6:	1b80      	subs	r0, r0, r6
 80075a8:	6060      	str	r0, [r4, #4]
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	2300      	movs	r3, #0
 80075b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075b4:	e7aa      	b.n	800750c <_printf_i+0x148>
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	4632      	mov	r2, r6
 80075ba:	4649      	mov	r1, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	47d0      	blx	sl
 80075c0:	3001      	adds	r0, #1
 80075c2:	d0ad      	beq.n	8007520 <_printf_i+0x15c>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	079b      	lsls	r3, r3, #30
 80075c8:	d413      	bmi.n	80075f2 <_printf_i+0x22e>
 80075ca:	68e0      	ldr	r0, [r4, #12]
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	4298      	cmp	r0, r3
 80075d0:	bfb8      	it	lt
 80075d2:	4618      	movlt	r0, r3
 80075d4:	e7a6      	b.n	8007524 <_printf_i+0x160>
 80075d6:	2301      	movs	r3, #1
 80075d8:	4632      	mov	r2, r6
 80075da:	4649      	mov	r1, r9
 80075dc:	4640      	mov	r0, r8
 80075de:	47d0      	blx	sl
 80075e0:	3001      	adds	r0, #1
 80075e2:	d09d      	beq.n	8007520 <_printf_i+0x15c>
 80075e4:	3501      	adds	r5, #1
 80075e6:	68e3      	ldr	r3, [r4, #12]
 80075e8:	9903      	ldr	r1, [sp, #12]
 80075ea:	1a5b      	subs	r3, r3, r1
 80075ec:	42ab      	cmp	r3, r5
 80075ee:	dcf2      	bgt.n	80075d6 <_printf_i+0x212>
 80075f0:	e7eb      	b.n	80075ca <_printf_i+0x206>
 80075f2:	2500      	movs	r5, #0
 80075f4:	f104 0619 	add.w	r6, r4, #25
 80075f8:	e7f5      	b.n	80075e6 <_printf_i+0x222>
 80075fa:	bf00      	nop
 80075fc:	08007a01 	.word	0x08007a01
 8007600:	08007a12 	.word	0x08007a12

08007604 <__sflush_r>:
 8007604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760c:	0716      	lsls	r6, r2, #28
 800760e:	4605      	mov	r5, r0
 8007610:	460c      	mov	r4, r1
 8007612:	d454      	bmi.n	80076be <__sflush_r+0xba>
 8007614:	684b      	ldr	r3, [r1, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	dc02      	bgt.n	8007620 <__sflush_r+0x1c>
 800761a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	dd48      	ble.n	80076b2 <__sflush_r+0xae>
 8007620:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007622:	2e00      	cmp	r6, #0
 8007624:	d045      	beq.n	80076b2 <__sflush_r+0xae>
 8007626:	2300      	movs	r3, #0
 8007628:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800762c:	682f      	ldr	r7, [r5, #0]
 800762e:	6a21      	ldr	r1, [r4, #32]
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	d030      	beq.n	8007696 <__sflush_r+0x92>
 8007634:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	0759      	lsls	r1, r3, #29
 800763a:	d505      	bpl.n	8007648 <__sflush_r+0x44>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007642:	b10b      	cbz	r3, 8007648 <__sflush_r+0x44>
 8007644:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	2300      	movs	r3, #0
 800764a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800764c:	6a21      	ldr	r1, [r4, #32]
 800764e:	4628      	mov	r0, r5
 8007650:	47b0      	blx	r6
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	d106      	bne.n	8007666 <__sflush_r+0x62>
 8007658:	6829      	ldr	r1, [r5, #0]
 800765a:	291d      	cmp	r1, #29
 800765c:	d82b      	bhi.n	80076b6 <__sflush_r+0xb2>
 800765e:	4a2a      	ldr	r2, [pc, #168]	@ (8007708 <__sflush_r+0x104>)
 8007660:	410a      	asrs	r2, r1
 8007662:	07d6      	lsls	r6, r2, #31
 8007664:	d427      	bmi.n	80076b6 <__sflush_r+0xb2>
 8007666:	2200      	movs	r2, #0
 8007668:	6062      	str	r2, [r4, #4]
 800766a:	04d9      	lsls	r1, r3, #19
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	6022      	str	r2, [r4, #0]
 8007670:	d504      	bpl.n	800767c <__sflush_r+0x78>
 8007672:	1c42      	adds	r2, r0, #1
 8007674:	d101      	bne.n	800767a <__sflush_r+0x76>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	b903      	cbnz	r3, 800767c <__sflush_r+0x78>
 800767a:	6560      	str	r0, [r4, #84]	@ 0x54
 800767c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	b1b9      	cbz	r1, 80076b2 <__sflush_r+0xae>
 8007682:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007686:	4299      	cmp	r1, r3
 8007688:	d002      	beq.n	8007690 <__sflush_r+0x8c>
 800768a:	4628      	mov	r0, r5
 800768c:	f7ff fbf2 	bl	8006e74 <_free_r>
 8007690:	2300      	movs	r3, #0
 8007692:	6363      	str	r3, [r4, #52]	@ 0x34
 8007694:	e00d      	b.n	80076b2 <__sflush_r+0xae>
 8007696:	2301      	movs	r3, #1
 8007698:	4628      	mov	r0, r5
 800769a:	47b0      	blx	r6
 800769c:	4602      	mov	r2, r0
 800769e:	1c50      	adds	r0, r2, #1
 80076a0:	d1c9      	bne.n	8007636 <__sflush_r+0x32>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0c6      	beq.n	8007636 <__sflush_r+0x32>
 80076a8:	2b1d      	cmp	r3, #29
 80076aa:	d001      	beq.n	80076b0 <__sflush_r+0xac>
 80076ac:	2b16      	cmp	r3, #22
 80076ae:	d11e      	bne.n	80076ee <__sflush_r+0xea>
 80076b0:	602f      	str	r7, [r5, #0]
 80076b2:	2000      	movs	r0, #0
 80076b4:	e022      	b.n	80076fc <__sflush_r+0xf8>
 80076b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ba:	b21b      	sxth	r3, r3
 80076bc:	e01b      	b.n	80076f6 <__sflush_r+0xf2>
 80076be:	690f      	ldr	r7, [r1, #16]
 80076c0:	2f00      	cmp	r7, #0
 80076c2:	d0f6      	beq.n	80076b2 <__sflush_r+0xae>
 80076c4:	0793      	lsls	r3, r2, #30
 80076c6:	680e      	ldr	r6, [r1, #0]
 80076c8:	bf08      	it	eq
 80076ca:	694b      	ldreq	r3, [r1, #20]
 80076cc:	600f      	str	r7, [r1, #0]
 80076ce:	bf18      	it	ne
 80076d0:	2300      	movne	r3, #0
 80076d2:	eba6 0807 	sub.w	r8, r6, r7
 80076d6:	608b      	str	r3, [r1, #8]
 80076d8:	f1b8 0f00 	cmp.w	r8, #0
 80076dc:	dde9      	ble.n	80076b2 <__sflush_r+0xae>
 80076de:	6a21      	ldr	r1, [r4, #32]
 80076e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076e2:	4643      	mov	r3, r8
 80076e4:	463a      	mov	r2, r7
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b0      	blx	r6
 80076ea:	2800      	cmp	r0, #0
 80076ec:	dc08      	bgt.n	8007700 <__sflush_r+0xfc>
 80076ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	4407      	add	r7, r0
 8007702:	eba8 0800 	sub.w	r8, r8, r0
 8007706:	e7e7      	b.n	80076d8 <__sflush_r+0xd4>
 8007708:	dfbffffe 	.word	0xdfbffffe

0800770c <_fflush_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	690b      	ldr	r3, [r1, #16]
 8007710:	4605      	mov	r5, r0
 8007712:	460c      	mov	r4, r1
 8007714:	b913      	cbnz	r3, 800771c <_fflush_r+0x10>
 8007716:	2500      	movs	r5, #0
 8007718:	4628      	mov	r0, r5
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	b118      	cbz	r0, 8007726 <_fflush_r+0x1a>
 800771e:	6a03      	ldr	r3, [r0, #32]
 8007720:	b90b      	cbnz	r3, 8007726 <_fflush_r+0x1a>
 8007722:	f7ff f9f5 	bl	8006b10 <__sinit>
 8007726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0f3      	beq.n	8007716 <_fflush_r+0xa>
 800772e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007730:	07d0      	lsls	r0, r2, #31
 8007732:	d404      	bmi.n	800773e <_fflush_r+0x32>
 8007734:	0599      	lsls	r1, r3, #22
 8007736:	d402      	bmi.n	800773e <_fflush_r+0x32>
 8007738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800773a:	f7ff fb8a 	bl	8006e52 <__retarget_lock_acquire_recursive>
 800773e:	4628      	mov	r0, r5
 8007740:	4621      	mov	r1, r4
 8007742:	f7ff ff5f 	bl	8007604 <__sflush_r>
 8007746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007748:	07da      	lsls	r2, r3, #31
 800774a:	4605      	mov	r5, r0
 800774c:	d4e4      	bmi.n	8007718 <_fflush_r+0xc>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	059b      	lsls	r3, r3, #22
 8007752:	d4e1      	bmi.n	8007718 <_fflush_r+0xc>
 8007754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007756:	f7ff fb7d 	bl	8006e54 <__retarget_lock_release_recursive>
 800775a:	e7dd      	b.n	8007718 <_fflush_r+0xc>

0800775c <__swhatbuf_r>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	460c      	mov	r4, r1
 8007760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007764:	2900      	cmp	r1, #0
 8007766:	b096      	sub	sp, #88	@ 0x58
 8007768:	4615      	mov	r5, r2
 800776a:	461e      	mov	r6, r3
 800776c:	da0d      	bge.n	800778a <__swhatbuf_r+0x2e>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007774:	f04f 0100 	mov.w	r1, #0
 8007778:	bf14      	ite	ne
 800777a:	2340      	movne	r3, #64	@ 0x40
 800777c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007780:	2000      	movs	r0, #0
 8007782:	6031      	str	r1, [r6, #0]
 8007784:	602b      	str	r3, [r5, #0]
 8007786:	b016      	add	sp, #88	@ 0x58
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	466a      	mov	r2, sp
 800778c:	f000 f87c 	bl	8007888 <_fstat_r>
 8007790:	2800      	cmp	r0, #0
 8007792:	dbec      	blt.n	800776e <__swhatbuf_r+0x12>
 8007794:	9901      	ldr	r1, [sp, #4]
 8007796:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800779a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800779e:	4259      	negs	r1, r3
 80077a0:	4159      	adcs	r1, r3
 80077a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077a6:	e7eb      	b.n	8007780 <__swhatbuf_r+0x24>

080077a8 <__smakebuf_r>:
 80077a8:	898b      	ldrh	r3, [r1, #12]
 80077aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ac:	079d      	lsls	r5, r3, #30
 80077ae:	4606      	mov	r6, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	d507      	bpl.n	80077c4 <__smakebuf_r+0x1c>
 80077b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	2301      	movs	r3, #1
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	b003      	add	sp, #12
 80077c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c4:	ab01      	add	r3, sp, #4
 80077c6:	466a      	mov	r2, sp
 80077c8:	f7ff ffc8 	bl	800775c <__swhatbuf_r>
 80077cc:	9f00      	ldr	r7, [sp, #0]
 80077ce:	4605      	mov	r5, r0
 80077d0:	4639      	mov	r1, r7
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7ff fbba 	bl	8006f4c <_malloc_r>
 80077d8:	b948      	cbnz	r0, 80077ee <__smakebuf_r+0x46>
 80077da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077de:	059a      	lsls	r2, r3, #22
 80077e0:	d4ee      	bmi.n	80077c0 <__smakebuf_r+0x18>
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	f043 0302 	orr.w	r3, r3, #2
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	e7e2      	b.n	80077b4 <__smakebuf_r+0xc>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	6020      	str	r0, [r4, #0]
 80077f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	9b01      	ldr	r3, [sp, #4]
 80077fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077fe:	b15b      	cbz	r3, 8007818 <__smakebuf_r+0x70>
 8007800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007804:	4630      	mov	r0, r6
 8007806:	f000 f851 	bl	80078ac <_isatty_r>
 800780a:	b128      	cbz	r0, 8007818 <__smakebuf_r+0x70>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	431d      	orrs	r5, r3
 800781c:	81a5      	strh	r5, [r4, #12]
 800781e:	e7cf      	b.n	80077c0 <__smakebuf_r+0x18>

08007820 <_putc_r>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	460d      	mov	r5, r1
 8007824:	4614      	mov	r4, r2
 8007826:	4606      	mov	r6, r0
 8007828:	b118      	cbz	r0, 8007832 <_putc_r+0x12>
 800782a:	6a03      	ldr	r3, [r0, #32]
 800782c:	b90b      	cbnz	r3, 8007832 <_putc_r+0x12>
 800782e:	f7ff f96f 	bl	8006b10 <__sinit>
 8007832:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007834:	07d8      	lsls	r0, r3, #31
 8007836:	d405      	bmi.n	8007844 <_putc_r+0x24>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	0599      	lsls	r1, r3, #22
 800783c:	d402      	bmi.n	8007844 <_putc_r+0x24>
 800783e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007840:	f7ff fb07 	bl	8006e52 <__retarget_lock_acquire_recursive>
 8007844:	68a3      	ldr	r3, [r4, #8]
 8007846:	3b01      	subs	r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	60a3      	str	r3, [r4, #8]
 800784c:	da05      	bge.n	800785a <_putc_r+0x3a>
 800784e:	69a2      	ldr	r2, [r4, #24]
 8007850:	4293      	cmp	r3, r2
 8007852:	db12      	blt.n	800787a <_putc_r+0x5a>
 8007854:	b2eb      	uxtb	r3, r5
 8007856:	2b0a      	cmp	r3, #10
 8007858:	d00f      	beq.n	800787a <_putc_r+0x5a>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	6022      	str	r2, [r4, #0]
 8007860:	701d      	strb	r5, [r3, #0]
 8007862:	b2ed      	uxtb	r5, r5
 8007864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007866:	07da      	lsls	r2, r3, #31
 8007868:	d405      	bmi.n	8007876 <_putc_r+0x56>
 800786a:	89a3      	ldrh	r3, [r4, #12]
 800786c:	059b      	lsls	r3, r3, #22
 800786e:	d402      	bmi.n	8007876 <_putc_r+0x56>
 8007870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007872:	f7ff faef 	bl	8006e54 <__retarget_lock_release_recursive>
 8007876:	4628      	mov	r0, r5
 8007878:	bd70      	pop	{r4, r5, r6, pc}
 800787a:	4629      	mov	r1, r5
 800787c:	4622      	mov	r2, r4
 800787e:	4630      	mov	r0, r6
 8007880:	f7ff f9d9 	bl	8006c36 <__swbuf_r>
 8007884:	4605      	mov	r5, r0
 8007886:	e7ed      	b.n	8007864 <_putc_r+0x44>

08007888 <_fstat_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d07      	ldr	r5, [pc, #28]	@ (80078a8 <_fstat_r+0x20>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	602b      	str	r3, [r5, #0]
 8007896:	f7fa fb5a 	bl	8001f4e <_fstat>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	d102      	bne.n	80078a4 <_fstat_r+0x1c>
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	b103      	cbz	r3, 80078a4 <_fstat_r+0x1c>
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
 80078a6:	bf00      	nop
 80078a8:	20004bb8 	.word	0x20004bb8

080078ac <_isatty_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	@ (80078c8 <_isatty_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fa fb59 	bl	8001f6e <_isatty>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_isatty_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_isatty_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20004bb8 	.word	0x20004bb8

080078cc <_sbrk_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d06      	ldr	r5, [pc, #24]	@ (80078e8 <_sbrk_r+0x1c>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	602b      	str	r3, [r5, #0]
 80078d8:	f7fa fb62 	bl	8001fa0 <_sbrk>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_sbrk_r+0x1a>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_sbrk_r+0x1a>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20004bb8 	.word	0x20004bb8

080078ec <_init>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	bf00      	nop
 80078f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f2:	bc08      	pop	{r3}
 80078f4:	469e      	mov	lr, r3
 80078f6:	4770      	bx	lr

080078f8 <_fini>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr
