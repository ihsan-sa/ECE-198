
Receiver_Unit_Code_ECE198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003a00  08003a00  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003afc  08003afc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003afc  08003afc  00004afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b04  08003b04  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b04  08003b04  00004b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b08  08003b08  00004b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003b0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08003b74  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003b74  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bfd  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159e  00000000  00000000  0000cc95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0000e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000574  00000000  00000000  0000e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016236  00000000  00000000  0000eedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008aa4  00000000  00000000  00025112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e23  00000000  00000000  0002dbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b49d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002598  00000000  00000000  000b4a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b6fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080039e8 	.word	0x080039e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080039e8 	.word	0x080039e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <reset_lcd_bits>:

#include "main.h"
#include "stdio.h"


  void reset_lcd_bits(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2110      	movs	r1, #16
 8000578:	481c      	ldr	r0, [pc, #112]	@ (80005ec <reset_lcd_bits+0x7c>)
 800057a:	f001 f813 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	481a      	ldr	r0, [pc, #104]	@ (80005ec <reset_lcd_bits+0x7c>)
 8000584:	f001 f80e 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, LCD_D2_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4818      	ldr	r0, [pc, #96]	@ (80005f0 <reset_lcd_bits+0x80>)
 800058e:	f001 f809 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, LCD_D3_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2102      	movs	r1, #2
 8000596:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <reset_lcd_bits+0x80>)
 8000598:	f001 f804 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2101      	movs	r1, #1
 80005a0:	4812      	ldr	r0, [pc, #72]	@ (80005ec <reset_lcd_bits+0x7c>)
 80005a2:	f000 ffff 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, LCD_D5_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	4812      	ldr	r0, [pc, #72]	@ (80005f4 <reset_lcd_bits+0x84>)
 80005ac:	f000 fffa 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, LCD_D6_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2102      	movs	r1, #2
 80005b4:	480f      	ldr	r0, [pc, #60]	@ (80005f4 <reset_lcd_bits+0x84>)
 80005b6:	f000 fff5 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <reset_lcd_bits+0x84>)
 80005c0:	f000 fff0 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ca:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <reset_lcd_bits+0x84>)
 80005cc:	f000 ffea 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d6:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <reset_lcd_bits+0x84>)
 80005d8:	f000 ffe4 	bl	80015a4 <HAL_GPIO_WritePin>
  	//Enable pin
  	HAL_GPIO_WritePin(GPIOB, LCD_E_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e2:	4802      	ldr	r0, [pc, #8]	@ (80005ec <reset_lcd_bits+0x7c>)
 80005e4:	f000 ffde 	bl	80015a4 <HAL_GPIO_WritePin>

  }
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020400 	.word	0x40020400
 80005f0:	40020800 	.word	0x40020800
 80005f4:	40020000 	.word	0x40020000

080005f8 <send_lcd_instruction>:
  void send_lcd_instruction(int instruction, int rw, int rs){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b090      	sub	sp, #64	@ 0x40
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]

  	printf("Sending instruction: %d  0x%x  %c  0b",instruction ,instruction,(char)instruction);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	68f9      	ldr	r1, [r7, #12]
 800060c:	487e      	ldr	r0, [pc, #504]	@ (8000808 <send_lcd_instruction+0x210>)
 800060e:	f002 f949 	bl	80028a4 <iprintf>
  	//set everything to 0
  	reset_lcd_bits();
 8000612:	f7ff ffad 	bl	8000570 <reset_lcd_bits>


  	int mask = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	637b      	str	r3, [r7, #52]	@ 0x34
  	int result = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	633b      	str	r3, [r7, #48]	@ 0x30
  	int parsed_instruction[8];

  	for(int bit = 0; bit<8;bit++){
 800061e:	2300      	movs	r3, #0
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000622:	e09c      	b.n	800075e <send_lcd_instruction+0x166>

  		mask = 1 << bit;
 8000624:	2201      	movs	r2, #1
 8000626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	637b      	str	r3, [r7, #52]	@ 0x34
  		result = instruction & mask;
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000632:	4013      	ands	r3, r2
 8000634:	633b      	str	r3, [r7, #48]	@ 0x30
  		parsed_instruction[bit] = result >> bit;
 8000636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800063a:	411a      	asrs	r2, r3
 800063c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	3340      	adds	r3, #64	@ 0x40
 8000642:	443b      	add	r3, r7
 8000644:	f843 2c30 	str.w	r2, [r3, #-48]

  		switch (result){
 8000648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800064a:	2b80      	cmp	r3, #128	@ 0x80
 800064c:	d07e      	beq.n	800074c <send_lcd_instruction+0x154>
 800064e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000650:	2b80      	cmp	r3, #128	@ 0x80
 8000652:	f300 8081 	bgt.w	8000758 <send_lcd_instruction+0x160>
 8000656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000658:	2b20      	cmp	r3, #32
 800065a:	dc49      	bgt.n	80006f0 <send_lcd_instruction+0xf8>
 800065c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800065e:	2b00      	cmp	r3, #0
 8000660:	dd7a      	ble.n	8000758 <send_lcd_instruction+0x160>
 8000662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000664:	3b01      	subs	r3, #1
 8000666:	2b1f      	cmp	r3, #31
 8000668:	d876      	bhi.n	8000758 <send_lcd_instruction+0x160>
 800066a:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <send_lcd_instruction+0x78>)
 800066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000670:	080006f9 	.word	0x080006f9
 8000674:	08000705 	.word	0x08000705
 8000678:	08000759 	.word	0x08000759
 800067c:	08000711 	.word	0x08000711
 8000680:	08000759 	.word	0x08000759
 8000684:	08000759 	.word	0x08000759
 8000688:	08000759 	.word	0x08000759
 800068c:	0800071d 	.word	0x0800071d
 8000690:	08000759 	.word	0x08000759
 8000694:	08000759 	.word	0x08000759
 8000698:	08000759 	.word	0x08000759
 800069c:	08000759 	.word	0x08000759
 80006a0:	08000759 	.word	0x08000759
 80006a4:	08000759 	.word	0x08000759
 80006a8:	08000759 	.word	0x08000759
 80006ac:	08000729 	.word	0x08000729
 80006b0:	08000759 	.word	0x08000759
 80006b4:	08000759 	.word	0x08000759
 80006b8:	08000759 	.word	0x08000759
 80006bc:	08000759 	.word	0x08000759
 80006c0:	08000759 	.word	0x08000759
 80006c4:	08000759 	.word	0x08000759
 80006c8:	08000759 	.word	0x08000759
 80006cc:	08000759 	.word	0x08000759
 80006d0:	08000759 	.word	0x08000759
 80006d4:	08000759 	.word	0x08000759
 80006d8:	08000759 	.word	0x08000759
 80006dc:	08000759 	.word	0x08000759
 80006e0:	08000759 	.word	0x08000759
 80006e4:	08000759 	.word	0x08000759
 80006e8:	08000759 	.word	0x08000759
 80006ec:	08000735 	.word	0x08000735
 80006f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006f2:	2b40      	cmp	r3, #64	@ 0x40
 80006f4:	d024      	beq.n	8000740 <send_lcd_instruction+0x148>
 80006f6:	e02f      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b00000001:
  			HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin, GPIO_PIN_SET); break;
 80006f8:	2201      	movs	r2, #1
 80006fa:	2110      	movs	r1, #16
 80006fc:	4843      	ldr	r0, [pc, #268]	@ (800080c <send_lcd_instruction+0x214>)
 80006fe:	f000 ff51 	bl	80015a4 <HAL_GPIO_WritePin>
 8000702:	e029      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b00000010:
  			HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin, GPIO_PIN_SET); break;
 8000704:	2201      	movs	r2, #1
 8000706:	2120      	movs	r1, #32
 8000708:	4840      	ldr	r0, [pc, #256]	@ (800080c <send_lcd_instruction+0x214>)
 800070a:	f000 ff4b 	bl	80015a4 <HAL_GPIO_WritePin>
 800070e:	e023      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b00000100:
  			HAL_GPIO_WritePin(GPIOC, LCD_D2_Pin, GPIO_PIN_SET); break;
 8000710:	2201      	movs	r2, #1
 8000712:	2101      	movs	r1, #1
 8000714:	483e      	ldr	r0, [pc, #248]	@ (8000810 <send_lcd_instruction+0x218>)
 8000716:	f000 ff45 	bl	80015a4 <HAL_GPIO_WritePin>
 800071a:	e01d      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b00001000:
  			HAL_GPIO_WritePin(GPIOC, LCD_D3_Pin, GPIO_PIN_SET); break;
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	483b      	ldr	r0, [pc, #236]	@ (8000810 <send_lcd_instruction+0x218>)
 8000722:	f000 ff3f 	bl	80015a4 <HAL_GPIO_WritePin>
 8000726:	e017      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b00010000:
  			HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin, GPIO_PIN_SET); break;
 8000728:	2201      	movs	r2, #1
 800072a:	2101      	movs	r1, #1
 800072c:	4837      	ldr	r0, [pc, #220]	@ (800080c <send_lcd_instruction+0x214>)
 800072e:	f000 ff39 	bl	80015a4 <HAL_GPIO_WritePin>
 8000732:	e011      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b00100000:
  			HAL_GPIO_WritePin(GPIOA, LCD_D5_Pin, GPIO_PIN_SET); break;
 8000734:	2201      	movs	r2, #1
 8000736:	2110      	movs	r1, #16
 8000738:	4836      	ldr	r0, [pc, #216]	@ (8000814 <send_lcd_instruction+0x21c>)
 800073a:	f000 ff33 	bl	80015a4 <HAL_GPIO_WritePin>
 800073e:	e00b      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b01000000:
  			HAL_GPIO_WritePin(GPIOA, LCD_D6_Pin, GPIO_PIN_SET); break;
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	4833      	ldr	r0, [pc, #204]	@ (8000814 <send_lcd_instruction+0x21c>)
 8000746:	f000 ff2d 	bl	80015a4 <HAL_GPIO_WritePin>
 800074a:	e005      	b.n	8000758 <send_lcd_instruction+0x160>
  		case 0b10000000:
  			HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin, GPIO_PIN_SET); break;
 800074c:	2201      	movs	r2, #1
 800074e:	2101      	movs	r1, #1
 8000750:	4830      	ldr	r0, [pc, #192]	@ (8000814 <send_lcd_instruction+0x21c>)
 8000752:	f000 ff27 	bl	80015a4 <HAL_GPIO_WritePin>
 8000756:	bf00      	nop
  	for(int bit = 0; bit<8;bit++){
 8000758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800075a:	3301      	adds	r3, #1
 800075c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800075e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000760:	2b07      	cmp	r3, #7
 8000762:	f77f af5f 	ble.w	8000624 <send_lcd_instruction+0x2c>
  		}

  	}
  	for(int i = 0; i<8;i++) printf("%d", parsed_instruction[7-i]);
 8000766:	2300      	movs	r3, #0
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800076a:	e00e      	b.n	800078a <send_lcd_instruction+0x192>
 800076c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	3340      	adds	r3, #64	@ 0x40
 8000776:	443b      	add	r3, r7
 8000778:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800077c:	4619      	mov	r1, r3
 800077e:	4826      	ldr	r0, [pc, #152]	@ (8000818 <send_lcd_instruction+0x220>)
 8000780:	f002 f890 	bl	80028a4 <iprintf>
 8000784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000786:	3301      	adds	r3, #1
 8000788:	63bb      	str	r3, [r7, #56]	@ 0x38
 800078a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800078c:	2b07      	cmp	r3, #7
 800078e:	dded      	ble.n	800076c <send_lcd_instruction+0x174>

  	if(rw == 1)	{
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d109      	bne.n	80007aa <send_lcd_instruction+0x1b2>
  		HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079c:	481d      	ldr	r0, [pc, #116]	@ (8000814 <send_lcd_instruction+0x21c>)
 800079e:	f000 ff01 	bl	80015a4 <HAL_GPIO_WritePin>
  		printf("  R/W: 1  ");
 80007a2:	481e      	ldr	r0, [pc, #120]	@ (800081c <send_lcd_instruction+0x224>)
 80007a4:	f002 f87e 	bl	80028a4 <iprintf>
 80007a8:	e002      	b.n	80007b0 <send_lcd_instruction+0x1b8>
  	}else{
  		printf("  R/W: 0  ");
 80007aa:	481d      	ldr	r0, [pc, #116]	@ (8000820 <send_lcd_instruction+0x228>)
 80007ac:	f002 f87a 	bl	80028a4 <iprintf>
  	}
  	if(rs == 1) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d109      	bne.n	80007ca <send_lcd_instruction+0x1d2>
  		HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007bc:	4815      	ldr	r0, [pc, #84]	@ (8000814 <send_lcd_instruction+0x21c>)
 80007be:	f000 fef1 	bl	80015a4 <HAL_GPIO_WritePin>
  		printf("RS: 1");
 80007c2:	4818      	ldr	r0, [pc, #96]	@ (8000824 <send_lcd_instruction+0x22c>)
 80007c4:	f002 f86e 	bl	80028a4 <iprintf>
 80007c8:	e002      	b.n	80007d0 <send_lcd_instruction+0x1d8>
  	}else{
  		printf("RS: 0");
 80007ca:	4817      	ldr	r0, [pc, #92]	@ (8000828 <send_lcd_instruction+0x230>)
 80007cc:	f002 f86a 	bl	80028a4 <iprintf>
  	}
  	printf("\r\n");
 80007d0:	4816      	ldr	r0, [pc, #88]	@ (800082c <send_lcd_instruction+0x234>)
 80007d2:	f002 f8cf 	bl	8002974 <puts>

  //	toggle enable_bit

  	HAL_GPIO_WritePin(GPIOB, LCD_E_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <send_lcd_instruction+0x214>)
 80007de:	f000 fee1 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fc38 	bl	8001058 <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOB, LCD_E_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ee:	4807      	ldr	r0, [pc, #28]	@ (800080c <send_lcd_instruction+0x214>)
 80007f0:	f000 fed8 	bl	80015a4 <HAL_GPIO_WritePin>

  // set everything to zero again
  	reset_lcd_bits();
 80007f4:	f7ff febc 	bl	8000570 <reset_lcd_bits>
  	HAL_Delay(10);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f000 fc2d 	bl	8001058 <HAL_Delay>

  }
 80007fe:	bf00      	nop
 8000800:	3740      	adds	r7, #64	@ 0x40
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	08003a00 	.word	0x08003a00
 800080c:	40020400 	.word	0x40020400
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	08003a28 	.word	0x08003a28
 800081c:	08003a2c 	.word	0x08003a2c
 8000820:	08003a38 	.word	0x08003a38
 8000824:	08003a44 	.word	0x08003a44
 8000828:	08003a4c 	.word	0x08003a4c
 800082c:	08003a54 	.word	0x08003a54

08000830 <lcd_print_chars>:

#define set_mode 0b00111000;
#define display_config 0b00001110;
#define entry_mode_set 0b00000110;

  void lcd_print_chars(char chars[], int delay){
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	  int len = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
	  while(chars[len] != '\0')len++;
 800083e:	e002      	b.n	8000846 <lcd_print_chars+0x16>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f6      	bne.n	8000840 <lcd_print_chars+0x10>

	  for(int c = 0; c < len; c++){
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	e010      	b.n	800087a <lcd_print_chars+0x4a>
		  send_lcd_instruction((int)chars[c],0,1);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fec7 	bl	80005f8 <send_lcd_instruction>
		  HAL_Delay(10+delay);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	330a      	adds	r3, #10
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fbf2 	bl	8001058 <HAL_Delay>
	  for(int c = 0; c < len; c++){
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	429a      	cmp	r2, r3
 8000880:	dbea      	blt.n	8000858 <lcd_print_chars+0x28>
	  }
  }
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <lcd_clear>:

  void lcd_clear(){send_lcd_instruction(0b00000001,0,0);}
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff feaf 	bl	80005f8 <send_lcd_instruction>
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <lcd_init>:


  void lcd_init(){
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f000 fbd8 	bl	8001058 <HAL_Delay>
  	send_lcd_instruction(0b00111000, 0, 0); //set config
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2038      	movs	r0, #56	@ 0x38
 80008ae:	f7ff fea3 	bl	80005f8 <send_lcd_instruction>
  	send_lcd_instruction(0b00001111, 0,0); //Display on;cursor; blink off
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	200f      	movs	r0, #15
 80008b8:	f7ff fe9e 	bl	80005f8 <send_lcd_instruction>
  	send_lcd_instruction(0b00000110,0,0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2006      	movs	r0, #6
 80008c2:	f7ff fe99 	bl	80005f8 <send_lcd_instruction>
  	lcd_clear();
 80008c6:	f7ff ffe1 	bl	800088c <lcd_clear>

  }
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <readMsg>:
	HAL_GPIO_WritePin(gpioTypeTransmit, transmitPin, 1);
	HAL_Delay(bufferDelay);
}


int8_t readMsg(GPIO_TypeDef* gpioTypeRead, int readPin, int baudDelay){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	int8_t got_msg = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	75fb      	strb	r3, [r7, #23]
	printf("waiting for qstart bit\r\n");
 80008e0:	481c      	ldr	r0, [pc, #112]	@ (8000954 <readMsg+0x84>)
 80008e2:	f002 f847 	bl	8002974 <puts>
	while(HAL_GPIO_ReadPin(gpioTypeRead, readPin)){
 80008e6:	bf00      	nop
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4619      	mov	r1, r3
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f000 fe40 	bl	8001574 <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f6      	bne.n	80008e8 <readMsg+0x18>
		//wait for start bit
	}

	printf("received start bit\r\n");
 80008fa:	4817      	ldr	r0, [pc, #92]	@ (8000958 <readMsg+0x88>)
 80008fc:	f002 f83a 	bl	8002974 <puts>
	HAL_Delay(baudDelay+5); // let start bit end, delay a bit
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3305      	adds	r3, #5
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fba7 	bl	8001058 <HAL_Delay>
	for (int i=0; i<8; i++){
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	e017      	b.n	8000940 <readMsg+0x70>
		got_msg |= HAL_GPIO_ReadPin(gpioTypeRead, readPin) << (7-i);
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4619      	mov	r1, r3
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f000 fe2c 	bl	8001574 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	b25a      	sxtb	r2, r3
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	4313      	orrs	r3, r2
 8000930:	75fb      	strb	r3, [r7, #23]
//		}
//		else{
//			printf("0");
//		}
//		printf("\r\n");
	    HAL_Delay(baudDelay);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fb8f 	bl	8001058 <HAL_Delay>
	for (int i=0; i<8; i++){
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	3301      	adds	r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	2b07      	cmp	r3, #7
 8000944:	dde4      	ble.n	8000910 <readMsg+0x40>
	}

	return got_msg;
 8000946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	08003a58 	.word	0x08003a58
 8000958:	08003a70 	.word	0x08003a70

0800095c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	b29a      	uxth	r2, r3
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	4804      	ldr	r0, [pc, #16]	@ (8000984 <_write+0x28>)
 8000974:	f001 fb18 	bl	8001fa8 <HAL_UART_Transmit>
	return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000084 	.word	0x20000084

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 faf1 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f84b 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f000 f8df 	bl	8000b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099a:	f000 f8b3 	bl	8000b04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 800099e:	f7ff ff7e 	bl	800089e <lcd_init>
	lcd_print_chars("INIT DONE", 0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	481b      	ldr	r0, [pc, #108]	@ (8000a14 <main+0x8c>)
 80009a6:	f7ff ff43 	bl	8000830 <lcd_print_chars>
//	HAL_GPIO_WritePin(GPIOA, UART_TX_Pin, GPIO_PIN_SET);
//	HAL_Delay(1000);
//	HAL_GPIO_WritePin(GPIOA, UART_TX_Pin, GPIO_PIN_RESET);
	lcd_clear();
 80009aa:	f7ff ff6f 	bl	800088c <lcd_clear>
	lcd_print_chars("ready", 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	4819      	ldr	r0, [pc, #100]	@ (8000a18 <main+0x90>)
 80009b2:	f7ff ff3d 	bl	8000830 <lcd_print_chars>
	printf("Ready\n\r");
 80009b6:	4819      	ldr	r0, [pc, #100]	@ (8000a1c <main+0x94>)
 80009b8:	f001 ff74 	bl	80028a4 <iprintf>

	 long long position = 0;
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
   long long velocity = 0;
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	unsigned long long dt = 400;
 80009d4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
//	  HAL_GPIO_WritePin(GPIOA, UART_TX_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(0);100

//	  int received = UART_read_byte();
//	  printf("RX Pin: %d \n\r", HAL_GPIO_ReadPin(GPIOA, UART_RX_Pin));
	  int data = readMsg(GPIOA, UART_RX_Pin, 15);
 80009e0:	220f      	movs	r2, #15
 80009e2:	2180      	movs	r1, #128	@ 0x80
 80009e4:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <main+0x98>)
 80009e6:	f7ff ff73 	bl	80008d0 <readMsg>
 80009ea:	4603      	mov	r3, r0
 80009ec:	60fb      	str	r3, [r7, #12]
	  printf("Received: %d\n\r", data);
 80009ee:	68f9      	ldr	r1, [r7, #12]
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <main+0x9c>)
 80009f2:	f001 ff57 	bl	80028a4 <iprintf>



//	  velocity = velocity + (dt*(data));
//	  position = position + (dt*velocity);
	  sprintf(send, "%d", data);
 80009f6:	463b      	mov	r3, r7
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	490b      	ldr	r1, [pc, #44]	@ (8000a28 <main+0xa0>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 ffc1 	bl	8002984 <siprintf>
	  lcd_clear();
 8000a02:	f7ff ff43 	bl	800088c <lcd_clear>
	  lcd_print_chars(send,0);
 8000a06:	463b      	mov	r3, r7
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff10 	bl	8000830 <lcd_print_chars>
  {
 8000a10:	bf00      	nop
 8000a12:	e7e5      	b.n	80009e0 <main+0x58>
 8000a14:	08003a84 	.word	0x08003a84
 8000a18:	08003a90 	.word	0x08003a90
 8000a1c:	08003a98 	.word	0x08003a98
 8000a20:	40020000 	.word	0x40020000
 8000a24:	08003aa0 	.word	0x08003aa0
 8000a28:	08003a28 	.word	0x08003a28

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	@ 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 f89a 	bl	8002b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <SystemClock_Config+0xd0>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a28      	ldr	r2, [pc, #160]	@ (8000afc <SystemClock_Config+0xd0>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <SystemClock_Config+0xd0>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <SystemClock_Config+0xd4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <SystemClock_Config+0xd4>)
 8000a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <SystemClock_Config+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fd8e 	bl	80015d8 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac2:	f000 f8ef 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fff0 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aee:	f000 f8d9 	bl	8000ca4 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	@ 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_USART2_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f001 f9e4 	bl	8001f08 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f8ad 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000084 	.word	0x20000084
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b48      	ldr	r3, [pc, #288]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a47      	ldr	r2, [pc, #284]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b41      	ldr	r3, [pc, #260]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a40      	ldr	r2, [pc, #256]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b3a      	ldr	r3, [pc, #232]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a39      	ldr	r2, [pc, #228]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b37      	ldr	r3, [pc, #220]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a32      	ldr	r2, [pc, #200]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <MX_GPIO_Init+0x13c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D2_Pin|LCD_D3_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2103      	movs	r1, #3
 8000be2:	482d      	ldr	r0, [pc, #180]	@ (8000c98 <MX_GPIO_Init+0x140>)
 8000be4:	f000 fcde 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LD2_Pin
 8000be8:	2200      	movs	r2, #0
 8000bea:	f240 3133 	movw	r1, #819	@ 0x333
 8000bee:	482b      	ldr	r0, [pc, #172]	@ (8000c9c <MX_GPIO_Init+0x144>)
 8000bf0:	f000 fcd8 	bl	80015a4 <HAL_GPIO_WritePin>
                          |LCD_RW_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f240 4171 	movw	r1, #1137	@ 0x471
 8000bfa:	4829      	ldr	r0, [pc, #164]	@ (8000ca0 <MX_GPIO_Init+0x148>)
 8000bfc:	f000 fcd2 	bl	80015a4 <HAL_GPIO_WritePin>
                          |UART_TX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4820      	ldr	r0, [pc, #128]	@ (8000c98 <MX_GPIO_Init+0x140>)
 8000c18:	f000 fb28 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D2_Pin LCD_D3_Pin */
  GPIO_InitStruct.Pin = LCD_D2_Pin|LCD_D3_Pin;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4819      	ldr	r0, [pc, #100]	@ (8000c98 <MX_GPIO_Init+0x140>)
 8000c34:	f000 fb1a 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LD2_Pin
                           LCD_RW_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LD2_Pin
 8000c38:	f240 3333 	movw	r3, #819	@ 0x333
 8000c3c:	617b      	str	r3, [r7, #20]
                          |LCD_RW_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <MX_GPIO_Init+0x144>)
 8000c52:	f000 fb0b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_RX_Pin */
  GPIO_InitStruct.Pin = UART_RX_Pin;
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_GPIO_Init+0x144>)
 8000c6a:	f000 faff 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_E_Pin LCD_D0_Pin LCD_D1_Pin
                           UART_TX_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin
 8000c6e:	f240 4371 	movw	r3, #1137	@ 0x471
 8000c72:	617b      	str	r3, [r7, #20]
                          |UART_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <MX_GPIO_Init+0x148>)
 8000c88:	f000 faf0 	bl	800126c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	@ 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f000 fa88 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <HAL_UART_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_UART_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d76:	f000 fa79 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	@ 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f917 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e00a      	b.n	8000e16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e00:	f3af 8000 	nop.w
 8000e04:	4601      	mov	r1, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	60ba      	str	r2, [r7, #8]
 8000e0c:	b2ca      	uxtb	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dbf0      	blt.n	8000e00 <_read+0x12>
  }

  return len;
 8000e1e:	687b      	ldr	r3, [r7, #4]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e50:	605a      	str	r2, [r3, #4]
  return 0;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_isatty>:

int _isatty(int file)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f001 fea6 	bl	8002c10 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20018000 	.word	0x20018000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	200000cc 	.word	0x200000cc
 8000ef8:	20000220 	.word	0x20000220

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f001 fe65 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fd19 	bl	8000988 <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f64:	08003b0c 	.word	0x08003b0c
  ldr r2, =_sbss
 8000f68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f6c:	20000220 	.word	0x20000220

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f931 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fe82 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f93b 	bl	8001252 <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f911 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	200000d0 	.word	0x200000d0

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000d0 	.word	0x200000d0

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_Delay+0x44>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	@ (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	@ (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff47 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff5c 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffb0 	bl	80011c0 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e159      	b.n	800153c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8148 	bne.w	8001536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a2 	beq.w	8001536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <HAL_GPIO_Init+0x2e8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a52      	ldr	r2, [pc, #328]	@ (8001558 <HAL_GPIO_Init+0x2ec>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	@ (800155c <HAL_GPIO_Init+0x2f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x202>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a48      	ldr	r2, [pc, #288]	@ (8001560 <HAL_GPIO_Init+0x2f4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x1fe>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a47      	ldr	r2, [pc, #284]	@ (8001564 <HAL_GPIO_Init+0x2f8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x1fa>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a46      	ldr	r2, [pc, #280]	@ (8001568 <HAL_GPIO_Init+0x2fc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x1f6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a45      	ldr	r2, [pc, #276]	@ (800156c <HAL_GPIO_Init+0x300>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x1f2>
 800145a:	2304      	movs	r3, #4
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800145e:	2307      	movs	r3, #7
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x204>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x204>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	@ (8001558 <HAL_GPIO_Init+0x2ec>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <HAL_GPIO_Init+0x304>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1a      	ldr	r2, [pc, #104]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_GPIO_Init+0x304>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f aea2 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	@ 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e001      	b.n	8001596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e267      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d075      	beq.n	80016e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015f6:	4b88      	ldr	r3, [pc, #544]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d00c      	beq.n	800161c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4b85      	ldr	r3, [pc, #532]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160a:	2b08      	cmp	r3, #8
 800160c:	d112      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160e:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800161a:	d10b      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4b7e      	ldr	r3, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d05b      	beq.n	80016e0 <HAL_RCC_OscConfig+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d157      	bne.n	80016e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e242      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x74>
 800163e:	4b76      	ldr	r3, [pc, #472]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a75      	ldr	r2, [pc, #468]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b70      	ldr	r3, [pc, #448]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6f      	ldr	r2, [pc, #444]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b6d      	ldr	r3, [pc, #436]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6c      	ldr	r2, [pc, #432]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 8001670:	4b69      	ldr	r3, [pc, #420]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a68      	ldr	r2, [pc, #416]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a65      	ldr	r2, [pc, #404]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fcd6 	bl	8001040 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fcd2 	bl	8001040 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e207      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xc0>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fcc2 	bl	8001040 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcbe 	bl	8001040 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	@ 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1f3      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xe8>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b44      	ldr	r3, [pc, #272]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1c7      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b3b      	ldr	r3, [pc, #236]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4937      	ldr	r1, [pc, #220]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b34      	ldr	r3, [pc, #208]	@ (800181c <HAL_RCC_OscConfig+0x244>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fc77 	bl	8001040 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc73 	bl	8001040 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1a8      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4925      	ldr	r1, [pc, #148]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <HAL_RCC_OscConfig+0x244>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fc56 	bl	8001040 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fc52 	bl	8001040 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e187      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d036      	beq.n	8001830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_RCC_OscConfig+0x248>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fc36 	bl	8001040 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc32 	bl	8001040 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e167      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_RCC_OscConfig+0x240>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x200>
 80017f6:	e01b      	b.n	8001830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_RCC_OscConfig+0x248>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fc1f 	bl	8001040 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e00e      	b.n	8001824 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff fc1b 	bl	8001040 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d907      	bls.n	8001824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e150      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
 8001818:	40023800 	.word	0x40023800
 800181c:	42470000 	.word	0x42470000
 8001820:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	4b88      	ldr	r3, [pc, #544]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ea      	bne.n	8001806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8097 	beq.w	800196c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b81      	ldr	r3, [pc, #516]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10f      	bne.n	800186e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b7d      	ldr	r3, [pc, #500]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a7c      	ldr	r2, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b77      	ldr	r3, [pc, #476]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187a:	4b74      	ldr	r3, [pc, #464]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a73      	ldr	r2, [pc, #460]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fbdb 	bl	8001040 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7ff fbd7 	bl	8001040 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e10c      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <HAL_RCC_OscConfig+0x474>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2ea>
 80018b4:	4b64      	ldr	r3, [pc, #400]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b8:	4a63      	ldr	r2, [pc, #396]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c0:	e01c      	b.n	80018fc <HAL_RCC_OscConfig+0x324>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x30c>
 80018ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018da:	4a5b      	ldr	r2, [pc, #364]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0x324>
 80018e4:	4b58      	ldr	r3, [pc, #352]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e8:	4a57      	ldr	r2, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f0:	4b55      	ldr	r3, [pc, #340]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f4:	4a54      	ldr	r2, [pc, #336]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f023 0304 	bic.w	r3, r3, #4
 80018fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d015      	beq.n	8001930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fb9c 	bl	8001040 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff fb98 	bl	8001040 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0cb      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	4b49      	ldr	r3, [pc, #292]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0ee      	beq.n	800190c <HAL_RCC_OscConfig+0x334>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fb86 	bl	8001040 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f7ff fb82 	bl	8001040 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e0b5      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ee      	bne.n	8001938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001960:	4b39      	ldr	r3, [pc, #228]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4a38      	ldr	r2, [pc, #224]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a1 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001976:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d05c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d141      	bne.n	8001a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_OscConfig+0x478>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fb56 	bl	8001040 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff fb52 	bl	8001040 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e087      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	491b      	ldr	r1, [pc, #108]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x478>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fb2b 	bl	8001040 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fb27 	bl	8001040 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e05c      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x416>
 8001a0c:	e054      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x478>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb14 	bl	8001040 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fb10 	bl	8001040 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e045      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x444>
 8001a3a:	e03d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e038      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d028      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d121      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d11a      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0cc      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b68      	ldr	r3, [pc, #416]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d044      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d119      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b3f      	ldr	r3, [pc, #252]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e067      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4934      	ldr	r1, [pc, #208]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fa42 	bl	8001040 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff fa3e 	bl	8001040 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20c      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f9a2 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08003ab0 	.word	0x08003ab0
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c98:	b094      	sub	sp, #80	@ 0x50
 8001c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cac:	4b79      	ldr	r3, [pc, #484]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	f200 80e1 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc6:	e0db      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ccc:	e0db      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cce:	4b73      	ldr	r3, [pc, #460]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd2:	e0d8      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cde:	4b6d      	ldr	r3, [pc, #436]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b6a      	ldr	r3, [pc, #424]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d06:	4622      	mov	r2, r4
 8001d08:	462b      	mov	r3, r5
 8001d0a:	f04f 0000 	mov.w	r0, #0
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	0159      	lsls	r1, r3, #5
 8001d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d18:	0150      	lsls	r0, r2, #5
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4621      	mov	r1, r4
 8001d20:	1a51      	subs	r1, r2, r1
 8001d22:	6139      	str	r1, [r7, #16]
 8001d24:	4629      	mov	r1, r5
 8001d26:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d38:	4659      	mov	r1, fp
 8001d3a:	018b      	lsls	r3, r1, #6
 8001d3c:	4651      	mov	r1, sl
 8001d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d42:	4651      	mov	r1, sl
 8001d44:	018a      	lsls	r2, r1, #6
 8001d46:	4651      	mov	r1, sl
 8001d48:	ebb2 0801 	subs.w	r8, r2, r1
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d66:	4690      	mov	r8, r2
 8001d68:	4699      	mov	r9, r3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	eb18 0303 	adds.w	r3, r8, r3
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	462b      	mov	r3, r5
 8001d74:	eb49 0303 	adc.w	r3, r9, r3
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d86:	4629      	mov	r1, r5
 8001d88:	024b      	lsls	r3, r1, #9
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d90:	4621      	mov	r1, r4
 8001d92:	024a      	lsls	r2, r1, #9
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001da4:	f7fe fa6c 	bl	8000280 <__aeabi_uldivmod>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4613      	mov	r3, r2
 8001dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db0:	e058      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	2200      	movs	r2, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dcc:	4642      	mov	r2, r8
 8001dce:	464b      	mov	r3, r9
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	0159      	lsls	r1, r3, #5
 8001dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dde:	0150      	lsls	r0, r2, #5
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4641      	mov	r1, r8
 8001de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dea:	4649      	mov	r1, r9
 8001dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e04:	ebb2 040a 	subs.w	r4, r2, sl
 8001e08:	eb63 050b 	sbc.w	r5, r3, fp
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	00eb      	lsls	r3, r5, #3
 8001e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	4643      	mov	r3, r8
 8001e22:	18e3      	adds	r3, r4, r3
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	464b      	mov	r3, r9
 8001e28:	eb45 0303 	adc.w	r3, r5, r3
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	028b      	lsls	r3, r1, #10
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e44:	4621      	mov	r1, r4
 8001e46:	028a      	lsls	r2, r1, #10
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	61fa      	str	r2, [r7, #28]
 8001e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e58:	f7fe fa12 	bl	8000280 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3750      	adds	r7, #80	@ 0x50
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	@ (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08003ac0 	.word	0x08003ac0

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee4:	f7ff ffdc 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0b5b      	lsrs	r3, r3, #13
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	@ (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08003ac0 	.word	0x08003ac0

08001f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e042      	b.n	8001fa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fee6 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	@ 0x24
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f973 	bl	8002238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d175      	bne.n	80020b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_UART_Transmit+0x2c>
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e06e      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2221      	movs	r2, #33	@ 0x21
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fe6:	f7ff f82b 	bl	8001040 <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002000:	d108      	bne.n	8002014 <HAL_UART_Transmit+0x6c>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e003      	b.n	800201c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800201c:	e02e      	b.n	800207c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	2180      	movs	r1, #128	@ 0x80
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f848 	bl	80020be <UART_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e03a      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3302      	adds	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e007      	b.n	800206e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1cb      	bne.n	800201e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	@ 0x40
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f814 	bl	80020be <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e006      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
  }
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ce:	e03b      	b.n	8002148 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d6:	d037      	beq.n	8002148 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d8:	f7fe ffb2 	bl	8001040 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	6a3a      	ldr	r2, [r7, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d302      	bcc.n	80020ee <UART_WaitOnFlagUntilTimeout+0x30>
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e03a      	b.n	8002168 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d023      	beq.n	8002148 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b80      	cmp	r3, #128	@ 0x80
 8002104:	d020      	beq.n	8002148 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b40      	cmp	r3, #64	@ 0x40
 800210a:	d01d      	beq.n	8002148 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b08      	cmp	r3, #8
 8002118:	d116      	bne.n	8002148 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f81d 	bl	8002170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2208      	movs	r2, #8
 800213a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e00f      	b.n	8002168 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4013      	ands	r3, r2
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	429a      	cmp	r2, r3
 8002164:	d0b4      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002170:	b480      	push	{r7}
 8002172:	b095      	sub	sp, #84	@ 0x54
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	330c      	adds	r3, #12
 800217e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002182:	e853 3f00 	ldrex	r3, [r3]
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800218e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	330c      	adds	r3, #12
 8002196:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002198:	643a      	str	r2, [r7, #64]	@ 0x40
 800219a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800219e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021a0:	e841 2300 	strex	r3, r2, [r1]
 80021a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e5      	bne.n	8002178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3314      	adds	r3, #20
 80021b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	e853 3f00 	ldrex	r3, [r3]
 80021ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3314      	adds	r3, #20
 80021ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d4:	e841 2300 	strex	r3, r2, [r1]
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e5      	bne.n	80021ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d119      	bne.n	800221c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	e853 3f00 	ldrex	r3, [r3]
 80021f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f023 0310 	bic.w	r3, r3, #16
 80021fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	330c      	adds	r3, #12
 8002206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002208:	61ba      	str	r2, [r7, #24]
 800220a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220c:	6979      	ldr	r1, [r7, #20]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	e841 2300 	strex	r3, r2, [r1]
 8002214:	613b      	str	r3, [r7, #16]
   return(result);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e5      	bne.n	80021e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800222a:	bf00      	nop
 800222c:	3754      	adds	r7, #84	@ 0x54
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b0c0      	sub	sp, #256	@ 0x100
 800223e:	af00      	add	r7, sp, #0
 8002240:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002254:	68d9      	ldr	r1, [r3, #12]
 8002256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	ea40 0301 	orr.w	r3, r0, r1
 8002260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	431a      	orrs	r2, r3
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	431a      	orrs	r2, r3
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002290:	f021 010c 	bic.w	r1, r1, #12
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800229e:	430b      	orrs	r3, r1
 80022a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b2:	6999      	ldr	r1, [r3, #24]
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	ea40 0301 	orr.w	r3, r0, r1
 80022be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002504 <UART_SetConfig+0x2cc>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d005      	beq.n	80022d8 <UART_SetConfig+0xa0>
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002508 <UART_SetConfig+0x2d0>)
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d104      	bne.n	80022e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022d8:	f7ff fe02 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 80022dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80022e0:	e003      	b.n	80022ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022e2:	f7ff fde9 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 80022e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f4:	f040 810c 	bne.w	8002510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022fc:	2200      	movs	r2, #0
 80022fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002302:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800230a:	4622      	mov	r2, r4
 800230c:	462b      	mov	r3, r5
 800230e:	1891      	adds	r1, r2, r2
 8002310:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002312:	415b      	adcs	r3, r3
 8002314:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800231a:	4621      	mov	r1, r4
 800231c:	eb12 0801 	adds.w	r8, r2, r1
 8002320:	4629      	mov	r1, r5
 8002322:	eb43 0901 	adc.w	r9, r3, r1
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800233a:	4690      	mov	r8, r2
 800233c:	4699      	mov	r9, r3
 800233e:	4623      	mov	r3, r4
 8002340:	eb18 0303 	adds.w	r3, r8, r3
 8002344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002348:	462b      	mov	r3, r5
 800234a:	eb49 0303 	adc.w	r3, r9, r3
 800234e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800235e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002366:	460b      	mov	r3, r1
 8002368:	18db      	adds	r3, r3, r3
 800236a:	653b      	str	r3, [r7, #80]	@ 0x50
 800236c:	4613      	mov	r3, r2
 800236e:	eb42 0303 	adc.w	r3, r2, r3
 8002372:	657b      	str	r3, [r7, #84]	@ 0x54
 8002374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800237c:	f7fd ff80 	bl	8000280 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4b61      	ldr	r3, [pc, #388]	@ (800250c <UART_SetConfig+0x2d4>)
 8002386:	fba3 2302 	umull	r2, r3, r3, r2
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	011c      	lsls	r4, r3, #4
 800238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002398:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800239c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80023a0:	4642      	mov	r2, r8
 80023a2:	464b      	mov	r3, r9
 80023a4:	1891      	adds	r1, r2, r2
 80023a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80023a8:	415b      	adcs	r3, r3
 80023aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023b0:	4641      	mov	r1, r8
 80023b2:	eb12 0a01 	adds.w	sl, r2, r1
 80023b6:	4649      	mov	r1, r9
 80023b8:	eb43 0b01 	adc.w	fp, r3, r1
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023d0:	4692      	mov	sl, r2
 80023d2:	469b      	mov	fp, r3
 80023d4:	4643      	mov	r3, r8
 80023d6:	eb1a 0303 	adds.w	r3, sl, r3
 80023da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023de:	464b      	mov	r3, r9
 80023e0:	eb4b 0303 	adc.w	r3, fp, r3
 80023e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023fc:	460b      	mov	r3, r1
 80023fe:	18db      	adds	r3, r3, r3
 8002400:	643b      	str	r3, [r7, #64]	@ 0x40
 8002402:	4613      	mov	r3, r2
 8002404:	eb42 0303 	adc.w	r3, r2, r3
 8002408:	647b      	str	r3, [r7, #68]	@ 0x44
 800240a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800240e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002412:	f7fd ff35 	bl	8000280 <__aeabi_uldivmod>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4611      	mov	r1, r2
 800241c:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <UART_SetConfig+0x2d4>)
 800241e:	fba3 2301 	umull	r2, r3, r3, r1
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2264      	movs	r2, #100	@ 0x64
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	1acb      	subs	r3, r1, r3
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002432:	4b36      	ldr	r3, [pc, #216]	@ (800250c <UART_SetConfig+0x2d4>)
 8002434:	fba3 2302 	umull	r2, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002440:	441c      	add	r4, r3
 8002442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002446:	2200      	movs	r2, #0
 8002448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800244c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002454:	4642      	mov	r2, r8
 8002456:	464b      	mov	r3, r9
 8002458:	1891      	adds	r1, r2, r2
 800245a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800245c:	415b      	adcs	r3, r3
 800245e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002464:	4641      	mov	r1, r8
 8002466:	1851      	adds	r1, r2, r1
 8002468:	6339      	str	r1, [r7, #48]	@ 0x30
 800246a:	4649      	mov	r1, r9
 800246c:	414b      	adcs	r3, r1
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800247c:	4659      	mov	r1, fp
 800247e:	00cb      	lsls	r3, r1, #3
 8002480:	4651      	mov	r1, sl
 8002482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002486:	4651      	mov	r1, sl
 8002488:	00ca      	lsls	r2, r1, #3
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	4603      	mov	r3, r0
 8002490:	4642      	mov	r2, r8
 8002492:	189b      	adds	r3, r3, r2
 8002494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002498:	464b      	mov	r3, r9
 800249a:	460a      	mov	r2, r1
 800249c:	eb42 0303 	adc.w	r3, r2, r3
 80024a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80024b8:	460b      	mov	r3, r1
 80024ba:	18db      	adds	r3, r3, r3
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024be:	4613      	mov	r3, r2
 80024c0:	eb42 0303 	adc.w	r3, r2, r3
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024ce:	f7fd fed7 	bl	8000280 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <UART_SetConfig+0x2d4>)
 80024d8:	fba3 1302 	umull	r1, r3, r3, r2
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	2164      	movs	r1, #100	@ 0x64
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	3332      	adds	r3, #50	@ 0x32
 80024ea:	4a08      	ldr	r2, [pc, #32]	@ (800250c <UART_SetConfig+0x2d4>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	f003 0207 	and.w	r2, r3, #7
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4422      	add	r2, r4
 80024fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002500:	e106      	b.n	8002710 <UART_SetConfig+0x4d8>
 8002502:	bf00      	nop
 8002504:	40011000 	.word	0x40011000
 8002508:	40011400 	.word	0x40011400
 800250c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002514:	2200      	movs	r2, #0
 8002516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800251a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800251e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002522:	4642      	mov	r2, r8
 8002524:	464b      	mov	r3, r9
 8002526:	1891      	adds	r1, r2, r2
 8002528:	6239      	str	r1, [r7, #32]
 800252a:	415b      	adcs	r3, r3
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24
 800252e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002532:	4641      	mov	r1, r8
 8002534:	1854      	adds	r4, r2, r1
 8002536:	4649      	mov	r1, r9
 8002538:	eb43 0501 	adc.w	r5, r3, r1
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	00eb      	lsls	r3, r5, #3
 8002546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800254a:	00e2      	lsls	r2, r4, #3
 800254c:	4614      	mov	r4, r2
 800254e:	461d      	mov	r5, r3
 8002550:	4643      	mov	r3, r8
 8002552:	18e3      	adds	r3, r4, r3
 8002554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002558:	464b      	mov	r3, r9
 800255a:	eb45 0303 	adc.w	r3, r5, r3
 800255e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800256e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800257e:	4629      	mov	r1, r5
 8002580:	008b      	lsls	r3, r1, #2
 8002582:	4621      	mov	r1, r4
 8002584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002588:	4621      	mov	r1, r4
 800258a:	008a      	lsls	r2, r1, #2
 800258c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002590:	f7fd fe76 	bl	8000280 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4b60      	ldr	r3, [pc, #384]	@ (800271c <UART_SetConfig+0x4e4>)
 800259a:	fba3 2302 	umull	r2, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	011c      	lsls	r4, r3, #4
 80025a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025b4:	4642      	mov	r2, r8
 80025b6:	464b      	mov	r3, r9
 80025b8:	1891      	adds	r1, r2, r2
 80025ba:	61b9      	str	r1, [r7, #24]
 80025bc:	415b      	adcs	r3, r3
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c4:	4641      	mov	r1, r8
 80025c6:	1851      	adds	r1, r2, r1
 80025c8:	6139      	str	r1, [r7, #16]
 80025ca:	4649      	mov	r1, r9
 80025cc:	414b      	adcs	r3, r1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025dc:	4659      	mov	r1, fp
 80025de:	00cb      	lsls	r3, r1, #3
 80025e0:	4651      	mov	r1, sl
 80025e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e6:	4651      	mov	r1, sl
 80025e8:	00ca      	lsls	r2, r1, #3
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	4642      	mov	r2, r8
 80025f2:	189b      	adds	r3, r3, r2
 80025f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025f8:	464b      	mov	r3, r9
 80025fa:	460a      	mov	r2, r1
 80025fc:	eb42 0303 	adc.w	r3, r2, r3
 8002600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800260e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800261c:	4649      	mov	r1, r9
 800261e:	008b      	lsls	r3, r1, #2
 8002620:	4641      	mov	r1, r8
 8002622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002626:	4641      	mov	r1, r8
 8002628:	008a      	lsls	r2, r1, #2
 800262a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800262e:	f7fd fe27 	bl	8000280 <__aeabi_uldivmod>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4611      	mov	r1, r2
 8002638:	4b38      	ldr	r3, [pc, #224]	@ (800271c <UART_SetConfig+0x4e4>)
 800263a:	fba3 2301 	umull	r2, r3, r3, r1
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2264      	movs	r2, #100	@ 0x64
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	1acb      	subs	r3, r1, r3
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	3332      	adds	r3, #50	@ 0x32
 800264c:	4a33      	ldr	r2, [pc, #204]	@ (800271c <UART_SetConfig+0x4e4>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002658:	441c      	add	r4, r3
 800265a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800265e:	2200      	movs	r2, #0
 8002660:	673b      	str	r3, [r7, #112]	@ 0x70
 8002662:	677a      	str	r2, [r7, #116]	@ 0x74
 8002664:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002668:	4642      	mov	r2, r8
 800266a:	464b      	mov	r3, r9
 800266c:	1891      	adds	r1, r2, r2
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	415b      	adcs	r3, r3
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002678:	4641      	mov	r1, r8
 800267a:	1851      	adds	r1, r2, r1
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	4649      	mov	r1, r9
 8002680:	414b      	adcs	r3, r1
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002690:	4659      	mov	r1, fp
 8002692:	00cb      	lsls	r3, r1, #3
 8002694:	4651      	mov	r1, sl
 8002696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800269a:	4651      	mov	r1, sl
 800269c:	00ca      	lsls	r2, r1, #3
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	4642      	mov	r2, r8
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026aa:	464b      	mov	r3, r9
 80026ac:	460a      	mov	r2, r1
 80026ae:	eb42 0303 	adc.w	r3, r2, r3
 80026b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80026be:	667a      	str	r2, [r7, #100]	@ 0x64
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80026cc:	4649      	mov	r1, r9
 80026ce:	008b      	lsls	r3, r1, #2
 80026d0:	4641      	mov	r1, r8
 80026d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d6:	4641      	mov	r1, r8
 80026d8:	008a      	lsls	r2, r1, #2
 80026da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80026de:	f7fd fdcf 	bl	8000280 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <UART_SetConfig+0x4e4>)
 80026e8:	fba3 1302 	umull	r1, r3, r3, r2
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	2164      	movs	r1, #100	@ 0x64
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	3332      	adds	r3, #50	@ 0x32
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <UART_SetConfig+0x4e4>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4422      	add	r2, r4
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002716:	46bd      	mov	sp, r7
 8002718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271c:	51eb851f 	.word	0x51eb851f

08002720 <std>:
 8002720:	2300      	movs	r3, #0
 8002722:	b510      	push	{r4, lr}
 8002724:	4604      	mov	r4, r0
 8002726:	e9c0 3300 	strd	r3, r3, [r0]
 800272a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800272e:	6083      	str	r3, [r0, #8]
 8002730:	8181      	strh	r1, [r0, #12]
 8002732:	6643      	str	r3, [r0, #100]	@ 0x64
 8002734:	81c2      	strh	r2, [r0, #14]
 8002736:	6183      	str	r3, [r0, #24]
 8002738:	4619      	mov	r1, r3
 800273a:	2208      	movs	r2, #8
 800273c:	305c      	adds	r0, #92	@ 0x5c
 800273e:	f000 fa19 	bl	8002b74 <memset>
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <std+0x58>)
 8002744:	6263      	str	r3, [r4, #36]	@ 0x24
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <std+0x5c>)
 8002748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800274a:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <std+0x60>)
 800274c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800274e:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <std+0x64>)
 8002750:	6323      	str	r3, [r4, #48]	@ 0x30
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <std+0x68>)
 8002754:	6224      	str	r4, [r4, #32]
 8002756:	429c      	cmp	r4, r3
 8002758:	d006      	beq.n	8002768 <std+0x48>
 800275a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800275e:	4294      	cmp	r4, r2
 8002760:	d002      	beq.n	8002768 <std+0x48>
 8002762:	33d0      	adds	r3, #208	@ 0xd0
 8002764:	429c      	cmp	r4, r3
 8002766:	d105      	bne.n	8002774 <std+0x54>
 8002768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800276c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002770:	f000 ba78 	b.w	8002c64 <__retarget_lock_init_recursive>
 8002774:	bd10      	pop	{r4, pc}
 8002776:	bf00      	nop
 8002778:	080029c5 	.word	0x080029c5
 800277c:	080029e7 	.word	0x080029e7
 8002780:	08002a1f 	.word	0x08002a1f
 8002784:	08002a43 	.word	0x08002a43
 8002788:	200000d4 	.word	0x200000d4

0800278c <stdio_exit_handler>:
 800278c:	4a02      	ldr	r2, [pc, #8]	@ (8002798 <stdio_exit_handler+0xc>)
 800278e:	4903      	ldr	r1, [pc, #12]	@ (800279c <stdio_exit_handler+0x10>)
 8002790:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <stdio_exit_handler+0x14>)
 8002792:	f000 b869 	b.w	8002868 <_fwalk_sglue>
 8002796:	bf00      	nop
 8002798:	2000000c 	.word	0x2000000c
 800279c:	080037b5 	.word	0x080037b5
 80027a0:	2000001c 	.word	0x2000001c

080027a4 <cleanup_stdio>:
 80027a4:	6841      	ldr	r1, [r0, #4]
 80027a6:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <cleanup_stdio+0x34>)
 80027a8:	4299      	cmp	r1, r3
 80027aa:	b510      	push	{r4, lr}
 80027ac:	4604      	mov	r4, r0
 80027ae:	d001      	beq.n	80027b4 <cleanup_stdio+0x10>
 80027b0:	f001 f800 	bl	80037b4 <_fflush_r>
 80027b4:	68a1      	ldr	r1, [r4, #8]
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <cleanup_stdio+0x38>)
 80027b8:	4299      	cmp	r1, r3
 80027ba:	d002      	beq.n	80027c2 <cleanup_stdio+0x1e>
 80027bc:	4620      	mov	r0, r4
 80027be:	f000 fff9 	bl	80037b4 <_fflush_r>
 80027c2:	68e1      	ldr	r1, [r4, #12]
 80027c4:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <cleanup_stdio+0x3c>)
 80027c6:	4299      	cmp	r1, r3
 80027c8:	d004      	beq.n	80027d4 <cleanup_stdio+0x30>
 80027ca:	4620      	mov	r0, r4
 80027cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d0:	f000 bff0 	b.w	80037b4 <_fflush_r>
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	200000d4 	.word	0x200000d4
 80027dc:	2000013c 	.word	0x2000013c
 80027e0:	200001a4 	.word	0x200001a4

080027e4 <global_stdio_init.part.0>:
 80027e4:	b510      	push	{r4, lr}
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <global_stdio_init.part.0+0x30>)
 80027e8:	4c0b      	ldr	r4, [pc, #44]	@ (8002818 <global_stdio_init.part.0+0x34>)
 80027ea:	4a0c      	ldr	r2, [pc, #48]	@ (800281c <global_stdio_init.part.0+0x38>)
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	4620      	mov	r0, r4
 80027f0:	2200      	movs	r2, #0
 80027f2:	2104      	movs	r1, #4
 80027f4:	f7ff ff94 	bl	8002720 <std>
 80027f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80027fc:	2201      	movs	r2, #1
 80027fe:	2109      	movs	r1, #9
 8002800:	f7ff ff8e 	bl	8002720 <std>
 8002804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002808:	2202      	movs	r2, #2
 800280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800280e:	2112      	movs	r1, #18
 8002810:	f7ff bf86 	b.w	8002720 <std>
 8002814:	2000020c 	.word	0x2000020c
 8002818:	200000d4 	.word	0x200000d4
 800281c:	0800278d 	.word	0x0800278d

08002820 <__sfp_lock_acquire>:
 8002820:	4801      	ldr	r0, [pc, #4]	@ (8002828 <__sfp_lock_acquire+0x8>)
 8002822:	f000 ba20 	b.w	8002c66 <__retarget_lock_acquire_recursive>
 8002826:	bf00      	nop
 8002828:	20000215 	.word	0x20000215

0800282c <__sfp_lock_release>:
 800282c:	4801      	ldr	r0, [pc, #4]	@ (8002834 <__sfp_lock_release+0x8>)
 800282e:	f000 ba1b 	b.w	8002c68 <__retarget_lock_release_recursive>
 8002832:	bf00      	nop
 8002834:	20000215 	.word	0x20000215

08002838 <__sinit>:
 8002838:	b510      	push	{r4, lr}
 800283a:	4604      	mov	r4, r0
 800283c:	f7ff fff0 	bl	8002820 <__sfp_lock_acquire>
 8002840:	6a23      	ldr	r3, [r4, #32]
 8002842:	b11b      	cbz	r3, 800284c <__sinit+0x14>
 8002844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002848:	f7ff bff0 	b.w	800282c <__sfp_lock_release>
 800284c:	4b04      	ldr	r3, [pc, #16]	@ (8002860 <__sinit+0x28>)
 800284e:	6223      	str	r3, [r4, #32]
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <__sinit+0x2c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f5      	bne.n	8002844 <__sinit+0xc>
 8002858:	f7ff ffc4 	bl	80027e4 <global_stdio_init.part.0>
 800285c:	e7f2      	b.n	8002844 <__sinit+0xc>
 800285e:	bf00      	nop
 8002860:	080027a5 	.word	0x080027a5
 8002864:	2000020c 	.word	0x2000020c

08002868 <_fwalk_sglue>:
 8002868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800286c:	4607      	mov	r7, r0
 800286e:	4688      	mov	r8, r1
 8002870:	4614      	mov	r4, r2
 8002872:	2600      	movs	r6, #0
 8002874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002878:	f1b9 0901 	subs.w	r9, r9, #1
 800287c:	d505      	bpl.n	800288a <_fwalk_sglue+0x22>
 800287e:	6824      	ldr	r4, [r4, #0]
 8002880:	2c00      	cmp	r4, #0
 8002882:	d1f7      	bne.n	8002874 <_fwalk_sglue+0xc>
 8002884:	4630      	mov	r0, r6
 8002886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800288a:	89ab      	ldrh	r3, [r5, #12]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d907      	bls.n	80028a0 <_fwalk_sglue+0x38>
 8002890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002894:	3301      	adds	r3, #1
 8002896:	d003      	beq.n	80028a0 <_fwalk_sglue+0x38>
 8002898:	4629      	mov	r1, r5
 800289a:	4638      	mov	r0, r7
 800289c:	47c0      	blx	r8
 800289e:	4306      	orrs	r6, r0
 80028a0:	3568      	adds	r5, #104	@ 0x68
 80028a2:	e7e9      	b.n	8002878 <_fwalk_sglue+0x10>

080028a4 <iprintf>:
 80028a4:	b40f      	push	{r0, r1, r2, r3}
 80028a6:	b507      	push	{r0, r1, r2, lr}
 80028a8:	4906      	ldr	r1, [pc, #24]	@ (80028c4 <iprintf+0x20>)
 80028aa:	ab04      	add	r3, sp, #16
 80028ac:	6808      	ldr	r0, [r1, #0]
 80028ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80028b2:	6881      	ldr	r1, [r0, #8]
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f000 fc53 	bl	8003160 <_vfiprintf_r>
 80028ba:	b003      	add	sp, #12
 80028bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80028c0:	b004      	add	sp, #16
 80028c2:	4770      	bx	lr
 80028c4:	20000018 	.word	0x20000018

080028c8 <_puts_r>:
 80028c8:	6a03      	ldr	r3, [r0, #32]
 80028ca:	b570      	push	{r4, r5, r6, lr}
 80028cc:	6884      	ldr	r4, [r0, #8]
 80028ce:	4605      	mov	r5, r0
 80028d0:	460e      	mov	r6, r1
 80028d2:	b90b      	cbnz	r3, 80028d8 <_puts_r+0x10>
 80028d4:	f7ff ffb0 	bl	8002838 <__sinit>
 80028d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028da:	07db      	lsls	r3, r3, #31
 80028dc:	d405      	bmi.n	80028ea <_puts_r+0x22>
 80028de:	89a3      	ldrh	r3, [r4, #12]
 80028e0:	0598      	lsls	r0, r3, #22
 80028e2:	d402      	bmi.n	80028ea <_puts_r+0x22>
 80028e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028e6:	f000 f9be 	bl	8002c66 <__retarget_lock_acquire_recursive>
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	0719      	lsls	r1, r3, #28
 80028ee:	d502      	bpl.n	80028f6 <_puts_r+0x2e>
 80028f0:	6923      	ldr	r3, [r4, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d135      	bne.n	8002962 <_puts_r+0x9a>
 80028f6:	4621      	mov	r1, r4
 80028f8:	4628      	mov	r0, r5
 80028fa:	f000 f8e5 	bl	8002ac8 <__swsetup_r>
 80028fe:	b380      	cbz	r0, 8002962 <_puts_r+0x9a>
 8002900:	f04f 35ff 	mov.w	r5, #4294967295
 8002904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002906:	07da      	lsls	r2, r3, #31
 8002908:	d405      	bmi.n	8002916 <_puts_r+0x4e>
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	059b      	lsls	r3, r3, #22
 800290e:	d402      	bmi.n	8002916 <_puts_r+0x4e>
 8002910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002912:	f000 f9a9 	bl	8002c68 <__retarget_lock_release_recursive>
 8002916:	4628      	mov	r0, r5
 8002918:	bd70      	pop	{r4, r5, r6, pc}
 800291a:	2b00      	cmp	r3, #0
 800291c:	da04      	bge.n	8002928 <_puts_r+0x60>
 800291e:	69a2      	ldr	r2, [r4, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	dc17      	bgt.n	8002954 <_puts_r+0x8c>
 8002924:	290a      	cmp	r1, #10
 8002926:	d015      	beq.n	8002954 <_puts_r+0x8c>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	6022      	str	r2, [r4, #0]
 800292e:	7019      	strb	r1, [r3, #0]
 8002930:	68a3      	ldr	r3, [r4, #8]
 8002932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002936:	3b01      	subs	r3, #1
 8002938:	60a3      	str	r3, [r4, #8]
 800293a:	2900      	cmp	r1, #0
 800293c:	d1ed      	bne.n	800291a <_puts_r+0x52>
 800293e:	2b00      	cmp	r3, #0
 8002940:	da11      	bge.n	8002966 <_puts_r+0x9e>
 8002942:	4622      	mov	r2, r4
 8002944:	210a      	movs	r1, #10
 8002946:	4628      	mov	r0, r5
 8002948:	f000 f87f 	bl	8002a4a <__swbuf_r>
 800294c:	3001      	adds	r0, #1
 800294e:	d0d7      	beq.n	8002900 <_puts_r+0x38>
 8002950:	250a      	movs	r5, #10
 8002952:	e7d7      	b.n	8002904 <_puts_r+0x3c>
 8002954:	4622      	mov	r2, r4
 8002956:	4628      	mov	r0, r5
 8002958:	f000 f877 	bl	8002a4a <__swbuf_r>
 800295c:	3001      	adds	r0, #1
 800295e:	d1e7      	bne.n	8002930 <_puts_r+0x68>
 8002960:	e7ce      	b.n	8002900 <_puts_r+0x38>
 8002962:	3e01      	subs	r6, #1
 8002964:	e7e4      	b.n	8002930 <_puts_r+0x68>
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	6022      	str	r2, [r4, #0]
 800296c:	220a      	movs	r2, #10
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e7ee      	b.n	8002950 <_puts_r+0x88>
	...

08002974 <puts>:
 8002974:	4b02      	ldr	r3, [pc, #8]	@ (8002980 <puts+0xc>)
 8002976:	4601      	mov	r1, r0
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	f7ff bfa5 	b.w	80028c8 <_puts_r>
 800297e:	bf00      	nop
 8002980:	20000018 	.word	0x20000018

08002984 <siprintf>:
 8002984:	b40e      	push	{r1, r2, r3}
 8002986:	b500      	push	{lr}
 8002988:	b09c      	sub	sp, #112	@ 0x70
 800298a:	ab1d      	add	r3, sp, #116	@ 0x74
 800298c:	9002      	str	r0, [sp, #8]
 800298e:	9006      	str	r0, [sp, #24]
 8002990:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002994:	4809      	ldr	r0, [pc, #36]	@ (80029bc <siprintf+0x38>)
 8002996:	9107      	str	r1, [sp, #28]
 8002998:	9104      	str	r1, [sp, #16]
 800299a:	4909      	ldr	r1, [pc, #36]	@ (80029c0 <siprintf+0x3c>)
 800299c:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a0:	9105      	str	r1, [sp, #20]
 80029a2:	6800      	ldr	r0, [r0, #0]
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	a902      	add	r1, sp, #8
 80029a8:	f000 fab4 	bl	8002f14 <_svfiprintf_r>
 80029ac:	9b02      	ldr	r3, [sp, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	b01c      	add	sp, #112	@ 0x70
 80029b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029b8:	b003      	add	sp, #12
 80029ba:	4770      	bx	lr
 80029bc:	20000018 	.word	0x20000018
 80029c0:	ffff0208 	.word	0xffff0208

080029c4 <__sread>:
 80029c4:	b510      	push	{r4, lr}
 80029c6:	460c      	mov	r4, r1
 80029c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029cc:	f000 f8fc 	bl	8002bc8 <_read_r>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	bfab      	itete	ge
 80029d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80029d6:	89a3      	ldrhlt	r3, [r4, #12]
 80029d8:	181b      	addge	r3, r3, r0
 80029da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80029de:	bfac      	ite	ge
 80029e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80029e2:	81a3      	strhlt	r3, [r4, #12]
 80029e4:	bd10      	pop	{r4, pc}

080029e6 <__swrite>:
 80029e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ea:	461f      	mov	r7, r3
 80029ec:	898b      	ldrh	r3, [r1, #12]
 80029ee:	05db      	lsls	r3, r3, #23
 80029f0:	4605      	mov	r5, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	4616      	mov	r6, r2
 80029f6:	d505      	bpl.n	8002a04 <__swrite+0x1e>
 80029f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029fc:	2302      	movs	r3, #2
 80029fe:	2200      	movs	r2, #0
 8002a00:	f000 f8d0 	bl	8002ba4 <_lseek_r>
 8002a04:	89a3      	ldrh	r3, [r4, #12]
 8002a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a0e:	81a3      	strh	r3, [r4, #12]
 8002a10:	4632      	mov	r2, r6
 8002a12:	463b      	mov	r3, r7
 8002a14:	4628      	mov	r0, r5
 8002a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a1a:	f000 b8e7 	b.w	8002bec <_write_r>

08002a1e <__sseek>:
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	460c      	mov	r4, r1
 8002a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a26:	f000 f8bd 	bl	8002ba4 <_lseek_r>
 8002a2a:	1c43      	adds	r3, r0, #1
 8002a2c:	89a3      	ldrh	r3, [r4, #12]
 8002a2e:	bf15      	itete	ne
 8002a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a3a:	81a3      	strheq	r3, [r4, #12]
 8002a3c:	bf18      	it	ne
 8002a3e:	81a3      	strhne	r3, [r4, #12]
 8002a40:	bd10      	pop	{r4, pc}

08002a42 <__sclose>:
 8002a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a46:	f000 b89d 	b.w	8002b84 <_close_r>

08002a4a <__swbuf_r>:
 8002a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4c:	460e      	mov	r6, r1
 8002a4e:	4614      	mov	r4, r2
 8002a50:	4605      	mov	r5, r0
 8002a52:	b118      	cbz	r0, 8002a5c <__swbuf_r+0x12>
 8002a54:	6a03      	ldr	r3, [r0, #32]
 8002a56:	b90b      	cbnz	r3, 8002a5c <__swbuf_r+0x12>
 8002a58:	f7ff feee 	bl	8002838 <__sinit>
 8002a5c:	69a3      	ldr	r3, [r4, #24]
 8002a5e:	60a3      	str	r3, [r4, #8]
 8002a60:	89a3      	ldrh	r3, [r4, #12]
 8002a62:	071a      	lsls	r2, r3, #28
 8002a64:	d501      	bpl.n	8002a6a <__swbuf_r+0x20>
 8002a66:	6923      	ldr	r3, [r4, #16]
 8002a68:	b943      	cbnz	r3, 8002a7c <__swbuf_r+0x32>
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f000 f82b 	bl	8002ac8 <__swsetup_r>
 8002a72:	b118      	cbz	r0, 8002a7c <__swbuf_r+0x32>
 8002a74:	f04f 37ff 	mov.w	r7, #4294967295
 8002a78:	4638      	mov	r0, r7
 8002a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	6922      	ldr	r2, [r4, #16]
 8002a80:	1a98      	subs	r0, r3, r2
 8002a82:	6963      	ldr	r3, [r4, #20]
 8002a84:	b2f6      	uxtb	r6, r6
 8002a86:	4283      	cmp	r3, r0
 8002a88:	4637      	mov	r7, r6
 8002a8a:	dc05      	bgt.n	8002a98 <__swbuf_r+0x4e>
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 fe90 	bl	80037b4 <_fflush_r>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1ed      	bne.n	8002a74 <__swbuf_r+0x2a>
 8002a98:	68a3      	ldr	r3, [r4, #8]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	60a3      	str	r3, [r4, #8]
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	6022      	str	r2, [r4, #0]
 8002aa4:	701e      	strb	r6, [r3, #0]
 8002aa6:	6962      	ldr	r2, [r4, #20]
 8002aa8:	1c43      	adds	r3, r0, #1
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d004      	beq.n	8002ab8 <__swbuf_r+0x6e>
 8002aae:	89a3      	ldrh	r3, [r4, #12]
 8002ab0:	07db      	lsls	r3, r3, #31
 8002ab2:	d5e1      	bpl.n	8002a78 <__swbuf_r+0x2e>
 8002ab4:	2e0a      	cmp	r6, #10
 8002ab6:	d1df      	bne.n	8002a78 <__swbuf_r+0x2e>
 8002ab8:	4621      	mov	r1, r4
 8002aba:	4628      	mov	r0, r5
 8002abc:	f000 fe7a 	bl	80037b4 <_fflush_r>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d0d9      	beq.n	8002a78 <__swbuf_r+0x2e>
 8002ac4:	e7d6      	b.n	8002a74 <__swbuf_r+0x2a>
	...

08002ac8 <__swsetup_r>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <__swsetup_r+0xa8>)
 8002acc:	4605      	mov	r5, r0
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	b118      	cbz	r0, 8002adc <__swsetup_r+0x14>
 8002ad4:	6a03      	ldr	r3, [r0, #32]
 8002ad6:	b90b      	cbnz	r3, 8002adc <__swsetup_r+0x14>
 8002ad8:	f7ff feae 	bl	8002838 <__sinit>
 8002adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae0:	0719      	lsls	r1, r3, #28
 8002ae2:	d422      	bmi.n	8002b2a <__swsetup_r+0x62>
 8002ae4:	06da      	lsls	r2, r3, #27
 8002ae6:	d407      	bmi.n	8002af8 <__swsetup_r+0x30>
 8002ae8:	2209      	movs	r2, #9
 8002aea:	602a      	str	r2, [r5, #0]
 8002aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002af0:	81a3      	strh	r3, [r4, #12]
 8002af2:	f04f 30ff 	mov.w	r0, #4294967295
 8002af6:	e033      	b.n	8002b60 <__swsetup_r+0x98>
 8002af8:	0758      	lsls	r0, r3, #29
 8002afa:	d512      	bpl.n	8002b22 <__swsetup_r+0x5a>
 8002afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002afe:	b141      	cbz	r1, 8002b12 <__swsetup_r+0x4a>
 8002b00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b04:	4299      	cmp	r1, r3
 8002b06:	d002      	beq.n	8002b0e <__swsetup_r+0x46>
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f000 f8af 	bl	8002c6c <_free_r>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b12:	89a3      	ldrh	r3, [r4, #12]
 8002b14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b18:	81a3      	strh	r3, [r4, #12]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6063      	str	r3, [r4, #4]
 8002b1e:	6923      	ldr	r3, [r4, #16]
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	f043 0308 	orr.w	r3, r3, #8
 8002b28:	81a3      	strh	r3, [r4, #12]
 8002b2a:	6923      	ldr	r3, [r4, #16]
 8002b2c:	b94b      	cbnz	r3, 8002b42 <__swsetup_r+0x7a>
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b38:	d003      	beq.n	8002b42 <__swsetup_r+0x7a>
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f000 fe87 	bl	8003850 <__smakebuf_r>
 8002b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b46:	f013 0201 	ands.w	r2, r3, #1
 8002b4a:	d00a      	beq.n	8002b62 <__swsetup_r+0x9a>
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	60a2      	str	r2, [r4, #8]
 8002b50:	6962      	ldr	r2, [r4, #20]
 8002b52:	4252      	negs	r2, r2
 8002b54:	61a2      	str	r2, [r4, #24]
 8002b56:	6922      	ldr	r2, [r4, #16]
 8002b58:	b942      	cbnz	r2, 8002b6c <__swsetup_r+0xa4>
 8002b5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b5e:	d1c5      	bne.n	8002aec <__swsetup_r+0x24>
 8002b60:	bd38      	pop	{r3, r4, r5, pc}
 8002b62:	0799      	lsls	r1, r3, #30
 8002b64:	bf58      	it	pl
 8002b66:	6962      	ldrpl	r2, [r4, #20]
 8002b68:	60a2      	str	r2, [r4, #8]
 8002b6a:	e7f4      	b.n	8002b56 <__swsetup_r+0x8e>
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	e7f7      	b.n	8002b60 <__swsetup_r+0x98>
 8002b70:	20000018 	.word	0x20000018

08002b74 <memset>:
 8002b74:	4402      	add	r2, r0
 8002b76:	4603      	mov	r3, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <memset+0xa>
 8002b7c:	4770      	bx	lr
 8002b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b82:	e7f9      	b.n	8002b78 <memset+0x4>

08002b84 <_close_r>:
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	4d06      	ldr	r5, [pc, #24]	@ (8002ba0 <_close_r+0x1c>)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	602b      	str	r3, [r5, #0]
 8002b90:	f7fe f94a 	bl	8000e28 <_close>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d102      	bne.n	8002b9e <_close_r+0x1a>
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	b103      	cbz	r3, 8002b9e <_close_r+0x1a>
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ba0:	20000210 	.word	0x20000210

08002ba4 <_lseek_r>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4d07      	ldr	r5, [pc, #28]	@ (8002bc4 <_lseek_r+0x20>)
 8002ba8:	4604      	mov	r4, r0
 8002baa:	4608      	mov	r0, r1
 8002bac:	4611      	mov	r1, r2
 8002bae:	2200      	movs	r2, #0
 8002bb0:	602a      	str	r2, [r5, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f7fe f95f 	bl	8000e76 <_lseek>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d102      	bne.n	8002bc2 <_lseek_r+0x1e>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	b103      	cbz	r3, 8002bc2 <_lseek_r+0x1e>
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	20000210 	.word	0x20000210

08002bc8 <_read_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4d07      	ldr	r5, [pc, #28]	@ (8002be8 <_read_r+0x20>)
 8002bcc:	4604      	mov	r4, r0
 8002bce:	4608      	mov	r0, r1
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	602a      	str	r2, [r5, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f7fe f909 	bl	8000dee <_read>
 8002bdc:	1c43      	adds	r3, r0, #1
 8002bde:	d102      	bne.n	8002be6 <_read_r+0x1e>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	b103      	cbz	r3, 8002be6 <_read_r+0x1e>
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	bd38      	pop	{r3, r4, r5, pc}
 8002be8:	20000210 	.word	0x20000210

08002bec <_write_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4d07      	ldr	r5, [pc, #28]	@ (8002c0c <_write_r+0x20>)
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	602a      	str	r2, [r5, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f7fd feae 	bl	800095c <_write>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d102      	bne.n	8002c0a <_write_r+0x1e>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	b103      	cbz	r3, 8002c0a <_write_r+0x1e>
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
 8002c0c:	20000210 	.word	0x20000210

08002c10 <__errno>:
 8002c10:	4b01      	ldr	r3, [pc, #4]	@ (8002c18 <__errno+0x8>)
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000018 	.word	0x20000018

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c54 <__libc_init_array+0x38>)
 8002c20:	4c0d      	ldr	r4, [pc, #52]	@ (8002c58 <__libc_init_array+0x3c>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	2600      	movs	r6, #0
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8002c5c <__libc_init_array+0x40>)
 8002c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8002c60 <__libc_init_array+0x44>)
 8002c30:	f000 feda 	bl	80039e8 <_init>
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	2600      	movs	r6, #0
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	08003b04 	.word	0x08003b04
 8002c58:	08003b04 	.word	0x08003b04
 8002c5c:	08003b04 	.word	0x08003b04
 8002c60:	08003b08 	.word	0x08003b08

08002c64 <__retarget_lock_init_recursive>:
 8002c64:	4770      	bx	lr

08002c66 <__retarget_lock_acquire_recursive>:
 8002c66:	4770      	bx	lr

08002c68 <__retarget_lock_release_recursive>:
 8002c68:	4770      	bx	lr
	...

08002c6c <_free_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	4605      	mov	r5, r0
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d041      	beq.n	8002cf8 <_free_r+0x8c>
 8002c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c78:	1f0c      	subs	r4, r1, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bfb8      	it	lt
 8002c7e:	18e4      	addlt	r4, r4, r3
 8002c80:	f000 f8e0 	bl	8002e44 <__malloc_lock>
 8002c84:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <_free_r+0x90>)
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	b933      	cbnz	r3, 8002c98 <_free_r+0x2c>
 8002c8a:	6063      	str	r3, [r4, #4]
 8002c8c:	6014      	str	r4, [r2, #0]
 8002c8e:	4628      	mov	r0, r5
 8002c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c94:	f000 b8dc 	b.w	8002e50 <__malloc_unlock>
 8002c98:	42a3      	cmp	r3, r4
 8002c9a:	d908      	bls.n	8002cae <_free_r+0x42>
 8002c9c:	6820      	ldr	r0, [r4, #0]
 8002c9e:	1821      	adds	r1, r4, r0
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	bf01      	itttt	eq
 8002ca4:	6819      	ldreq	r1, [r3, #0]
 8002ca6:	685b      	ldreq	r3, [r3, #4]
 8002ca8:	1809      	addeq	r1, r1, r0
 8002caa:	6021      	streq	r1, [r4, #0]
 8002cac:	e7ed      	b.n	8002c8a <_free_r+0x1e>
 8002cae:	461a      	mov	r2, r3
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	b10b      	cbz	r3, 8002cb8 <_free_r+0x4c>
 8002cb4:	42a3      	cmp	r3, r4
 8002cb6:	d9fa      	bls.n	8002cae <_free_r+0x42>
 8002cb8:	6811      	ldr	r1, [r2, #0]
 8002cba:	1850      	adds	r0, r2, r1
 8002cbc:	42a0      	cmp	r0, r4
 8002cbe:	d10b      	bne.n	8002cd8 <_free_r+0x6c>
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	4401      	add	r1, r0
 8002cc4:	1850      	adds	r0, r2, r1
 8002cc6:	4283      	cmp	r3, r0
 8002cc8:	6011      	str	r1, [r2, #0]
 8002cca:	d1e0      	bne.n	8002c8e <_free_r+0x22>
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	6053      	str	r3, [r2, #4]
 8002cd2:	4408      	add	r0, r1
 8002cd4:	6010      	str	r0, [r2, #0]
 8002cd6:	e7da      	b.n	8002c8e <_free_r+0x22>
 8002cd8:	d902      	bls.n	8002ce0 <_free_r+0x74>
 8002cda:	230c      	movs	r3, #12
 8002cdc:	602b      	str	r3, [r5, #0]
 8002cde:	e7d6      	b.n	8002c8e <_free_r+0x22>
 8002ce0:	6820      	ldr	r0, [r4, #0]
 8002ce2:	1821      	adds	r1, r4, r0
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	bf04      	itt	eq
 8002ce8:	6819      	ldreq	r1, [r3, #0]
 8002cea:	685b      	ldreq	r3, [r3, #4]
 8002cec:	6063      	str	r3, [r4, #4]
 8002cee:	bf04      	itt	eq
 8002cf0:	1809      	addeq	r1, r1, r0
 8002cf2:	6021      	streq	r1, [r4, #0]
 8002cf4:	6054      	str	r4, [r2, #4]
 8002cf6:	e7ca      	b.n	8002c8e <_free_r+0x22>
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000021c 	.word	0x2000021c

08002d00 <sbrk_aligned>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4e0f      	ldr	r6, [pc, #60]	@ (8002d40 <sbrk_aligned+0x40>)
 8002d04:	460c      	mov	r4, r1
 8002d06:	6831      	ldr	r1, [r6, #0]
 8002d08:	4605      	mov	r5, r0
 8002d0a:	b911      	cbnz	r1, 8002d12 <sbrk_aligned+0x12>
 8002d0c:	f000 fe18 	bl	8003940 <_sbrk_r>
 8002d10:	6030      	str	r0, [r6, #0]
 8002d12:	4621      	mov	r1, r4
 8002d14:	4628      	mov	r0, r5
 8002d16:	f000 fe13 	bl	8003940 <_sbrk_r>
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	d103      	bne.n	8002d26 <sbrk_aligned+0x26>
 8002d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8002d22:	4620      	mov	r0, r4
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	1cc4      	adds	r4, r0, #3
 8002d28:	f024 0403 	bic.w	r4, r4, #3
 8002d2c:	42a0      	cmp	r0, r4
 8002d2e:	d0f8      	beq.n	8002d22 <sbrk_aligned+0x22>
 8002d30:	1a21      	subs	r1, r4, r0
 8002d32:	4628      	mov	r0, r5
 8002d34:	f000 fe04 	bl	8003940 <_sbrk_r>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d1f2      	bne.n	8002d22 <sbrk_aligned+0x22>
 8002d3c:	e7ef      	b.n	8002d1e <sbrk_aligned+0x1e>
 8002d3e:	bf00      	nop
 8002d40:	20000218 	.word	0x20000218

08002d44 <_malloc_r>:
 8002d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d48:	1ccd      	adds	r5, r1, #3
 8002d4a:	f025 0503 	bic.w	r5, r5, #3
 8002d4e:	3508      	adds	r5, #8
 8002d50:	2d0c      	cmp	r5, #12
 8002d52:	bf38      	it	cc
 8002d54:	250c      	movcc	r5, #12
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	4606      	mov	r6, r0
 8002d5a:	db01      	blt.n	8002d60 <_malloc_r+0x1c>
 8002d5c:	42a9      	cmp	r1, r5
 8002d5e:	d904      	bls.n	8002d6a <_malloc_r+0x26>
 8002d60:	230c      	movs	r3, #12
 8002d62:	6033      	str	r3, [r6, #0]
 8002d64:	2000      	movs	r0, #0
 8002d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e40 <_malloc_r+0xfc>
 8002d6e:	f000 f869 	bl	8002e44 <__malloc_lock>
 8002d72:	f8d8 3000 	ldr.w	r3, [r8]
 8002d76:	461c      	mov	r4, r3
 8002d78:	bb44      	cbnz	r4, 8002dcc <_malloc_r+0x88>
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f7ff ffbf 	bl	8002d00 <sbrk_aligned>
 8002d82:	1c43      	adds	r3, r0, #1
 8002d84:	4604      	mov	r4, r0
 8002d86:	d158      	bne.n	8002e3a <_malloc_r+0xf6>
 8002d88:	f8d8 4000 	ldr.w	r4, [r8]
 8002d8c:	4627      	mov	r7, r4
 8002d8e:	2f00      	cmp	r7, #0
 8002d90:	d143      	bne.n	8002e1a <_malloc_r+0xd6>
 8002d92:	2c00      	cmp	r4, #0
 8002d94:	d04b      	beq.n	8002e2e <_malloc_r+0xea>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	4639      	mov	r1, r7
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	eb04 0903 	add.w	r9, r4, r3
 8002da0:	f000 fdce 	bl	8003940 <_sbrk_r>
 8002da4:	4581      	cmp	r9, r0
 8002da6:	d142      	bne.n	8002e2e <_malloc_r+0xea>
 8002da8:	6821      	ldr	r1, [r4, #0]
 8002daa:	1a6d      	subs	r5, r5, r1
 8002dac:	4629      	mov	r1, r5
 8002dae:	4630      	mov	r0, r6
 8002db0:	f7ff ffa6 	bl	8002d00 <sbrk_aligned>
 8002db4:	3001      	adds	r0, #1
 8002db6:	d03a      	beq.n	8002e2e <_malloc_r+0xea>
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	442b      	add	r3, r5
 8002dbc:	6023      	str	r3, [r4, #0]
 8002dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	bb62      	cbnz	r2, 8002e20 <_malloc_r+0xdc>
 8002dc6:	f8c8 7000 	str.w	r7, [r8]
 8002dca:	e00f      	b.n	8002dec <_malloc_r+0xa8>
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	1b52      	subs	r2, r2, r5
 8002dd0:	d420      	bmi.n	8002e14 <_malloc_r+0xd0>
 8002dd2:	2a0b      	cmp	r2, #11
 8002dd4:	d917      	bls.n	8002e06 <_malloc_r+0xc2>
 8002dd6:	1961      	adds	r1, r4, r5
 8002dd8:	42a3      	cmp	r3, r4
 8002dda:	6025      	str	r5, [r4, #0]
 8002ddc:	bf18      	it	ne
 8002dde:	6059      	strne	r1, [r3, #4]
 8002de0:	6863      	ldr	r3, [r4, #4]
 8002de2:	bf08      	it	eq
 8002de4:	f8c8 1000 	streq.w	r1, [r8]
 8002de8:	5162      	str	r2, [r4, r5]
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	4630      	mov	r0, r6
 8002dee:	f000 f82f 	bl	8002e50 <__malloc_unlock>
 8002df2:	f104 000b 	add.w	r0, r4, #11
 8002df6:	1d23      	adds	r3, r4, #4
 8002df8:	f020 0007 	bic.w	r0, r0, #7
 8002dfc:	1ac2      	subs	r2, r0, r3
 8002dfe:	bf1c      	itt	ne
 8002e00:	1a1b      	subne	r3, r3, r0
 8002e02:	50a3      	strne	r3, [r4, r2]
 8002e04:	e7af      	b.n	8002d66 <_malloc_r+0x22>
 8002e06:	6862      	ldr	r2, [r4, #4]
 8002e08:	42a3      	cmp	r3, r4
 8002e0a:	bf0c      	ite	eq
 8002e0c:	f8c8 2000 	streq.w	r2, [r8]
 8002e10:	605a      	strne	r2, [r3, #4]
 8002e12:	e7eb      	b.n	8002dec <_malloc_r+0xa8>
 8002e14:	4623      	mov	r3, r4
 8002e16:	6864      	ldr	r4, [r4, #4]
 8002e18:	e7ae      	b.n	8002d78 <_malloc_r+0x34>
 8002e1a:	463c      	mov	r4, r7
 8002e1c:	687f      	ldr	r7, [r7, #4]
 8002e1e:	e7b6      	b.n	8002d8e <_malloc_r+0x4a>
 8002e20:	461a      	mov	r2, r3
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	42a3      	cmp	r3, r4
 8002e26:	d1fb      	bne.n	8002e20 <_malloc_r+0xdc>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6053      	str	r3, [r2, #4]
 8002e2c:	e7de      	b.n	8002dec <_malloc_r+0xa8>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	6033      	str	r3, [r6, #0]
 8002e32:	4630      	mov	r0, r6
 8002e34:	f000 f80c 	bl	8002e50 <__malloc_unlock>
 8002e38:	e794      	b.n	8002d64 <_malloc_r+0x20>
 8002e3a:	6005      	str	r5, [r0, #0]
 8002e3c:	e7d6      	b.n	8002dec <_malloc_r+0xa8>
 8002e3e:	bf00      	nop
 8002e40:	2000021c 	.word	0x2000021c

08002e44 <__malloc_lock>:
 8002e44:	4801      	ldr	r0, [pc, #4]	@ (8002e4c <__malloc_lock+0x8>)
 8002e46:	f7ff bf0e 	b.w	8002c66 <__retarget_lock_acquire_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	20000214 	.word	0x20000214

08002e50 <__malloc_unlock>:
 8002e50:	4801      	ldr	r0, [pc, #4]	@ (8002e58 <__malloc_unlock+0x8>)
 8002e52:	f7ff bf09 	b.w	8002c68 <__retarget_lock_release_recursive>
 8002e56:	bf00      	nop
 8002e58:	20000214 	.word	0x20000214

08002e5c <__ssputs_r>:
 8002e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	688e      	ldr	r6, [r1, #8]
 8002e62:	461f      	mov	r7, r3
 8002e64:	42be      	cmp	r6, r7
 8002e66:	680b      	ldr	r3, [r1, #0]
 8002e68:	4682      	mov	sl, r0
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	4690      	mov	r8, r2
 8002e6e:	d82d      	bhi.n	8002ecc <__ssputs_r+0x70>
 8002e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e78:	d026      	beq.n	8002ec8 <__ssputs_r+0x6c>
 8002e7a:	6965      	ldr	r5, [r4, #20]
 8002e7c:	6909      	ldr	r1, [r1, #16]
 8002e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e82:	eba3 0901 	sub.w	r9, r3, r1
 8002e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e8a:	1c7b      	adds	r3, r7, #1
 8002e8c:	444b      	add	r3, r9
 8002e8e:	106d      	asrs	r5, r5, #1
 8002e90:	429d      	cmp	r5, r3
 8002e92:	bf38      	it	cc
 8002e94:	461d      	movcc	r5, r3
 8002e96:	0553      	lsls	r3, r2, #21
 8002e98:	d527      	bpl.n	8002eea <__ssputs_r+0x8e>
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f7ff ff52 	bl	8002d44 <_malloc_r>
 8002ea0:	4606      	mov	r6, r0
 8002ea2:	b360      	cbz	r0, 8002efe <__ssputs_r+0xa2>
 8002ea4:	6921      	ldr	r1, [r4, #16]
 8002ea6:	464a      	mov	r2, r9
 8002ea8:	f000 fd5a 	bl	8003960 <memcpy>
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	6126      	str	r6, [r4, #16]
 8002eba:	6165      	str	r5, [r4, #20]
 8002ebc:	444e      	add	r6, r9
 8002ebe:	eba5 0509 	sub.w	r5, r5, r9
 8002ec2:	6026      	str	r6, [r4, #0]
 8002ec4:	60a5      	str	r5, [r4, #8]
 8002ec6:	463e      	mov	r6, r7
 8002ec8:	42be      	cmp	r6, r7
 8002eca:	d900      	bls.n	8002ece <__ssputs_r+0x72>
 8002ecc:	463e      	mov	r6, r7
 8002ece:	6820      	ldr	r0, [r4, #0]
 8002ed0:	4632      	mov	r2, r6
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	f000 fcf8 	bl	80038c8 <memmove>
 8002ed8:	68a3      	ldr	r3, [r4, #8]
 8002eda:	1b9b      	subs	r3, r3, r6
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	4433      	add	r3, r6
 8002ee2:	6023      	str	r3, [r4, #0]
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eea:	462a      	mov	r2, r5
 8002eec:	f000 fd46 	bl	800397c <_realloc_r>
 8002ef0:	4606      	mov	r6, r0
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d1e0      	bne.n	8002eb8 <__ssputs_r+0x5c>
 8002ef6:	6921      	ldr	r1, [r4, #16]
 8002ef8:	4650      	mov	r0, sl
 8002efa:	f7ff feb7 	bl	8002c6c <_free_r>
 8002efe:	230c      	movs	r3, #12
 8002f00:	f8ca 3000 	str.w	r3, [sl]
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f0a:	81a3      	strh	r3, [r4, #12]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	e7e9      	b.n	8002ee6 <__ssputs_r+0x8a>
	...

08002f14 <_svfiprintf_r>:
 8002f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f18:	4698      	mov	r8, r3
 8002f1a:	898b      	ldrh	r3, [r1, #12]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	b09d      	sub	sp, #116	@ 0x74
 8002f20:	4607      	mov	r7, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	4614      	mov	r4, r2
 8002f26:	d510      	bpl.n	8002f4a <_svfiprintf_r+0x36>
 8002f28:	690b      	ldr	r3, [r1, #16]
 8002f2a:	b973      	cbnz	r3, 8002f4a <_svfiprintf_r+0x36>
 8002f2c:	2140      	movs	r1, #64	@ 0x40
 8002f2e:	f7ff ff09 	bl	8002d44 <_malloc_r>
 8002f32:	6028      	str	r0, [r5, #0]
 8002f34:	6128      	str	r0, [r5, #16]
 8002f36:	b930      	cbnz	r0, 8002f46 <_svfiprintf_r+0x32>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	b01d      	add	sp, #116	@ 0x74
 8002f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f46:	2340      	movs	r3, #64	@ 0x40
 8002f48:	616b      	str	r3, [r5, #20]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f4e:	2320      	movs	r3, #32
 8002f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f58:	2330      	movs	r3, #48	@ 0x30
 8002f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80030f8 <_svfiprintf_r+0x1e4>
 8002f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f62:	f04f 0901 	mov.w	r9, #1
 8002f66:	4623      	mov	r3, r4
 8002f68:	469a      	mov	sl, r3
 8002f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f6e:	b10a      	cbz	r2, 8002f74 <_svfiprintf_r+0x60>
 8002f70:	2a25      	cmp	r2, #37	@ 0x25
 8002f72:	d1f9      	bne.n	8002f68 <_svfiprintf_r+0x54>
 8002f74:	ebba 0b04 	subs.w	fp, sl, r4
 8002f78:	d00b      	beq.n	8002f92 <_svfiprintf_r+0x7e>
 8002f7a:	465b      	mov	r3, fp
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	4629      	mov	r1, r5
 8002f80:	4638      	mov	r0, r7
 8002f82:	f7ff ff6b 	bl	8002e5c <__ssputs_r>
 8002f86:	3001      	adds	r0, #1
 8002f88:	f000 80a7 	beq.w	80030da <_svfiprintf_r+0x1c6>
 8002f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f8e:	445a      	add	r2, fp
 8002f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f92:	f89a 3000 	ldrb.w	r3, [sl]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 809f 	beq.w	80030da <_svfiprintf_r+0x1c6>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fa6:	f10a 0a01 	add.w	sl, sl, #1
 8002faa:	9304      	str	r3, [sp, #16]
 8002fac:	9307      	str	r3, [sp, #28]
 8002fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002fb4:	4654      	mov	r4, sl
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fbc:	484e      	ldr	r0, [pc, #312]	@ (80030f8 <_svfiprintf_r+0x1e4>)
 8002fbe:	f7fd f90f 	bl	80001e0 <memchr>
 8002fc2:	9a04      	ldr	r2, [sp, #16]
 8002fc4:	b9d8      	cbnz	r0, 8002ffe <_svfiprintf_r+0xea>
 8002fc6:	06d0      	lsls	r0, r2, #27
 8002fc8:	bf44      	itt	mi
 8002fca:	2320      	movmi	r3, #32
 8002fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fd0:	0711      	lsls	r1, r2, #28
 8002fd2:	bf44      	itt	mi
 8002fd4:	232b      	movmi	r3, #43	@ 0x2b
 8002fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fda:	f89a 3000 	ldrb.w	r3, [sl]
 8002fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fe0:	d015      	beq.n	800300e <_svfiprintf_r+0xfa>
 8002fe2:	9a07      	ldr	r2, [sp, #28]
 8002fe4:	4654      	mov	r4, sl
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f04f 0c0a 	mov.w	ip, #10
 8002fec:	4621      	mov	r1, r4
 8002fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ff2:	3b30      	subs	r3, #48	@ 0x30
 8002ff4:	2b09      	cmp	r3, #9
 8002ff6:	d94b      	bls.n	8003090 <_svfiprintf_r+0x17c>
 8002ff8:	b1b0      	cbz	r0, 8003028 <_svfiprintf_r+0x114>
 8002ffa:	9207      	str	r2, [sp, #28]
 8002ffc:	e014      	b.n	8003028 <_svfiprintf_r+0x114>
 8002ffe:	eba0 0308 	sub.w	r3, r0, r8
 8003002:	fa09 f303 	lsl.w	r3, r9, r3
 8003006:	4313      	orrs	r3, r2
 8003008:	9304      	str	r3, [sp, #16]
 800300a:	46a2      	mov	sl, r4
 800300c:	e7d2      	b.n	8002fb4 <_svfiprintf_r+0xa0>
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	1d19      	adds	r1, r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	9103      	str	r1, [sp, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	bfbb      	ittet	lt
 800301a:	425b      	neglt	r3, r3
 800301c:	f042 0202 	orrlt.w	r2, r2, #2
 8003020:	9307      	strge	r3, [sp, #28]
 8003022:	9307      	strlt	r3, [sp, #28]
 8003024:	bfb8      	it	lt
 8003026:	9204      	strlt	r2, [sp, #16]
 8003028:	7823      	ldrb	r3, [r4, #0]
 800302a:	2b2e      	cmp	r3, #46	@ 0x2e
 800302c:	d10a      	bne.n	8003044 <_svfiprintf_r+0x130>
 800302e:	7863      	ldrb	r3, [r4, #1]
 8003030:	2b2a      	cmp	r3, #42	@ 0x2a
 8003032:	d132      	bne.n	800309a <_svfiprintf_r+0x186>
 8003034:	9b03      	ldr	r3, [sp, #12]
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	9203      	str	r2, [sp, #12]
 800303c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003040:	3402      	adds	r4, #2
 8003042:	9305      	str	r3, [sp, #20]
 8003044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003108 <_svfiprintf_r+0x1f4>
 8003048:	7821      	ldrb	r1, [r4, #0]
 800304a:	2203      	movs	r2, #3
 800304c:	4650      	mov	r0, sl
 800304e:	f7fd f8c7 	bl	80001e0 <memchr>
 8003052:	b138      	cbz	r0, 8003064 <_svfiprintf_r+0x150>
 8003054:	9b04      	ldr	r3, [sp, #16]
 8003056:	eba0 000a 	sub.w	r0, r0, sl
 800305a:	2240      	movs	r2, #64	@ 0x40
 800305c:	4082      	lsls	r2, r0
 800305e:	4313      	orrs	r3, r2
 8003060:	3401      	adds	r4, #1
 8003062:	9304      	str	r3, [sp, #16]
 8003064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003068:	4824      	ldr	r0, [pc, #144]	@ (80030fc <_svfiprintf_r+0x1e8>)
 800306a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800306e:	2206      	movs	r2, #6
 8003070:	f7fd f8b6 	bl	80001e0 <memchr>
 8003074:	2800      	cmp	r0, #0
 8003076:	d036      	beq.n	80030e6 <_svfiprintf_r+0x1d2>
 8003078:	4b21      	ldr	r3, [pc, #132]	@ (8003100 <_svfiprintf_r+0x1ec>)
 800307a:	bb1b      	cbnz	r3, 80030c4 <_svfiprintf_r+0x1b0>
 800307c:	9b03      	ldr	r3, [sp, #12]
 800307e:	3307      	adds	r3, #7
 8003080:	f023 0307 	bic.w	r3, r3, #7
 8003084:	3308      	adds	r3, #8
 8003086:	9303      	str	r3, [sp, #12]
 8003088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800308a:	4433      	add	r3, r6
 800308c:	9309      	str	r3, [sp, #36]	@ 0x24
 800308e:	e76a      	b.n	8002f66 <_svfiprintf_r+0x52>
 8003090:	fb0c 3202 	mla	r2, ip, r2, r3
 8003094:	460c      	mov	r4, r1
 8003096:	2001      	movs	r0, #1
 8003098:	e7a8      	b.n	8002fec <_svfiprintf_r+0xd8>
 800309a:	2300      	movs	r3, #0
 800309c:	3401      	adds	r4, #1
 800309e:	9305      	str	r3, [sp, #20]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f04f 0c0a 	mov.w	ip, #10
 80030a6:	4620      	mov	r0, r4
 80030a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030ac:	3a30      	subs	r2, #48	@ 0x30
 80030ae:	2a09      	cmp	r2, #9
 80030b0:	d903      	bls.n	80030ba <_svfiprintf_r+0x1a6>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0c6      	beq.n	8003044 <_svfiprintf_r+0x130>
 80030b6:	9105      	str	r1, [sp, #20]
 80030b8:	e7c4      	b.n	8003044 <_svfiprintf_r+0x130>
 80030ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80030be:	4604      	mov	r4, r0
 80030c0:	2301      	movs	r3, #1
 80030c2:	e7f0      	b.n	80030a6 <_svfiprintf_r+0x192>
 80030c4:	ab03      	add	r3, sp, #12
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	462a      	mov	r2, r5
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <_svfiprintf_r+0x1f0>)
 80030cc:	a904      	add	r1, sp, #16
 80030ce:	4638      	mov	r0, r7
 80030d0:	f3af 8000 	nop.w
 80030d4:	1c42      	adds	r2, r0, #1
 80030d6:	4606      	mov	r6, r0
 80030d8:	d1d6      	bne.n	8003088 <_svfiprintf_r+0x174>
 80030da:	89ab      	ldrh	r3, [r5, #12]
 80030dc:	065b      	lsls	r3, r3, #25
 80030de:	f53f af2d 	bmi.w	8002f3c <_svfiprintf_r+0x28>
 80030e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030e4:	e72c      	b.n	8002f40 <_svfiprintf_r+0x2c>
 80030e6:	ab03      	add	r3, sp, #12
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	462a      	mov	r2, r5
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <_svfiprintf_r+0x1f0>)
 80030ee:	a904      	add	r1, sp, #16
 80030f0:	4638      	mov	r0, r7
 80030f2:	f000 f9bb 	bl	800346c <_printf_i>
 80030f6:	e7ed      	b.n	80030d4 <_svfiprintf_r+0x1c0>
 80030f8:	08003ac8 	.word	0x08003ac8
 80030fc:	08003ad2 	.word	0x08003ad2
 8003100:	00000000 	.word	0x00000000
 8003104:	08002e5d 	.word	0x08002e5d
 8003108:	08003ace 	.word	0x08003ace

0800310c <__sfputc_r>:
 800310c:	6893      	ldr	r3, [r2, #8]
 800310e:	3b01      	subs	r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	b410      	push	{r4}
 8003114:	6093      	str	r3, [r2, #8]
 8003116:	da08      	bge.n	800312a <__sfputc_r+0x1e>
 8003118:	6994      	ldr	r4, [r2, #24]
 800311a:	42a3      	cmp	r3, r4
 800311c:	db01      	blt.n	8003122 <__sfputc_r+0x16>
 800311e:	290a      	cmp	r1, #10
 8003120:	d103      	bne.n	800312a <__sfputc_r+0x1e>
 8003122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003126:	f7ff bc90 	b.w	8002a4a <__swbuf_r>
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	1c58      	adds	r0, r3, #1
 800312e:	6010      	str	r0, [r2, #0]
 8003130:	7019      	strb	r1, [r3, #0]
 8003132:	4608      	mov	r0, r1
 8003134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003138:	4770      	bx	lr

0800313a <__sfputs_r>:
 800313a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313c:	4606      	mov	r6, r0
 800313e:	460f      	mov	r7, r1
 8003140:	4614      	mov	r4, r2
 8003142:	18d5      	adds	r5, r2, r3
 8003144:	42ac      	cmp	r4, r5
 8003146:	d101      	bne.n	800314c <__sfputs_r+0x12>
 8003148:	2000      	movs	r0, #0
 800314a:	e007      	b.n	800315c <__sfputs_r+0x22>
 800314c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003150:	463a      	mov	r2, r7
 8003152:	4630      	mov	r0, r6
 8003154:	f7ff ffda 	bl	800310c <__sfputc_r>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d1f3      	bne.n	8003144 <__sfputs_r+0xa>
 800315c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003160 <_vfiprintf_r>:
 8003160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003164:	460d      	mov	r5, r1
 8003166:	b09d      	sub	sp, #116	@ 0x74
 8003168:	4614      	mov	r4, r2
 800316a:	4698      	mov	r8, r3
 800316c:	4606      	mov	r6, r0
 800316e:	b118      	cbz	r0, 8003178 <_vfiprintf_r+0x18>
 8003170:	6a03      	ldr	r3, [r0, #32]
 8003172:	b90b      	cbnz	r3, 8003178 <_vfiprintf_r+0x18>
 8003174:	f7ff fb60 	bl	8002838 <__sinit>
 8003178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800317a:	07d9      	lsls	r1, r3, #31
 800317c:	d405      	bmi.n	800318a <_vfiprintf_r+0x2a>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	059a      	lsls	r2, r3, #22
 8003182:	d402      	bmi.n	800318a <_vfiprintf_r+0x2a>
 8003184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003186:	f7ff fd6e 	bl	8002c66 <__retarget_lock_acquire_recursive>
 800318a:	89ab      	ldrh	r3, [r5, #12]
 800318c:	071b      	lsls	r3, r3, #28
 800318e:	d501      	bpl.n	8003194 <_vfiprintf_r+0x34>
 8003190:	692b      	ldr	r3, [r5, #16]
 8003192:	b99b      	cbnz	r3, 80031bc <_vfiprintf_r+0x5c>
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f7ff fc96 	bl	8002ac8 <__swsetup_r>
 800319c:	b170      	cbz	r0, 80031bc <_vfiprintf_r+0x5c>
 800319e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80031a0:	07dc      	lsls	r4, r3, #31
 80031a2:	d504      	bpl.n	80031ae <_vfiprintf_r+0x4e>
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	b01d      	add	sp, #116	@ 0x74
 80031aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ae:	89ab      	ldrh	r3, [r5, #12]
 80031b0:	0598      	lsls	r0, r3, #22
 80031b2:	d4f7      	bmi.n	80031a4 <_vfiprintf_r+0x44>
 80031b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031b6:	f7ff fd57 	bl	8002c68 <__retarget_lock_release_recursive>
 80031ba:	e7f3      	b.n	80031a4 <_vfiprintf_r+0x44>
 80031bc:	2300      	movs	r3, #0
 80031be:	9309      	str	r3, [sp, #36]	@ 0x24
 80031c0:	2320      	movs	r3, #32
 80031c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80031ca:	2330      	movs	r3, #48	@ 0x30
 80031cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800337c <_vfiprintf_r+0x21c>
 80031d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031d4:	f04f 0901 	mov.w	r9, #1
 80031d8:	4623      	mov	r3, r4
 80031da:	469a      	mov	sl, r3
 80031dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031e0:	b10a      	cbz	r2, 80031e6 <_vfiprintf_r+0x86>
 80031e2:	2a25      	cmp	r2, #37	@ 0x25
 80031e4:	d1f9      	bne.n	80031da <_vfiprintf_r+0x7a>
 80031e6:	ebba 0b04 	subs.w	fp, sl, r4
 80031ea:	d00b      	beq.n	8003204 <_vfiprintf_r+0xa4>
 80031ec:	465b      	mov	r3, fp
 80031ee:	4622      	mov	r2, r4
 80031f0:	4629      	mov	r1, r5
 80031f2:	4630      	mov	r0, r6
 80031f4:	f7ff ffa1 	bl	800313a <__sfputs_r>
 80031f8:	3001      	adds	r0, #1
 80031fa:	f000 80a7 	beq.w	800334c <_vfiprintf_r+0x1ec>
 80031fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003200:	445a      	add	r2, fp
 8003202:	9209      	str	r2, [sp, #36]	@ 0x24
 8003204:	f89a 3000 	ldrb.w	r3, [sl]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 809f 	beq.w	800334c <_vfiprintf_r+0x1ec>
 800320e:	2300      	movs	r3, #0
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003218:	f10a 0a01 	add.w	sl, sl, #1
 800321c:	9304      	str	r3, [sp, #16]
 800321e:	9307      	str	r3, [sp, #28]
 8003220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003224:	931a      	str	r3, [sp, #104]	@ 0x68
 8003226:	4654      	mov	r4, sl
 8003228:	2205      	movs	r2, #5
 800322a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800322e:	4853      	ldr	r0, [pc, #332]	@ (800337c <_vfiprintf_r+0x21c>)
 8003230:	f7fc ffd6 	bl	80001e0 <memchr>
 8003234:	9a04      	ldr	r2, [sp, #16]
 8003236:	b9d8      	cbnz	r0, 8003270 <_vfiprintf_r+0x110>
 8003238:	06d1      	lsls	r1, r2, #27
 800323a:	bf44      	itt	mi
 800323c:	2320      	movmi	r3, #32
 800323e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003242:	0713      	lsls	r3, r2, #28
 8003244:	bf44      	itt	mi
 8003246:	232b      	movmi	r3, #43	@ 0x2b
 8003248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800324c:	f89a 3000 	ldrb.w	r3, [sl]
 8003250:	2b2a      	cmp	r3, #42	@ 0x2a
 8003252:	d015      	beq.n	8003280 <_vfiprintf_r+0x120>
 8003254:	9a07      	ldr	r2, [sp, #28]
 8003256:	4654      	mov	r4, sl
 8003258:	2000      	movs	r0, #0
 800325a:	f04f 0c0a 	mov.w	ip, #10
 800325e:	4621      	mov	r1, r4
 8003260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003264:	3b30      	subs	r3, #48	@ 0x30
 8003266:	2b09      	cmp	r3, #9
 8003268:	d94b      	bls.n	8003302 <_vfiprintf_r+0x1a2>
 800326a:	b1b0      	cbz	r0, 800329a <_vfiprintf_r+0x13a>
 800326c:	9207      	str	r2, [sp, #28]
 800326e:	e014      	b.n	800329a <_vfiprintf_r+0x13a>
 8003270:	eba0 0308 	sub.w	r3, r0, r8
 8003274:	fa09 f303 	lsl.w	r3, r9, r3
 8003278:	4313      	orrs	r3, r2
 800327a:	9304      	str	r3, [sp, #16]
 800327c:	46a2      	mov	sl, r4
 800327e:	e7d2      	b.n	8003226 <_vfiprintf_r+0xc6>
 8003280:	9b03      	ldr	r3, [sp, #12]
 8003282:	1d19      	adds	r1, r3, #4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	9103      	str	r1, [sp, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	bfbb      	ittet	lt
 800328c:	425b      	neglt	r3, r3
 800328e:	f042 0202 	orrlt.w	r2, r2, #2
 8003292:	9307      	strge	r3, [sp, #28]
 8003294:	9307      	strlt	r3, [sp, #28]
 8003296:	bfb8      	it	lt
 8003298:	9204      	strlt	r2, [sp, #16]
 800329a:	7823      	ldrb	r3, [r4, #0]
 800329c:	2b2e      	cmp	r3, #46	@ 0x2e
 800329e:	d10a      	bne.n	80032b6 <_vfiprintf_r+0x156>
 80032a0:	7863      	ldrb	r3, [r4, #1]
 80032a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80032a4:	d132      	bne.n	800330c <_vfiprintf_r+0x1ac>
 80032a6:	9b03      	ldr	r3, [sp, #12]
 80032a8:	1d1a      	adds	r2, r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	9203      	str	r2, [sp, #12]
 80032ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032b2:	3402      	adds	r4, #2
 80032b4:	9305      	str	r3, [sp, #20]
 80032b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800338c <_vfiprintf_r+0x22c>
 80032ba:	7821      	ldrb	r1, [r4, #0]
 80032bc:	2203      	movs	r2, #3
 80032be:	4650      	mov	r0, sl
 80032c0:	f7fc ff8e 	bl	80001e0 <memchr>
 80032c4:	b138      	cbz	r0, 80032d6 <_vfiprintf_r+0x176>
 80032c6:	9b04      	ldr	r3, [sp, #16]
 80032c8:	eba0 000a 	sub.w	r0, r0, sl
 80032cc:	2240      	movs	r2, #64	@ 0x40
 80032ce:	4082      	lsls	r2, r0
 80032d0:	4313      	orrs	r3, r2
 80032d2:	3401      	adds	r4, #1
 80032d4:	9304      	str	r3, [sp, #16]
 80032d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032da:	4829      	ldr	r0, [pc, #164]	@ (8003380 <_vfiprintf_r+0x220>)
 80032dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032e0:	2206      	movs	r2, #6
 80032e2:	f7fc ff7d 	bl	80001e0 <memchr>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d03f      	beq.n	800336a <_vfiprintf_r+0x20a>
 80032ea:	4b26      	ldr	r3, [pc, #152]	@ (8003384 <_vfiprintf_r+0x224>)
 80032ec:	bb1b      	cbnz	r3, 8003336 <_vfiprintf_r+0x1d6>
 80032ee:	9b03      	ldr	r3, [sp, #12]
 80032f0:	3307      	adds	r3, #7
 80032f2:	f023 0307 	bic.w	r3, r3, #7
 80032f6:	3308      	adds	r3, #8
 80032f8:	9303      	str	r3, [sp, #12]
 80032fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032fc:	443b      	add	r3, r7
 80032fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003300:	e76a      	b.n	80031d8 <_vfiprintf_r+0x78>
 8003302:	fb0c 3202 	mla	r2, ip, r2, r3
 8003306:	460c      	mov	r4, r1
 8003308:	2001      	movs	r0, #1
 800330a:	e7a8      	b.n	800325e <_vfiprintf_r+0xfe>
 800330c:	2300      	movs	r3, #0
 800330e:	3401      	adds	r4, #1
 8003310:	9305      	str	r3, [sp, #20]
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 0c0a 	mov.w	ip, #10
 8003318:	4620      	mov	r0, r4
 800331a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800331e:	3a30      	subs	r2, #48	@ 0x30
 8003320:	2a09      	cmp	r2, #9
 8003322:	d903      	bls.n	800332c <_vfiprintf_r+0x1cc>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0c6      	beq.n	80032b6 <_vfiprintf_r+0x156>
 8003328:	9105      	str	r1, [sp, #20]
 800332a:	e7c4      	b.n	80032b6 <_vfiprintf_r+0x156>
 800332c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003330:	4604      	mov	r4, r0
 8003332:	2301      	movs	r3, #1
 8003334:	e7f0      	b.n	8003318 <_vfiprintf_r+0x1b8>
 8003336:	ab03      	add	r3, sp, #12
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	462a      	mov	r2, r5
 800333c:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <_vfiprintf_r+0x228>)
 800333e:	a904      	add	r1, sp, #16
 8003340:	4630      	mov	r0, r6
 8003342:	f3af 8000 	nop.w
 8003346:	4607      	mov	r7, r0
 8003348:	1c78      	adds	r0, r7, #1
 800334a:	d1d6      	bne.n	80032fa <_vfiprintf_r+0x19a>
 800334c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800334e:	07d9      	lsls	r1, r3, #31
 8003350:	d405      	bmi.n	800335e <_vfiprintf_r+0x1fe>
 8003352:	89ab      	ldrh	r3, [r5, #12]
 8003354:	059a      	lsls	r2, r3, #22
 8003356:	d402      	bmi.n	800335e <_vfiprintf_r+0x1fe>
 8003358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800335a:	f7ff fc85 	bl	8002c68 <__retarget_lock_release_recursive>
 800335e:	89ab      	ldrh	r3, [r5, #12]
 8003360:	065b      	lsls	r3, r3, #25
 8003362:	f53f af1f 	bmi.w	80031a4 <_vfiprintf_r+0x44>
 8003366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003368:	e71e      	b.n	80031a8 <_vfiprintf_r+0x48>
 800336a:	ab03      	add	r3, sp, #12
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	462a      	mov	r2, r5
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <_vfiprintf_r+0x228>)
 8003372:	a904      	add	r1, sp, #16
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f879 	bl	800346c <_printf_i>
 800337a:	e7e4      	b.n	8003346 <_vfiprintf_r+0x1e6>
 800337c:	08003ac8 	.word	0x08003ac8
 8003380:	08003ad2 	.word	0x08003ad2
 8003384:	00000000 	.word	0x00000000
 8003388:	0800313b 	.word	0x0800313b
 800338c:	08003ace 	.word	0x08003ace

08003390 <_printf_common>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	4616      	mov	r6, r2
 8003396:	4698      	mov	r8, r3
 8003398:	688a      	ldr	r2, [r1, #8]
 800339a:	690b      	ldr	r3, [r1, #16]
 800339c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bfb8      	it	lt
 80033a4:	4613      	movlt	r3, r2
 80033a6:	6033      	str	r3, [r6, #0]
 80033a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033ac:	4607      	mov	r7, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	b10a      	cbz	r2, 80033b6 <_printf_common+0x26>
 80033b2:	3301      	adds	r3, #1
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	0699      	lsls	r1, r3, #26
 80033ba:	bf42      	ittt	mi
 80033bc:	6833      	ldrmi	r3, [r6, #0]
 80033be:	3302      	addmi	r3, #2
 80033c0:	6033      	strmi	r3, [r6, #0]
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	f015 0506 	ands.w	r5, r5, #6
 80033c8:	d106      	bne.n	80033d8 <_printf_common+0x48>
 80033ca:	f104 0a19 	add.w	sl, r4, #25
 80033ce:	68e3      	ldr	r3, [r4, #12]
 80033d0:	6832      	ldr	r2, [r6, #0]
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	42ab      	cmp	r3, r5
 80033d6:	dc26      	bgt.n	8003426 <_printf_common+0x96>
 80033d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033dc:	6822      	ldr	r2, [r4, #0]
 80033de:	3b00      	subs	r3, #0
 80033e0:	bf18      	it	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	0692      	lsls	r2, r2, #26
 80033e6:	d42b      	bmi.n	8003440 <_printf_common+0xb0>
 80033e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033ec:	4641      	mov	r1, r8
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c8      	blx	r9
 80033f2:	3001      	adds	r0, #1
 80033f4:	d01e      	beq.n	8003434 <_printf_common+0xa4>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	6922      	ldr	r2, [r4, #16]
 80033fa:	f003 0306 	and.w	r3, r3, #6
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf02      	ittt	eq
 8003402:	68e5      	ldreq	r5, [r4, #12]
 8003404:	6833      	ldreq	r3, [r6, #0]
 8003406:	1aed      	subeq	r5, r5, r3
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	bf0c      	ite	eq
 800340c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003410:	2500      	movne	r5, #0
 8003412:	4293      	cmp	r3, r2
 8003414:	bfc4      	itt	gt
 8003416:	1a9b      	subgt	r3, r3, r2
 8003418:	18ed      	addgt	r5, r5, r3
 800341a:	2600      	movs	r6, #0
 800341c:	341a      	adds	r4, #26
 800341e:	42b5      	cmp	r5, r6
 8003420:	d11a      	bne.n	8003458 <_printf_common+0xc8>
 8003422:	2000      	movs	r0, #0
 8003424:	e008      	b.n	8003438 <_printf_common+0xa8>
 8003426:	2301      	movs	r3, #1
 8003428:	4652      	mov	r2, sl
 800342a:	4641      	mov	r1, r8
 800342c:	4638      	mov	r0, r7
 800342e:	47c8      	blx	r9
 8003430:	3001      	adds	r0, #1
 8003432:	d103      	bne.n	800343c <_printf_common+0xac>
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	3501      	adds	r5, #1
 800343e:	e7c6      	b.n	80033ce <_printf_common+0x3e>
 8003440:	18e1      	adds	r1, r4, r3
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	2030      	movs	r0, #48	@ 0x30
 8003446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800344a:	4422      	add	r2, r4
 800344c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003454:	3302      	adds	r3, #2
 8003456:	e7c7      	b.n	80033e8 <_printf_common+0x58>
 8003458:	2301      	movs	r3, #1
 800345a:	4622      	mov	r2, r4
 800345c:	4641      	mov	r1, r8
 800345e:	4638      	mov	r0, r7
 8003460:	47c8      	blx	r9
 8003462:	3001      	adds	r0, #1
 8003464:	d0e6      	beq.n	8003434 <_printf_common+0xa4>
 8003466:	3601      	adds	r6, #1
 8003468:	e7d9      	b.n	800341e <_printf_common+0x8e>
	...

0800346c <_printf_i>:
 800346c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	7e0f      	ldrb	r7, [r1, #24]
 8003472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003474:	2f78      	cmp	r7, #120	@ 0x78
 8003476:	4691      	mov	r9, r2
 8003478:	4680      	mov	r8, r0
 800347a:	460c      	mov	r4, r1
 800347c:	469a      	mov	sl, r3
 800347e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003482:	d807      	bhi.n	8003494 <_printf_i+0x28>
 8003484:	2f62      	cmp	r7, #98	@ 0x62
 8003486:	d80a      	bhi.n	800349e <_printf_i+0x32>
 8003488:	2f00      	cmp	r7, #0
 800348a:	f000 80d2 	beq.w	8003632 <_printf_i+0x1c6>
 800348e:	2f58      	cmp	r7, #88	@ 0x58
 8003490:	f000 80b9 	beq.w	8003606 <_printf_i+0x19a>
 8003494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800349c:	e03a      	b.n	8003514 <_printf_i+0xa8>
 800349e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034a2:	2b15      	cmp	r3, #21
 80034a4:	d8f6      	bhi.n	8003494 <_printf_i+0x28>
 80034a6:	a101      	add	r1, pc, #4	@ (adr r1, 80034ac <_printf_i+0x40>)
 80034a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034ac:	08003505 	.word	0x08003505
 80034b0:	08003519 	.word	0x08003519
 80034b4:	08003495 	.word	0x08003495
 80034b8:	08003495 	.word	0x08003495
 80034bc:	08003495 	.word	0x08003495
 80034c0:	08003495 	.word	0x08003495
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003495 	.word	0x08003495
 80034cc:	08003495 	.word	0x08003495
 80034d0:	08003495 	.word	0x08003495
 80034d4:	08003495 	.word	0x08003495
 80034d8:	08003619 	.word	0x08003619
 80034dc:	08003543 	.word	0x08003543
 80034e0:	080035d3 	.word	0x080035d3
 80034e4:	08003495 	.word	0x08003495
 80034e8:	08003495 	.word	0x08003495
 80034ec:	0800363b 	.word	0x0800363b
 80034f0:	08003495 	.word	0x08003495
 80034f4:	08003543 	.word	0x08003543
 80034f8:	08003495 	.word	0x08003495
 80034fc:	08003495 	.word	0x08003495
 8003500:	080035db 	.word	0x080035db
 8003504:	6833      	ldr	r3, [r6, #0]
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6032      	str	r2, [r6, #0]
 800350c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003514:	2301      	movs	r3, #1
 8003516:	e09d      	b.n	8003654 <_printf_i+0x1e8>
 8003518:	6833      	ldr	r3, [r6, #0]
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	1d19      	adds	r1, r3, #4
 800351e:	6031      	str	r1, [r6, #0]
 8003520:	0606      	lsls	r6, r0, #24
 8003522:	d501      	bpl.n	8003528 <_printf_i+0xbc>
 8003524:	681d      	ldr	r5, [r3, #0]
 8003526:	e003      	b.n	8003530 <_printf_i+0xc4>
 8003528:	0645      	lsls	r5, r0, #25
 800352a:	d5fb      	bpl.n	8003524 <_printf_i+0xb8>
 800352c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003530:	2d00      	cmp	r5, #0
 8003532:	da03      	bge.n	800353c <_printf_i+0xd0>
 8003534:	232d      	movs	r3, #45	@ 0x2d
 8003536:	426d      	negs	r5, r5
 8003538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800353c:	4859      	ldr	r0, [pc, #356]	@ (80036a4 <_printf_i+0x238>)
 800353e:	230a      	movs	r3, #10
 8003540:	e011      	b.n	8003566 <_printf_i+0xfa>
 8003542:	6821      	ldr	r1, [r4, #0]
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	0608      	lsls	r0, r1, #24
 8003548:	f853 5b04 	ldr.w	r5, [r3], #4
 800354c:	d402      	bmi.n	8003554 <_printf_i+0xe8>
 800354e:	0649      	lsls	r1, r1, #25
 8003550:	bf48      	it	mi
 8003552:	b2ad      	uxthmi	r5, r5
 8003554:	2f6f      	cmp	r7, #111	@ 0x6f
 8003556:	4853      	ldr	r0, [pc, #332]	@ (80036a4 <_printf_i+0x238>)
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	bf14      	ite	ne
 800355c:	230a      	movne	r3, #10
 800355e:	2308      	moveq	r3, #8
 8003560:	2100      	movs	r1, #0
 8003562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003566:	6866      	ldr	r6, [r4, #4]
 8003568:	60a6      	str	r6, [r4, #8]
 800356a:	2e00      	cmp	r6, #0
 800356c:	bfa2      	ittt	ge
 800356e:	6821      	ldrge	r1, [r4, #0]
 8003570:	f021 0104 	bicge.w	r1, r1, #4
 8003574:	6021      	strge	r1, [r4, #0]
 8003576:	b90d      	cbnz	r5, 800357c <_printf_i+0x110>
 8003578:	2e00      	cmp	r6, #0
 800357a:	d04b      	beq.n	8003614 <_printf_i+0x1a8>
 800357c:	4616      	mov	r6, r2
 800357e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003582:	fb03 5711 	mls	r7, r3, r1, r5
 8003586:	5dc7      	ldrb	r7, [r0, r7]
 8003588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800358c:	462f      	mov	r7, r5
 800358e:	42bb      	cmp	r3, r7
 8003590:	460d      	mov	r5, r1
 8003592:	d9f4      	bls.n	800357e <_printf_i+0x112>
 8003594:	2b08      	cmp	r3, #8
 8003596:	d10b      	bne.n	80035b0 <_printf_i+0x144>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	07df      	lsls	r7, r3, #31
 800359c:	d508      	bpl.n	80035b0 <_printf_i+0x144>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	6861      	ldr	r1, [r4, #4]
 80035a2:	4299      	cmp	r1, r3
 80035a4:	bfde      	ittt	le
 80035a6:	2330      	movle	r3, #48	@ 0x30
 80035a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035b0:	1b92      	subs	r2, r2, r6
 80035b2:	6122      	str	r2, [r4, #16]
 80035b4:	f8cd a000 	str.w	sl, [sp]
 80035b8:	464b      	mov	r3, r9
 80035ba:	aa03      	add	r2, sp, #12
 80035bc:	4621      	mov	r1, r4
 80035be:	4640      	mov	r0, r8
 80035c0:	f7ff fee6 	bl	8003390 <_printf_common>
 80035c4:	3001      	adds	r0, #1
 80035c6:	d14a      	bne.n	800365e <_printf_i+0x1f2>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	b004      	add	sp, #16
 80035ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	f043 0320 	orr.w	r3, r3, #32
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	4833      	ldr	r0, [pc, #204]	@ (80036a8 <_printf_i+0x23c>)
 80035dc:	2778      	movs	r7, #120	@ 0x78
 80035de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	6831      	ldr	r1, [r6, #0]
 80035e6:	061f      	lsls	r7, r3, #24
 80035e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80035ec:	d402      	bmi.n	80035f4 <_printf_i+0x188>
 80035ee:	065f      	lsls	r7, r3, #25
 80035f0:	bf48      	it	mi
 80035f2:	b2ad      	uxthmi	r5, r5
 80035f4:	6031      	str	r1, [r6, #0]
 80035f6:	07d9      	lsls	r1, r3, #31
 80035f8:	bf44      	itt	mi
 80035fa:	f043 0320 	orrmi.w	r3, r3, #32
 80035fe:	6023      	strmi	r3, [r4, #0]
 8003600:	b11d      	cbz	r5, 800360a <_printf_i+0x19e>
 8003602:	2310      	movs	r3, #16
 8003604:	e7ac      	b.n	8003560 <_printf_i+0xf4>
 8003606:	4827      	ldr	r0, [pc, #156]	@ (80036a4 <_printf_i+0x238>)
 8003608:	e7e9      	b.n	80035de <_printf_i+0x172>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f023 0320 	bic.w	r3, r3, #32
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	e7f6      	b.n	8003602 <_printf_i+0x196>
 8003614:	4616      	mov	r6, r2
 8003616:	e7bd      	b.n	8003594 <_printf_i+0x128>
 8003618:	6833      	ldr	r3, [r6, #0]
 800361a:	6825      	ldr	r5, [r4, #0]
 800361c:	6961      	ldr	r1, [r4, #20]
 800361e:	1d18      	adds	r0, r3, #4
 8003620:	6030      	str	r0, [r6, #0]
 8003622:	062e      	lsls	r6, r5, #24
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	d501      	bpl.n	800362c <_printf_i+0x1c0>
 8003628:	6019      	str	r1, [r3, #0]
 800362a:	e002      	b.n	8003632 <_printf_i+0x1c6>
 800362c:	0668      	lsls	r0, r5, #25
 800362e:	d5fb      	bpl.n	8003628 <_printf_i+0x1bc>
 8003630:	8019      	strh	r1, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	6123      	str	r3, [r4, #16]
 8003636:	4616      	mov	r6, r2
 8003638:	e7bc      	b.n	80035b4 <_printf_i+0x148>
 800363a:	6833      	ldr	r3, [r6, #0]
 800363c:	1d1a      	adds	r2, r3, #4
 800363e:	6032      	str	r2, [r6, #0]
 8003640:	681e      	ldr	r6, [r3, #0]
 8003642:	6862      	ldr	r2, [r4, #4]
 8003644:	2100      	movs	r1, #0
 8003646:	4630      	mov	r0, r6
 8003648:	f7fc fdca 	bl	80001e0 <memchr>
 800364c:	b108      	cbz	r0, 8003652 <_printf_i+0x1e6>
 800364e:	1b80      	subs	r0, r0, r6
 8003650:	6060      	str	r0, [r4, #4]
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	2300      	movs	r3, #0
 8003658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800365c:	e7aa      	b.n	80035b4 <_printf_i+0x148>
 800365e:	6923      	ldr	r3, [r4, #16]
 8003660:	4632      	mov	r2, r6
 8003662:	4649      	mov	r1, r9
 8003664:	4640      	mov	r0, r8
 8003666:	47d0      	blx	sl
 8003668:	3001      	adds	r0, #1
 800366a:	d0ad      	beq.n	80035c8 <_printf_i+0x15c>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	079b      	lsls	r3, r3, #30
 8003670:	d413      	bmi.n	800369a <_printf_i+0x22e>
 8003672:	68e0      	ldr	r0, [r4, #12]
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	4298      	cmp	r0, r3
 8003678:	bfb8      	it	lt
 800367a:	4618      	movlt	r0, r3
 800367c:	e7a6      	b.n	80035cc <_printf_i+0x160>
 800367e:	2301      	movs	r3, #1
 8003680:	4632      	mov	r2, r6
 8003682:	4649      	mov	r1, r9
 8003684:	4640      	mov	r0, r8
 8003686:	47d0      	blx	sl
 8003688:	3001      	adds	r0, #1
 800368a:	d09d      	beq.n	80035c8 <_printf_i+0x15c>
 800368c:	3501      	adds	r5, #1
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	9903      	ldr	r1, [sp, #12]
 8003692:	1a5b      	subs	r3, r3, r1
 8003694:	42ab      	cmp	r3, r5
 8003696:	dcf2      	bgt.n	800367e <_printf_i+0x212>
 8003698:	e7eb      	b.n	8003672 <_printf_i+0x206>
 800369a:	2500      	movs	r5, #0
 800369c:	f104 0619 	add.w	r6, r4, #25
 80036a0:	e7f5      	b.n	800368e <_printf_i+0x222>
 80036a2:	bf00      	nop
 80036a4:	08003ad9 	.word	0x08003ad9
 80036a8:	08003aea 	.word	0x08003aea

080036ac <__sflush_r>:
 80036ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b4:	0716      	lsls	r6, r2, #28
 80036b6:	4605      	mov	r5, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	d454      	bmi.n	8003766 <__sflush_r+0xba>
 80036bc:	684b      	ldr	r3, [r1, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	dc02      	bgt.n	80036c8 <__sflush_r+0x1c>
 80036c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	dd48      	ble.n	800375a <__sflush_r+0xae>
 80036c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036ca:	2e00      	cmp	r6, #0
 80036cc:	d045      	beq.n	800375a <__sflush_r+0xae>
 80036ce:	2300      	movs	r3, #0
 80036d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036d4:	682f      	ldr	r7, [r5, #0]
 80036d6:	6a21      	ldr	r1, [r4, #32]
 80036d8:	602b      	str	r3, [r5, #0]
 80036da:	d030      	beq.n	800373e <__sflush_r+0x92>
 80036dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	0759      	lsls	r1, r3, #29
 80036e2:	d505      	bpl.n	80036f0 <__sflush_r+0x44>
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	1ad2      	subs	r2, r2, r3
 80036e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036ea:	b10b      	cbz	r3, 80036f0 <__sflush_r+0x44>
 80036ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	2300      	movs	r3, #0
 80036f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036f4:	6a21      	ldr	r1, [r4, #32]
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b0      	blx	r6
 80036fa:	1c43      	adds	r3, r0, #1
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	d106      	bne.n	800370e <__sflush_r+0x62>
 8003700:	6829      	ldr	r1, [r5, #0]
 8003702:	291d      	cmp	r1, #29
 8003704:	d82b      	bhi.n	800375e <__sflush_r+0xb2>
 8003706:	4a2a      	ldr	r2, [pc, #168]	@ (80037b0 <__sflush_r+0x104>)
 8003708:	410a      	asrs	r2, r1
 800370a:	07d6      	lsls	r6, r2, #31
 800370c:	d427      	bmi.n	800375e <__sflush_r+0xb2>
 800370e:	2200      	movs	r2, #0
 8003710:	6062      	str	r2, [r4, #4]
 8003712:	04d9      	lsls	r1, r3, #19
 8003714:	6922      	ldr	r2, [r4, #16]
 8003716:	6022      	str	r2, [r4, #0]
 8003718:	d504      	bpl.n	8003724 <__sflush_r+0x78>
 800371a:	1c42      	adds	r2, r0, #1
 800371c:	d101      	bne.n	8003722 <__sflush_r+0x76>
 800371e:	682b      	ldr	r3, [r5, #0]
 8003720:	b903      	cbnz	r3, 8003724 <__sflush_r+0x78>
 8003722:	6560      	str	r0, [r4, #84]	@ 0x54
 8003724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003726:	602f      	str	r7, [r5, #0]
 8003728:	b1b9      	cbz	r1, 800375a <__sflush_r+0xae>
 800372a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800372e:	4299      	cmp	r1, r3
 8003730:	d002      	beq.n	8003738 <__sflush_r+0x8c>
 8003732:	4628      	mov	r0, r5
 8003734:	f7ff fa9a 	bl	8002c6c <_free_r>
 8003738:	2300      	movs	r3, #0
 800373a:	6363      	str	r3, [r4, #52]	@ 0x34
 800373c:	e00d      	b.n	800375a <__sflush_r+0xae>
 800373e:	2301      	movs	r3, #1
 8003740:	4628      	mov	r0, r5
 8003742:	47b0      	blx	r6
 8003744:	4602      	mov	r2, r0
 8003746:	1c50      	adds	r0, r2, #1
 8003748:	d1c9      	bne.n	80036de <__sflush_r+0x32>
 800374a:	682b      	ldr	r3, [r5, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0c6      	beq.n	80036de <__sflush_r+0x32>
 8003750:	2b1d      	cmp	r3, #29
 8003752:	d001      	beq.n	8003758 <__sflush_r+0xac>
 8003754:	2b16      	cmp	r3, #22
 8003756:	d11e      	bne.n	8003796 <__sflush_r+0xea>
 8003758:	602f      	str	r7, [r5, #0]
 800375a:	2000      	movs	r0, #0
 800375c:	e022      	b.n	80037a4 <__sflush_r+0xf8>
 800375e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003762:	b21b      	sxth	r3, r3
 8003764:	e01b      	b.n	800379e <__sflush_r+0xf2>
 8003766:	690f      	ldr	r7, [r1, #16]
 8003768:	2f00      	cmp	r7, #0
 800376a:	d0f6      	beq.n	800375a <__sflush_r+0xae>
 800376c:	0793      	lsls	r3, r2, #30
 800376e:	680e      	ldr	r6, [r1, #0]
 8003770:	bf08      	it	eq
 8003772:	694b      	ldreq	r3, [r1, #20]
 8003774:	600f      	str	r7, [r1, #0]
 8003776:	bf18      	it	ne
 8003778:	2300      	movne	r3, #0
 800377a:	eba6 0807 	sub.w	r8, r6, r7
 800377e:	608b      	str	r3, [r1, #8]
 8003780:	f1b8 0f00 	cmp.w	r8, #0
 8003784:	dde9      	ble.n	800375a <__sflush_r+0xae>
 8003786:	6a21      	ldr	r1, [r4, #32]
 8003788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800378a:	4643      	mov	r3, r8
 800378c:	463a      	mov	r2, r7
 800378e:	4628      	mov	r0, r5
 8003790:	47b0      	blx	r6
 8003792:	2800      	cmp	r0, #0
 8003794:	dc08      	bgt.n	80037a8 <__sflush_r+0xfc>
 8003796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800379a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800379e:	81a3      	strh	r3, [r4, #12]
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037a8:	4407      	add	r7, r0
 80037aa:	eba8 0800 	sub.w	r8, r8, r0
 80037ae:	e7e7      	b.n	8003780 <__sflush_r+0xd4>
 80037b0:	dfbffffe 	.word	0xdfbffffe

080037b4 <_fflush_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	690b      	ldr	r3, [r1, #16]
 80037b8:	4605      	mov	r5, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	b913      	cbnz	r3, 80037c4 <_fflush_r+0x10>
 80037be:	2500      	movs	r5, #0
 80037c0:	4628      	mov	r0, r5
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	b118      	cbz	r0, 80037ce <_fflush_r+0x1a>
 80037c6:	6a03      	ldr	r3, [r0, #32]
 80037c8:	b90b      	cbnz	r3, 80037ce <_fflush_r+0x1a>
 80037ca:	f7ff f835 	bl	8002838 <__sinit>
 80037ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f3      	beq.n	80037be <_fflush_r+0xa>
 80037d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037d8:	07d0      	lsls	r0, r2, #31
 80037da:	d404      	bmi.n	80037e6 <_fflush_r+0x32>
 80037dc:	0599      	lsls	r1, r3, #22
 80037de:	d402      	bmi.n	80037e6 <_fflush_r+0x32>
 80037e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037e2:	f7ff fa40 	bl	8002c66 <__retarget_lock_acquire_recursive>
 80037e6:	4628      	mov	r0, r5
 80037e8:	4621      	mov	r1, r4
 80037ea:	f7ff ff5f 	bl	80036ac <__sflush_r>
 80037ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037f0:	07da      	lsls	r2, r3, #31
 80037f2:	4605      	mov	r5, r0
 80037f4:	d4e4      	bmi.n	80037c0 <_fflush_r+0xc>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	059b      	lsls	r3, r3, #22
 80037fa:	d4e1      	bmi.n	80037c0 <_fflush_r+0xc>
 80037fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037fe:	f7ff fa33 	bl	8002c68 <__retarget_lock_release_recursive>
 8003802:	e7dd      	b.n	80037c0 <_fflush_r+0xc>

08003804 <__swhatbuf_r>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	460c      	mov	r4, r1
 8003808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380c:	2900      	cmp	r1, #0
 800380e:	b096      	sub	sp, #88	@ 0x58
 8003810:	4615      	mov	r5, r2
 8003812:	461e      	mov	r6, r3
 8003814:	da0d      	bge.n	8003832 <__swhatbuf_r+0x2e>
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	bf14      	ite	ne
 8003822:	2340      	movne	r3, #64	@ 0x40
 8003824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003828:	2000      	movs	r0, #0
 800382a:	6031      	str	r1, [r6, #0]
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	b016      	add	sp, #88	@ 0x58
 8003830:	bd70      	pop	{r4, r5, r6, pc}
 8003832:	466a      	mov	r2, sp
 8003834:	f000 f862 	bl	80038fc <_fstat_r>
 8003838:	2800      	cmp	r0, #0
 800383a:	dbec      	blt.n	8003816 <__swhatbuf_r+0x12>
 800383c:	9901      	ldr	r1, [sp, #4]
 800383e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003846:	4259      	negs	r1, r3
 8003848:	4159      	adcs	r1, r3
 800384a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800384e:	e7eb      	b.n	8003828 <__swhatbuf_r+0x24>

08003850 <__smakebuf_r>:
 8003850:	898b      	ldrh	r3, [r1, #12]
 8003852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003854:	079d      	lsls	r5, r3, #30
 8003856:	4606      	mov	r6, r0
 8003858:	460c      	mov	r4, r1
 800385a:	d507      	bpl.n	800386c <__smakebuf_r+0x1c>
 800385c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	6123      	str	r3, [r4, #16]
 8003864:	2301      	movs	r3, #1
 8003866:	6163      	str	r3, [r4, #20]
 8003868:	b003      	add	sp, #12
 800386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386c:	ab01      	add	r3, sp, #4
 800386e:	466a      	mov	r2, sp
 8003870:	f7ff ffc8 	bl	8003804 <__swhatbuf_r>
 8003874:	9f00      	ldr	r7, [sp, #0]
 8003876:	4605      	mov	r5, r0
 8003878:	4639      	mov	r1, r7
 800387a:	4630      	mov	r0, r6
 800387c:	f7ff fa62 	bl	8002d44 <_malloc_r>
 8003880:	b948      	cbnz	r0, 8003896 <__smakebuf_r+0x46>
 8003882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003886:	059a      	lsls	r2, r3, #22
 8003888:	d4ee      	bmi.n	8003868 <__smakebuf_r+0x18>
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	81a3      	strh	r3, [r4, #12]
 8003894:	e7e2      	b.n	800385c <__smakebuf_r+0xc>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	6020      	str	r0, [r4, #0]
 800389a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	9b01      	ldr	r3, [sp, #4]
 80038a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80038a6:	b15b      	cbz	r3, 80038c0 <__smakebuf_r+0x70>
 80038a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ac:	4630      	mov	r0, r6
 80038ae:	f000 f837 	bl	8003920 <_isatty_r>
 80038b2:	b128      	cbz	r0, 80038c0 <__smakebuf_r+0x70>
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	431d      	orrs	r5, r3
 80038c4:	81a5      	strh	r5, [r4, #12]
 80038c6:	e7cf      	b.n	8003868 <__smakebuf_r+0x18>

080038c8 <memmove>:
 80038c8:	4288      	cmp	r0, r1
 80038ca:	b510      	push	{r4, lr}
 80038cc:	eb01 0402 	add.w	r4, r1, r2
 80038d0:	d902      	bls.n	80038d8 <memmove+0x10>
 80038d2:	4284      	cmp	r4, r0
 80038d4:	4623      	mov	r3, r4
 80038d6:	d807      	bhi.n	80038e8 <memmove+0x20>
 80038d8:	1e43      	subs	r3, r0, #1
 80038da:	42a1      	cmp	r1, r4
 80038dc:	d008      	beq.n	80038f0 <memmove+0x28>
 80038de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038e6:	e7f8      	b.n	80038da <memmove+0x12>
 80038e8:	4402      	add	r2, r0
 80038ea:	4601      	mov	r1, r0
 80038ec:	428a      	cmp	r2, r1
 80038ee:	d100      	bne.n	80038f2 <memmove+0x2a>
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038fa:	e7f7      	b.n	80038ec <memmove+0x24>

080038fc <_fstat_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4d07      	ldr	r5, [pc, #28]	@ (800391c <_fstat_r+0x20>)
 8003900:	2300      	movs	r3, #0
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	f7fd fa99 	bl	8000e40 <_fstat>
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	d102      	bne.n	8003918 <_fstat_r+0x1c>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	b103      	cbz	r3, 8003918 <_fstat_r+0x1c>
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	bf00      	nop
 800391c:	20000210 	.word	0x20000210

08003920 <_isatty_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4d06      	ldr	r5, [pc, #24]	@ (800393c <_isatty_r+0x1c>)
 8003924:	2300      	movs	r3, #0
 8003926:	4604      	mov	r4, r0
 8003928:	4608      	mov	r0, r1
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	f7fd fa98 	bl	8000e60 <_isatty>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d102      	bne.n	800393a <_isatty_r+0x1a>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	b103      	cbz	r3, 800393a <_isatty_r+0x1a>
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	20000210 	.word	0x20000210

08003940 <_sbrk_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d06      	ldr	r5, [pc, #24]	@ (800395c <_sbrk_r+0x1c>)
 8003944:	2300      	movs	r3, #0
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	f7fd faa0 	bl	8000e90 <_sbrk>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_sbrk_r+0x1a>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_sbrk_r+0x1a>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	20000210 	.word	0x20000210

08003960 <memcpy>:
 8003960:	440a      	add	r2, r1
 8003962:	4291      	cmp	r1, r2
 8003964:	f100 33ff 	add.w	r3, r0, #4294967295
 8003968:	d100      	bne.n	800396c <memcpy+0xc>
 800396a:	4770      	bx	lr
 800396c:	b510      	push	{r4, lr}
 800396e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003976:	4291      	cmp	r1, r2
 8003978:	d1f9      	bne.n	800396e <memcpy+0xe>
 800397a:	bd10      	pop	{r4, pc}

0800397c <_realloc_r>:
 800397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003980:	4680      	mov	r8, r0
 8003982:	4615      	mov	r5, r2
 8003984:	460c      	mov	r4, r1
 8003986:	b921      	cbnz	r1, 8003992 <_realloc_r+0x16>
 8003988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800398c:	4611      	mov	r1, r2
 800398e:	f7ff b9d9 	b.w	8002d44 <_malloc_r>
 8003992:	b92a      	cbnz	r2, 80039a0 <_realloc_r+0x24>
 8003994:	f7ff f96a 	bl	8002c6c <_free_r>
 8003998:	2400      	movs	r4, #0
 800399a:	4620      	mov	r0, r4
 800399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a0:	f000 f81a 	bl	80039d8 <_malloc_usable_size_r>
 80039a4:	4285      	cmp	r5, r0
 80039a6:	4606      	mov	r6, r0
 80039a8:	d802      	bhi.n	80039b0 <_realloc_r+0x34>
 80039aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039ae:	d8f4      	bhi.n	800399a <_realloc_r+0x1e>
 80039b0:	4629      	mov	r1, r5
 80039b2:	4640      	mov	r0, r8
 80039b4:	f7ff f9c6 	bl	8002d44 <_malloc_r>
 80039b8:	4607      	mov	r7, r0
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d0ec      	beq.n	8003998 <_realloc_r+0x1c>
 80039be:	42b5      	cmp	r5, r6
 80039c0:	462a      	mov	r2, r5
 80039c2:	4621      	mov	r1, r4
 80039c4:	bf28      	it	cs
 80039c6:	4632      	movcs	r2, r6
 80039c8:	f7ff ffca 	bl	8003960 <memcpy>
 80039cc:	4621      	mov	r1, r4
 80039ce:	4640      	mov	r0, r8
 80039d0:	f7ff f94c 	bl	8002c6c <_free_r>
 80039d4:	463c      	mov	r4, r7
 80039d6:	e7e0      	b.n	800399a <_realloc_r+0x1e>

080039d8 <_malloc_usable_size_r>:
 80039d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039dc:	1f18      	subs	r0, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bfbc      	itt	lt
 80039e2:	580b      	ldrlt	r3, [r1, r0]
 80039e4:	18c0      	addlt	r0, r0, r3
 80039e6:	4770      	bx	lr

080039e8 <_init>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr

080039f4 <_fini>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr
