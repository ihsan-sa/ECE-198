
MPU6050_Data_Collection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003084  08003084  00004084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030dc  080030dc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080030dc  080030dc  000040dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030e4  080030e4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e4  080030e4  000040e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030e8  080030e8  000040e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080030ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08003154  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003154  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a12  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b2  00000000  00000000  0000caaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000e060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054c  00000000  00000000  0000e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016153  00000000  00000000  0000ecac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a1d  00000000  00000000  00024dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ac5  00000000  00000000  0002d81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b42e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021bc  00000000  00000000  000b4324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000b64e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800306c 	.word	0x0800306c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	0800306c 	.word	0x0800306c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
/* Support printf over UART */
(void) HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFFU);
 80004cc:	1d39      	adds	r1, r7, #4
 80004ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d2:	2201      	movs	r2, #1
 80004d4:	4803      	ldr	r0, [pc, #12]	@ (80004e4 <__io_putchar+0x20>)
 80004d6:	f001 fd61 	bl	8001f9c <HAL_UART_Transmit>
 return ch;
 80004da:	687b      	ldr	r3, [r7, #4]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000084 	.word	0x20000084

080004e8 <writeMPU>:


void writeMPU(GPIO_TypeDef* gpioTypeSDA, int sdaPin, GPIO_TypeDef* gpioTypeSCL,
			  int sclPin, int deviceAddress, int writeAddress, int message, int delayVal) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	603b      	str	r3, [r7, #0]

	printf("enter\r\n");
 80004f6:	4899      	ldr	r0, [pc, #612]	@ (800075c <writeMPU+0x274>)
 80004f8:	f002 fa24 	bl	8002944 <puts>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_SET); // D7
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f001 f847 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET); // D8
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	b29b      	uxth	r3, r3
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 f840 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000518:	2064      	movs	r0, #100	@ 0x64
 800051a:	f000 fd97 	bl	800104c <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET); // D7
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	b29b      	uxth	r3, r3
 8000522:	2200      	movs	r2, #0
 8000524:	4619      	mov	r1, r3
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f001 f836 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET); // D8
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b29b      	uxth	r3, r3
 8000530:	2200      	movs	r2, #0
 8000532:	4619      	mov	r1, r3
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 f82f 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800053a:	2064      	movs	r0, #100	@ 0x64
 800053c:	f000 fd86 	bl	800104c <HAL_Delay>

	HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_SET); // D7
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	b29b      	uxth	r3, r3
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f001 f825 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET); // D8
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b29b      	uxth	r3, r3
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f001 f81e 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800055c:	2064      	movs	r0, #100	@ 0x64
 800055e:	f000 fd75 	bl	800104c <HAL_Delay>

	// wake up the mpu
	 HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_SET);
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	b29b      	uxth	r3, r3
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f001 f814 	bl	8001598 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	b29b      	uxth	r3, r3
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f001 f80d 	bl	8001598 <HAL_GPIO_WritePin>

	 // make default state of the pin after pinMode is called to be HIGH
	 if (sdaPin == GPIO_PIN_8){GPIOA->MODER |= GPIO_MODER_MODER8_0;} // input to output
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000584:	d105      	bne.n	8000592 <writeMPU+0xaa>
 8000586:	4b76      	ldr	r3, [pc, #472]	@ (8000760 <writeMPU+0x278>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a75      	ldr	r2, [pc, #468]	@ (8000760 <writeMPU+0x278>)
 800058c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000590:	6013      	str	r3, [r2, #0]
	 if (sclPin == GPIO_PIN_9){GPIOA->MODER |= GPIO_MODER_MODER9_0;} // input to output
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000598:	d105      	bne.n	80005a6 <writeMPU+0xbe>
 800059a:	4b71      	ldr	r3, [pc, #452]	@ (8000760 <writeMPU+0x278>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a70      	ldr	r2, [pc, #448]	@ (8000760 <writeMPU+0x278>)
 80005a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005a4:	6013      	str	r3, [r2, #0]

	 HAL_Delay(delayVal);
 80005a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fd4f 	bl	800104c <HAL_Delay>

	 // start condition:
	 HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	2200      	movs	r2, #0
 80005b4:	4619      	mov	r1, r3
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f000 ffee 	bl	8001598 <HAL_GPIO_WritePin>
	 HAL_Delay(delayVal);
 80005bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fd44 	bl	800104c <HAL_Delay>
	 HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	2200      	movs	r2, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 ffe3 	bl	8001598 <HAL_GPIO_WritePin>
	 HAL_Delay(delayVal);
 80005d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd39 	bl	800104c <HAL_Delay>

	  // send device address
	  for (int i=0; i<7; i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
 80005de:	e03a      	b.n	8000656 <writeMPU+0x16e>
	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(deviceAddress & (1 << 6-i)) );
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	b299      	uxth	r1, r3
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	f1c3 0306 	rsb	r3, r3, #6
 80005ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005ec:	fa42 f303 	asr.w	r3, r2, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f000 ffc9 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd1f 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 ffbe 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 800061c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd14 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	2200      	movs	r2, #0
 800062a:	4619      	mov	r1, r3
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 ffb3 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fd09 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	b29b      	uxth	r3, r3
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 ffa8 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 8000648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fcfe 	bl	800104c <HAL_Delay>
	  for (int i=0; i<7; i++){
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	3301      	adds	r3, #1
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	2b06      	cmp	r3, #6
 800065a:	ddc1      	ble.n	80005e0 <writeMPU+0xf8>
	  }

	  // write is logic low
	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	b29b      	uxth	r3, r3
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f000 ff97 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 800066a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fced 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 ff8c 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 8000680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fce2 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 ff81 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 8000696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fcd7 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 ff76 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 80006ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fccc 	bl	800104c <HAL_Delay>


	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_SET);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f000 ff6b 	bl	8001598 <HAL_GPIO_WritePin>
	  // read acknowledge bit
	  if (sdaPin == GPIO_PIN_8){GPIOA->MODER &= ~(GPIO_MODER_MODER8);} // change to reading the data line
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006c8:	d105      	bne.n	80006d6 <writeMPU+0x1ee>
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <writeMPU+0x278>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a24      	ldr	r2, [pc, #144]	@ (8000760 <writeMPU+0x278>)
 80006d0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80006d4:	6013      	str	r3, [r2, #0]
	  HAL_Delay(delayVal);
 80006d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fcb7 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 ff56 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 80006ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fcac 	bl	800104c <HAL_Delay>

	  if (!HAL_GPIO_ReadPin(gpioTypeSDA, sdaPin)){
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	68f8      	ldr	r0, [r7, #12]
 80006fc:	f000 ff34 	bl	8001568 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <writeMPU+0x224>
		  printf("device recieved\r\n");
 8000706:	4817      	ldr	r0, [pc, #92]	@ (8000764 <writeMPU+0x27c>)
 8000708:	f002 f91c 	bl	8002944 <puts>
	  }

	  HAL_Delay(delayVal);
 800070c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fc9c 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 ff3b 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 8000722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fc91 	bl	800104c <HAL_Delay>

	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	68f8      	ldr	r0, [r7, #12]
 8000734:	f000 ff30 	bl	8001598 <HAL_GPIO_WritePin>
	  if (sdaPin == GPIO_PIN_8){GPIOA->MODER |= GPIO_MODER_MODER8_0;}
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800073e:	d105      	bne.n	800074c <writeMPU+0x264>
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <writeMPU+0x278>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <writeMPU+0x278>)
 8000746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800074a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(delayVal);
 800074c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fc7c 	bl	800104c <HAL_Delay>


	  // send internal power register address
	  for (int i=0; i<8; i++){
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	e041      	b.n	80007de <writeMPU+0x2f6>
 800075a:	bf00      	nop
 800075c:	08003084 	.word	0x08003084
 8000760:	40020000 	.word	0x40020000
 8000764:	0800308c 	.word	0x0800308c
	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(writeAddress & (1 << 7-i)) );
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	b299      	uxth	r1, r3
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000774:	fa42 f303 	asr.w	r3, r2, r3
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2300      	moveq	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f000 ff05 	bl	8001598 <HAL_GPIO_WritePin>
	    //printf(!!(powerRegister & (1 << 7-i)) );
	    HAL_Delay(delayVal);
 800078e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fc5b 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b29b      	uxth	r3, r3
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 fefa 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80007a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fc50 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 feef 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80007ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fc45 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	f000 fee4 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80007d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fc3a 	bl	800104c <HAL_Delay>
	  for (int i=0; i<8; i++){
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	3301      	adds	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	ddc1      	ble.n	8000768 <writeMPU+0x280>
	  }



	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_SET);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f000 fed3 	bl	8001598 <HAL_GPIO_WritePin>
	  // read acknowledge bit
	  if (sdaPin == GPIO_PIN_8){GPIOA->MODER &= ~(GPIO_MODER_MODER8);} // change to reading the data line
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007f8:	d105      	bne.n	8000806 <writeMPU+0x31e>
 80007fa:	4b78      	ldr	r3, [pc, #480]	@ (80009dc <writeMPU+0x4f4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a77      	ldr	r2, [pc, #476]	@ (80009dc <writeMPU+0x4f4>)
 8000800:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000804:	6013      	str	r3, [r2, #0]
	  HAL_Delay(delayVal);
 8000806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fc1f 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	b29b      	uxth	r3, r3
 8000812:	2201      	movs	r2, #1
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 febe 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 800081c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fc14 	bl	800104c <HAL_Delay>

	  if (!HAL_GPIO_ReadPin(gpioTypeSDA, sdaPin)){
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	b29b      	uxth	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f000 fe9c 	bl	8001568 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <writeMPU+0x354>
	    printf("power register recieved\r\n");
 8000836:	486a      	ldr	r0, [pc, #424]	@ (80009e0 <writeMPU+0x4f8>)
 8000838:	f002 f884 	bl	8002944 <puts>
	  }

	  HAL_Delay(delayVal);
 800083c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc04 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	2200      	movs	r2, #0
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 fea3 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 8000852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fbf9 	bl	800104c <HAL_Delay>

	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	b29b      	uxth	r3, r3
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 fe98 	bl	8001598 <HAL_GPIO_WritePin>
	  if (sdaPin == GPIO_PIN_8){GPIOA->MODER |= GPIO_MODER_MODER8_0;}
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800086e:	d105      	bne.n	800087c <writeMPU+0x394>
 8000870:	4b5a      	ldr	r3, [pc, #360]	@ (80009dc <writeMPU+0x4f4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a59      	ldr	r2, [pc, #356]	@ (80009dc <writeMPU+0x4f4>)
 8000876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800087a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(delayVal);
 800087c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fbe4 	bl	800104c <HAL_Delay>

	  // make to always awake
	  for (int i=0; i<8; i++){
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e03a      	b.n	8000900 <writeMPU+0x418>
	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, !!(message & (1 << 7-i)) );
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	b299      	uxth	r1, r3
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	f1c3 0307 	rsb	r3, r3, #7
 8000894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000896:	fa42 f303 	asr.w	r3, r2, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf14      	ite	ne
 80008a2:	2301      	movne	r3, #1
 80008a4:	2300      	moveq	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f000 fe74 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80008b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fbca 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 fe69 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80008c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fbbf 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 fe5e 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80008dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fbb4 	bl	800104c <HAL_Delay>
	    HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 fe53 	bl	8001598 <HAL_GPIO_WritePin>
	    HAL_Delay(delayVal);
 80008f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fba9 	bl	800104c <HAL_Delay>
	  for (int i=0; i<8; i++){
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2b07      	cmp	r3, #7
 8000904:	ddc1      	ble.n	800088a <writeMPU+0x3a2>
	  }


	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_SET);
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	b29b      	uxth	r3, r3
 800090a:	2201      	movs	r2, #1
 800090c:	4619      	mov	r1, r3
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 fe42 	bl	8001598 <HAL_GPIO_WritePin>
	  // read acknowledge bit
	  if (sdaPin == GPIO_PIN_8){GPIOA->MODER &= ~(GPIO_MODER_MODER8);} // change to reading the data line
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800091a:	d105      	bne.n	8000928 <writeMPU+0x440>
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <writeMPU+0x4f4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a2e      	ldr	r2, [pc, #184]	@ (80009dc <writeMPU+0x4f4>)
 8000922:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000926:	6013      	str	r3, [r2, #0]
	  HAL_Delay(delayVal);
 8000928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fb8e 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b29b      	uxth	r3, r3
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 fe2d 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 800093e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fb83 	bl	800104c <HAL_Delay>

	  if (!HAL_GPIO_ReadPin(gpioTypeSDA, sdaPin)){
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	b29b      	uxth	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 fe0b 	bl	8001568 <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <writeMPU+0x476>
	    printf("device recieved\r\n");
 8000958:	4822      	ldr	r0, [pc, #136]	@ (80009e4 <writeMPU+0x4fc>)
 800095a:	f001 fff3 	bl	8002944 <puts>
	  }

	  HAL_Delay(delayVal);
 800095e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fb73 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_RESET);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 fe12 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 8000974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fb68 	bl	800104c <HAL_Delay>

	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_RESET);
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	b29b      	uxth	r3, r3
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f000 fe07 	bl	8001598 <HAL_GPIO_WritePin>
	  if (sdaPin == GPIO_PIN_8){GPIOA->MODER |= GPIO_MODER_MODER8_0;}
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000990:	d105      	bne.n	800099e <writeMPU+0x4b6>
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <writeMPU+0x4f4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a11      	ldr	r2, [pc, #68]	@ (80009dc <writeMPU+0x4f4>)
 8000998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800099c:	6013      	str	r3, [r2, #0]
	  HAL_Delay(delayVal);
 800099e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fb53 	bl	800104c <HAL_Delay>



	  // stop condition
	  HAL_GPIO_WritePin(gpioTypeSCL, sclPin, GPIO_PIN_SET);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	2201      	movs	r2, #1
 80009ac:	4619      	mov	r1, r3
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 fdf2 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 80009b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fb48 	bl	800104c <HAL_Delay>
	  HAL_GPIO_WritePin(gpioTypeSDA, sdaPin, GPIO_PIN_SET);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 fde7 	bl	8001598 <HAL_GPIO_WritePin>
	  HAL_Delay(delayVal);
 80009ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fb3d 	bl	800104c <HAL_Delay>
}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020000 	.word	0x40020000
 80009e0:	080030a0 	.word	0x080030a0
 80009e4:	0800308c 	.word	0x0800308c

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f000 fabb 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f82f 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 f8c3 	bl	8000b80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009fa:	f000 f897 	bl	8000b2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int mpuDeviceAddress = 0x68; // first 7 bits of i2c data
 80009fe:	2368      	movs	r3, #104	@ 0x68
 8000a00:	617b      	str	r3, [r7, #20]
    //  int acclZAxisRegisterBits15_8 = 0x3F; // 0x3f, 0x40
    //  int acclZAxisRegisterBits7_0 = 0x40;
      int powerRegister = 0x6B;
 8000a02:	236b      	movs	r3, #107	@ 0x6b
 8000a04:	613b      	str	r3, [r7, #16]

      #define gpioTypeSDA GPIOA
      // int sdaPin = GPIO_PIN_8;

      #define gpioTypeSCL GPIOA
       int sclPin = GPIO_PIN_9;
 8000a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0a:	60fb      	str	r3, [r7, #12]

       int delayVal = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]

      int acclZ = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("done\r\n");
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <main+0x64>)
 8000a16:	f001 ff95 	bl	8002944 <puts>

      HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	@ 0x64
 8000a1c:	f000 fb16 	bl	800104c <HAL_Delay>
	  writeMPU(GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9, mpuDeviceAddress, powerRegister, 0, 5);
 8000a20:	2305      	movs	r3, #5
 8000a22:	9303      	str	r3, [sp, #12]
 8000a24:	2300      	movs	r3, #0
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <main+0x68>)
 8000a36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <main+0x68>)
 8000a3c:	f7ff fd54 	bl	80004e8 <writeMPU>
	  printf("done\r\n");
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <main+0x64>)
 8000a42:	f001 ff7f 	bl	8002944 <puts>
	  printf("done\r\n");
 8000a46:	bf00      	nop
 8000a48:	e7e4      	b.n	8000a14 <main+0x2c>
 8000a4a:	bf00      	nop
 8000a4c:	080030bc 	.word	0x080030bc
 8000a50:	40020000 	.word	0x40020000

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	@ 0x50
 8000a58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	@ 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 f84e 	bl	8002b04 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a28      	ldr	r2, [pc, #160]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b26      	ldr	r3, [pc, #152]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <SystemClock_Config+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <SystemClock_Config+0xd4>)
 8000aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <SystemClock_Config+0xd4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2310      	movs	r3, #16
 8000abe:	633b      	str	r3, [r7, #48]	@ 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLN = 336;
 8000acc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ad0:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd74 	bl	80015cc <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000aea:	f000 f8b9 	bl	8000c60 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afe:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 ffd6 	bl	8001abc <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xc6>
	  {
	    Error_Handler();
 8000b16:	f000 f8a3 	bl	8000c60 <Error_Handler>
	  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	@ 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_USART2_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f001 f9ca 	bl	8001efc <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 f877 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a26      	ldr	r2, [pc, #152]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_GPIO_Init+0xd4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c0c:	4812      	ldr	r0, [pc, #72]	@ (8000c58 <MX_GPIO_Init+0xd8>)
 8000c0e:	f000 fcc3 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <MX_GPIO_Init+0xdc>)
 8000c2a:	f000 fb19 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000c2e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_GPIO_Init+0xd8>)
 8000c48:	f000 fb0a 	bl	8001260 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	@ 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020800 	.word	0x40020800

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000caa:	2007      	movs	r0, #7
 8000cac:	f000 faa4 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	@ (8000d40 <HAL_UART_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <HAL_UART_MspInit+0x8c>)
 8000d32:	f000 fa95 	bl	8001260 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 f933 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e00a      	b.n	8000dd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	60ba      	str	r2, [r7, #8]
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dbf0      	blt.n	8000dbc <_read+0x12>
  }

  return len;
 8000dda:	687b      	ldr	r3, [r7, #4]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e009      	b.n	8000e0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	60ba      	str	r2, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb60 	bl	80004c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3301      	adds	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dbf1      	blt.n	8000df6 <_write+0x12>
  }
  return len;
 8000e12:	687b      	ldr	r3, [r7, #4]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_close>:

int _close(int file)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e44:	605a      	str	r2, [r3, #4]
  return 0;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_isatty>:

int _isatty(int file)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5c:	2301      	movs	r3, #1
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f001 fe74 	bl	8002ba0 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20018000 	.word	0x20018000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	200000cc 	.word	0x200000cc
 8000eec:	20000220 	.word	0x20000220

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f001 fe33 	bl	8002bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fd4f 	bl	80009e8 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f58:	080030ec 	.word	0x080030ec
  ldr r2, =_sbss
 8000f5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f60:	20000220 	.word	0x20000220

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f931 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fe66 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f93b 	bl	8001246 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f911 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000008 	.word	0x20000008
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	200000d0 	.word	0x200000d0

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200000d0 	.word	0x200000d0

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	@ (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	@ 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff47 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff5c 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff8e 	bl	800114c <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffb0 	bl	80011b4 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e159      	b.n	8001530 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 8148 	bne.w	800152a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d005      	beq.n	80012b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d130      	bne.n	8001314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 0201 	and.w	r2, r3, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b03      	cmp	r3, #3
 800131e:	d017      	beq.n	8001350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d123      	bne.n	80013a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	69b9      	ldr	r1, [r7, #24]
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0203 	and.w	r2, r3, #3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a2 	beq.w	800152a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b57      	ldr	r3, [pc, #348]	@ (8001548 <HAL_GPIO_Init+0x2e8>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a56      	ldr	r2, [pc, #344]	@ (8001548 <HAL_GPIO_Init+0x2e8>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b54      	ldr	r3, [pc, #336]	@ (8001548 <HAL_GPIO_Init+0x2e8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001402:	4a52      	ldr	r2, [pc, #328]	@ (800154c <HAL_GPIO_Init+0x2ec>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a49      	ldr	r2, [pc, #292]	@ (8001550 <HAL_GPIO_Init+0x2f0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x202>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a48      	ldr	r2, [pc, #288]	@ (8001554 <HAL_GPIO_Init+0x2f4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x1fe>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a47      	ldr	r2, [pc, #284]	@ (8001558 <HAL_GPIO_Init+0x2f8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x1fa>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a46      	ldr	r2, [pc, #280]	@ (800155c <HAL_GPIO_Init+0x2fc>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x1f6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a45      	ldr	r2, [pc, #276]	@ (8001560 <HAL_GPIO_Init+0x300>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x1f2>
 800144e:	2304      	movs	r3, #4
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001452:	2307      	movs	r3, #7
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x204>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x204>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x204>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4935      	ldr	r1, [pc, #212]	@ (800154c <HAL_GPIO_Init+0x2ec>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001482:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <HAL_GPIO_Init+0x304>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d0:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001564 <HAL_GPIO_Init+0x304>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_GPIO_Init+0x304>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001524:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <HAL_GPIO_Init+0x304>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f aea2 	bls.w	800127c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40021000 	.word	0x40021000
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e001      	b.n	800158a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e267      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d075      	beq.n	80016d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015ea:	4b88      	ldr	r3, [pc, #544]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d00c      	beq.n	8001610 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4b85      	ldr	r3, [pc, #532]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d112      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4b82      	ldr	r3, [pc, #520]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800160a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800160e:	d10b      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	4b7e      	ldr	r3, [pc, #504]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d05b      	beq.n	80016d4 <HAL_RCC_OscConfig+0x108>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d157      	bne.n	80016d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e242      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x74>
 8001632:	4b76      	ldr	r3, [pc, #472]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a75      	ldr	r2, [pc, #468]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x98>
 800164a:	4b70      	ldr	r3, [pc, #448]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6f      	ldr	r2, [pc, #444]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6d      	ldr	r3, [pc, #436]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6c      	ldr	r2, [pc, #432]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xb0>
 8001664:	4b69      	ldr	r3, [pc, #420]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a68      	ldr	r2, [pc, #416]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b66      	ldr	r3, [pc, #408]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a65      	ldr	r2, [pc, #404]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fcd6 	bl	8001034 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fcd2 	bl	8001034 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	@ 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e207      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b5b      	ldr	r3, [pc, #364]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xc0>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fcc2 	bl	8001034 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fcbe 	bl	8001034 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	@ 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1f3      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b51      	ldr	r3, [pc, #324]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0xe8>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016e2:	4b4a      	ldr	r3, [pc, #296]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b47      	ldr	r3, [pc, #284]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b44      	ldr	r3, [pc, #272]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b41      	ldr	r3, [pc, #260]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1c7      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4937      	ldr	r1, [pc, #220]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <HAL_RCC_OscConfig+0x244>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fc77 	bl	8001034 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fc73 	bl	8001034 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1a8      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4925      	ldr	r1, [pc, #148]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_RCC_OscConfig+0x244>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fc56 	bl	8001034 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fc52 	bl	8001034 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e187      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d036      	beq.n	8001824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d016      	beq.n	80017ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_RCC_OscConfig+0x248>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc36 	bl	8001034 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc32 	bl	8001034 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e167      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_RCC_OscConfig+0x240>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x200>
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_RCC_OscConfig+0x248>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fc1f 	bl	8001034 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e00e      	b.n	8001818 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff fc1b 	bl	8001034 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d907      	bls.n	8001818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e150      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	42470000 	.word	0x42470000
 8001814:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b88      	ldr	r3, [pc, #544]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ea      	bne.n	80017fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8097 	beq.w	8001960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b81      	ldr	r3, [pc, #516]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b7d      	ldr	r3, [pc, #500]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b7a      	ldr	r3, [pc, #488]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b77      	ldr	r3, [pc, #476]	@ (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b74      	ldr	r3, [pc, #464]	@ (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a73      	ldr	r2, [pc, #460]	@ (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff fbdb 	bl	8001034 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff fbd7 	bl	8001034 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e10c      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b6a      	ldr	r3, [pc, #424]	@ (8001a40 <HAL_RCC_OscConfig+0x474>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2ea>
 80018a8:	4b64      	ldr	r3, [pc, #400]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ac:	4a63      	ldr	r2, [pc, #396]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x324>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x30c>
 80018be:	4b5f      	ldr	r3, [pc, #380]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ca:	4b5c      	ldr	r3, [pc, #368]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	4a5b      	ldr	r2, [pc, #364]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x324>
 80018d8:	4b58      	ldr	r3, [pc, #352]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018dc:	4a57      	ldr	r2, [pc, #348]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e4:	4b55      	ldr	r3, [pc, #340]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e8:	4a54      	ldr	r2, [pc, #336]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d015      	beq.n	8001924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fb9c 	bl	8001034 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fb98 	bl	8001034 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0cb      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	4b49      	ldr	r3, [pc, #292]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0ee      	beq.n	8001900 <HAL_RCC_OscConfig+0x334>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fb86 	bl	8001034 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fb82 	bl	8001034 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0b5      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001942:	4b3e      	ldr	r3, [pc, #248]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ee      	bne.n	800192c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	4a38      	ldr	r2, [pc, #224]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a1 	beq.w	8001aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196a:	4b34      	ldr	r3, [pc, #208]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d05c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d141      	bne.n	8001a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_RCC_OscConfig+0x478>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb56 	bl	8001034 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fb52 	bl	8001034 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e087      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	491b      	ldr	r1, [pc, #108]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_RCC_OscConfig+0x478>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fb2b 	bl	8001034 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fb27 	bl	8001034 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e05c      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x416>
 8001a00:	e054      	b.n	8001aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <HAL_RCC_OscConfig+0x478>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fb14 	bl	8001034 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff fb10 	bl	8001034 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e045      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_RCC_OscConfig+0x470>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x444>
 8001a2e:	e03d      	b.n	8001aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e038      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000
 8001a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ec>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d028      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d121      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d11a      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d111      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0cc      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b68      	ldr	r3, [pc, #416]	@ (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d90c      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b65      	ldr	r3, [pc, #404]	@ (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	@ (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a58      	ldr	r2, [pc, #352]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d044      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d119      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e067      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b37      	ldr	r3, [pc, #220]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4934      	ldr	r1, [pc, #208]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff fa42 	bl	8001034 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff fa3e 	bl	8001034 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e04f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d20c      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f821 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490a      	ldr	r1, [pc, #40]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f9a2 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	080030c4 	.word	0x080030c4
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c8c:	b094      	sub	sp, #80	@ 0x50
 8001c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca0:	4b79      	ldr	r3, [pc, #484]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d00d      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	f200 80e1 	bhi.w	8001e74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x34>
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cba:	e0db      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cbc:	4b73      	ldr	r3, [pc, #460]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc0:	e0db      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cc2:	4b73      	ldr	r3, [pc, #460]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc6:	e0d8      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cde:	4b6a      	ldr	r3, [pc, #424]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	099b      	lsrs	r3, r3, #6
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ce8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0159      	lsls	r1, r3, #5
 8001d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0c:	0150      	lsls	r0, r2, #5
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4621      	mov	r1, r4
 8001d14:	1a51      	subs	r1, r2, r1
 8001d16:	6139      	str	r1, [r7, #16]
 8001d18:	4629      	mov	r1, r5
 8001d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d2c:	4659      	mov	r1, fp
 8001d2e:	018b      	lsls	r3, r1, #6
 8001d30:	4651      	mov	r1, sl
 8001d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d36:	4651      	mov	r1, sl
 8001d38:	018a      	lsls	r2, r1, #6
 8001d3a:	4651      	mov	r1, sl
 8001d3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d40:	4659      	mov	r1, fp
 8001d42:	eb63 0901 	sbc.w	r9, r3, r1
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	eb18 0303 	adds.w	r3, r8, r3
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	462b      	mov	r3, r5
 8001d68:	eb49 0303 	adc.w	r3, r9, r3
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	024b      	lsls	r3, r1, #9
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d84:	4621      	mov	r1, r4
 8001d86:	024a      	lsls	r2, r1, #9
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d8e:	2200      	movs	r2, #0
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d98:	f7fe fa1c 	bl	80001d4 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001da4:	e058      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da6:	4b38      	ldr	r3, [pc, #224]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	2200      	movs	r2, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	4611      	mov	r1, r2
 8001db2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	0159      	lsls	r1, r3, #5
 8001dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd2:	0150      	lsls	r0, r2, #5
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4641      	mov	r1, r8
 8001dda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001df0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001df4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dfc:	eb63 050b 	sbc.w	r5, r3, fp
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	00eb      	lsls	r3, r5, #3
 8001e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0e:	00e2      	lsls	r2, r4, #3
 8001e10:	4614      	mov	r4, r2
 8001e12:	461d      	mov	r5, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	18e3      	adds	r3, r4, r3
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	eb45 0303 	adc.w	r3, r5, r3
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	028b      	lsls	r3, r1, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e38:	4621      	mov	r1, r4
 8001e3a:	028a      	lsls	r2, r1, #10
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e42:	2200      	movs	r2, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	61fa      	str	r2, [r7, #28]
 8001e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e4c:	f7fe f9c2 	bl	80001d4 <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4613      	mov	r3, r2
 8001e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e72:	e002      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3750      	adds	r7, #80	@ 0x50
 8001e80:	46bd      	mov	sp, r7
 8001e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a9b      	lsrs	r3, r3, #10
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4903      	ldr	r1, [pc, #12]	@ (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	080030d4 	.word	0x080030d4

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed8:	f7ff ffdc 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0b5b      	lsrs	r3, r3, #13
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	@ (8001ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	080030d4 	.word	0x080030d4

08001efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e042      	b.n	8001f94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe feca 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	@ 0x24
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f973 	bl	800222c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d175      	bne.n	80020a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_UART_Transmit+0x2c>
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e06e      	b.n	80020aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2221      	movs	r2, #33	@ 0x21
 8001fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fda:	f7ff f82b 	bl	8001034 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	88fa      	ldrh	r2, [r7, #6]
 8001fe4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ff4:	d108      	bne.n	8002008 <HAL_UART_Transmit+0x6c>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d104      	bne.n	8002008 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e003      	b.n	8002010 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002010:	e02e      	b.n	8002070 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f848 	bl	80020b2 <UART_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e03a      	b.n	80020aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10b      	bne.n	8002052 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	3302      	adds	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	e007      	b.n	8002062 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1cb      	bne.n	8002012 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	2140      	movs	r1, #64	@ 0x40
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f814 	bl	80020b2 <UART_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e006      	b.n	80020aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c2:	e03b      	b.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d037      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020cc:	f7fe ffb2 	bl	8001034 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	6a3a      	ldr	r2, [r7, #32]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e03a      	b.n	800215c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d023      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d020      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b40      	cmp	r3, #64	@ 0x40
 80020fe:	d01d      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d116      	bne.n	800213c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f81d 	bl	8002164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2208      	movs	r2, #8
 800212e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e00f      	b.n	800215c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4013      	ands	r3, r2
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d0b4      	beq.n	80020c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b095      	sub	sp, #84	@ 0x54
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	330c      	adds	r3, #12
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002176:	e853 3f00 	ldrex	r3, [r3]
 800217a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	330c      	adds	r3, #12
 800218a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800218c:	643a      	str	r2, [r7, #64]	@ 0x40
 800218e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002194:	e841 2300 	strex	r3, r2, [r1]
 8002198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800219a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e5      	bne.n	800216c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3314      	adds	r3, #20
 80021be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021c8:	e841 2300 	strex	r3, r2, [r1]
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e5      	bne.n	80021a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d119      	bne.n	8002210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	330c      	adds	r3, #12
 80021e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	e853 3f00 	ldrex	r3, [r3]
 80021ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f023 0310 	bic.w	r3, r3, #16
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021fc:	61ba      	str	r2, [r7, #24]
 80021fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002200:	6979      	ldr	r1, [r7, #20]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	e841 2300 	strex	r3, r2, [r1]
 8002208:	613b      	str	r3, [r7, #16]
   return(result);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e5      	bne.n	80021dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800221e:	bf00      	nop
 8002220:	3754      	adds	r7, #84	@ 0x54
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800222c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002230:	b0c0      	sub	sp, #256	@ 0x100
 8002232:	af00      	add	r7, sp, #0
 8002234:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	ea40 0301 	orr.w	r3, r0, r1
 8002254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	431a      	orrs	r2, r3
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002284:	f021 010c 	bic.w	r1, r1, #12
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002292:	430b      	orrs	r3, r1
 8002294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80022a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a6:	6999      	ldr	r1, [r3, #24]
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	ea40 0301 	orr.w	r3, r0, r1
 80022b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b8f      	ldr	r3, [pc, #572]	@ (80024f8 <UART_SetConfig+0x2cc>)
 80022bc:	429a      	cmp	r2, r3
 80022be:	d005      	beq.n	80022cc <UART_SetConfig+0xa0>
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b8d      	ldr	r3, [pc, #564]	@ (80024fc <UART_SetConfig+0x2d0>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d104      	bne.n	80022d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022cc:	f7ff fe02 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 80022d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80022d4:	e003      	b.n	80022de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022d6:	f7ff fde9 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 80022da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022e8:	f040 810c 	bne.w	8002504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022f0:	2200      	movs	r2, #0
 80022f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022fe:	4622      	mov	r2, r4
 8002300:	462b      	mov	r3, r5
 8002302:	1891      	adds	r1, r2, r2
 8002304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002306:	415b      	adcs	r3, r3
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800230a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800230e:	4621      	mov	r1, r4
 8002310:	eb12 0801 	adds.w	r8, r2, r1
 8002314:	4629      	mov	r1, r5
 8002316:	eb43 0901 	adc.w	r9, r3, r1
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800232a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800232e:	4690      	mov	r8, r2
 8002330:	4699      	mov	r9, r3
 8002332:	4623      	mov	r3, r4
 8002334:	eb18 0303 	adds.w	r3, r8, r3
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800233c:	462b      	mov	r3, r5
 800233e:	eb49 0303 	adc.w	r3, r9, r3
 8002342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800235a:	460b      	mov	r3, r1
 800235c:	18db      	adds	r3, r3, r3
 800235e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002360:	4613      	mov	r3, r2
 8002362:	eb42 0303 	adc.w	r3, r2, r3
 8002366:	657b      	str	r3, [r7, #84]	@ 0x54
 8002368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800236c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002370:	f7fd ff30 	bl	80001d4 <__aeabi_uldivmod>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4b61      	ldr	r3, [pc, #388]	@ (8002500 <UART_SetConfig+0x2d4>)
 800237a:	fba3 2302 	umull	r2, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	011c      	lsls	r4, r3, #4
 8002382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002386:	2200      	movs	r2, #0
 8002388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800238c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002394:	4642      	mov	r2, r8
 8002396:	464b      	mov	r3, r9
 8002398:	1891      	adds	r1, r2, r2
 800239a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800239c:	415b      	adcs	r3, r3
 800239e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023a4:	4641      	mov	r1, r8
 80023a6:	eb12 0a01 	adds.w	sl, r2, r1
 80023aa:	4649      	mov	r1, r9
 80023ac:	eb43 0b01 	adc.w	fp, r3, r1
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c4:	4692      	mov	sl, r2
 80023c6:	469b      	mov	fp, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	eb1a 0303 	adds.w	r3, sl, r3
 80023ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023d2:	464b      	mov	r3, r9
 80023d4:	eb4b 0303 	adc.w	r3, fp, r3
 80023d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023f0:	460b      	mov	r3, r1
 80023f2:	18db      	adds	r3, r3, r3
 80023f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80023f6:	4613      	mov	r3, r2
 80023f8:	eb42 0303 	adc.w	r3, r2, r3
 80023fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002406:	f7fd fee5 	bl	80001d4 <__aeabi_uldivmod>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4611      	mov	r1, r2
 8002410:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <UART_SetConfig+0x2d4>)
 8002412:	fba3 2301 	umull	r2, r3, r3, r1
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2264      	movs	r2, #100	@ 0x64
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002426:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <UART_SetConfig+0x2d4>)
 8002428:	fba3 2302 	umull	r2, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002434:	441c      	add	r4, r3
 8002436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002448:	4642      	mov	r2, r8
 800244a:	464b      	mov	r3, r9
 800244c:	1891      	adds	r1, r2, r2
 800244e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002450:	415b      	adcs	r3, r3
 8002452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002458:	4641      	mov	r1, r8
 800245a:	1851      	adds	r1, r2, r1
 800245c:	6339      	str	r1, [r7, #48]	@ 0x30
 800245e:	4649      	mov	r1, r9
 8002460:	414b      	adcs	r3, r1
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002470:	4659      	mov	r1, fp
 8002472:	00cb      	lsls	r3, r1, #3
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800247a:	4651      	mov	r1, sl
 800247c:	00ca      	lsls	r2, r1, #3
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	4603      	mov	r3, r0
 8002484:	4642      	mov	r2, r8
 8002486:	189b      	adds	r3, r3, r2
 8002488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800248c:	464b      	mov	r3, r9
 800248e:	460a      	mov	r2, r1
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80024ac:	460b      	mov	r3, r1
 80024ae:	18db      	adds	r3, r3, r3
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024b2:	4613      	mov	r3, r2
 80024b4:	eb42 0303 	adc.w	r3, r2, r3
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024c2:	f7fd fe87 	bl	80001d4 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <UART_SetConfig+0x2d4>)
 80024cc:	fba3 1302 	umull	r1, r3, r3, r2
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	2164      	movs	r1, #100	@ 0x64
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	3332      	adds	r3, #50	@ 0x32
 80024de:	4a08      	ldr	r2, [pc, #32]	@ (8002500 <UART_SetConfig+0x2d4>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4422      	add	r2, r4
 80024f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024f4:	e106      	b.n	8002704 <UART_SetConfig+0x4d8>
 80024f6:	bf00      	nop
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40011400 	.word	0x40011400
 8002500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800250e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002516:	4642      	mov	r2, r8
 8002518:	464b      	mov	r3, r9
 800251a:	1891      	adds	r1, r2, r2
 800251c:	6239      	str	r1, [r7, #32]
 800251e:	415b      	adcs	r3, r3
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24
 8002522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002526:	4641      	mov	r1, r8
 8002528:	1854      	adds	r4, r2, r1
 800252a:	4649      	mov	r1, r9
 800252c:	eb43 0501 	adc.w	r5, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	00eb      	lsls	r3, r5, #3
 800253a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253e:	00e2      	lsls	r2, r4, #3
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	4643      	mov	r3, r8
 8002546:	18e3      	adds	r3, r4, r3
 8002548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800254c:	464b      	mov	r3, r9
 800254e:	eb45 0303 	adc.w	r3, r5, r3
 8002552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002572:	4629      	mov	r1, r5
 8002574:	008b      	lsls	r3, r1, #2
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800257c:	4621      	mov	r1, r4
 800257e:	008a      	lsls	r2, r1, #2
 8002580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002584:	f7fd fe26 	bl	80001d4 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4b60      	ldr	r3, [pc, #384]	@ (8002710 <UART_SetConfig+0x4e4>)
 800258e:	fba3 2302 	umull	r2, r3, r3, r2
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	011c      	lsls	r4, r3, #4
 8002596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800259a:	2200      	movs	r2, #0
 800259c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025a8:	4642      	mov	r2, r8
 80025aa:	464b      	mov	r3, r9
 80025ac:	1891      	adds	r1, r2, r2
 80025ae:	61b9      	str	r1, [r7, #24]
 80025b0:	415b      	adcs	r3, r3
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b8:	4641      	mov	r1, r8
 80025ba:	1851      	adds	r1, r2, r1
 80025bc:	6139      	str	r1, [r7, #16]
 80025be:	4649      	mov	r1, r9
 80025c0:	414b      	adcs	r3, r1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d0:	4659      	mov	r1, fp
 80025d2:	00cb      	lsls	r3, r1, #3
 80025d4:	4651      	mov	r1, sl
 80025d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025da:	4651      	mov	r1, sl
 80025dc:	00ca      	lsls	r2, r1, #3
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	4642      	mov	r2, r8
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025ec:	464b      	mov	r3, r9
 80025ee:	460a      	mov	r2, r1
 80025f0:	eb42 0303 	adc.w	r3, r2, r3
 80025f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002610:	4649      	mov	r1, r9
 8002612:	008b      	lsls	r3, r1, #2
 8002614:	4641      	mov	r1, r8
 8002616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800261a:	4641      	mov	r1, r8
 800261c:	008a      	lsls	r2, r1, #2
 800261e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002622:	f7fd fdd7 	bl	80001d4 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4611      	mov	r1, r2
 800262c:	4b38      	ldr	r3, [pc, #224]	@ (8002710 <UART_SetConfig+0x4e4>)
 800262e:	fba3 2301 	umull	r2, r3, r3, r1
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2264      	movs	r2, #100	@ 0x64
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	1acb      	subs	r3, r1, r3
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	3332      	adds	r3, #50	@ 0x32
 8002640:	4a33      	ldr	r2, [pc, #204]	@ (8002710 <UART_SetConfig+0x4e4>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800264c:	441c      	add	r4, r3
 800264e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002652:	2200      	movs	r2, #0
 8002654:	673b      	str	r3, [r7, #112]	@ 0x70
 8002656:	677a      	str	r2, [r7, #116]	@ 0x74
 8002658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800265c:	4642      	mov	r2, r8
 800265e:	464b      	mov	r3, r9
 8002660:	1891      	adds	r1, r2, r2
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	415b      	adcs	r3, r3
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800266c:	4641      	mov	r1, r8
 800266e:	1851      	adds	r1, r2, r1
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	4649      	mov	r1, r9
 8002674:	414b      	adcs	r3, r1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002684:	4659      	mov	r1, fp
 8002686:	00cb      	lsls	r3, r1, #3
 8002688:	4651      	mov	r1, sl
 800268a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800268e:	4651      	mov	r1, sl
 8002690:	00ca      	lsls	r2, r1, #3
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	4603      	mov	r3, r0
 8002698:	4642      	mov	r2, r8
 800269a:	189b      	adds	r3, r3, r2
 800269c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800269e:	464b      	mov	r3, r9
 80026a0:	460a      	mov	r2, r1
 80026a2:	eb42 0303 	adc.w	r3, r2, r3
 80026a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80026b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80026c0:	4649      	mov	r1, r9
 80026c2:	008b      	lsls	r3, r1, #2
 80026c4:	4641      	mov	r1, r8
 80026c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ca:	4641      	mov	r1, r8
 80026cc:	008a      	lsls	r2, r1, #2
 80026ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80026d2:	f7fd fd7f 	bl	80001d4 <__aeabi_uldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <UART_SetConfig+0x4e4>)
 80026dc:	fba3 1302 	umull	r1, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	2164      	movs	r1, #100	@ 0x64
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	3332      	adds	r3, #50	@ 0x32
 80026ee:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <UART_SetConfig+0x4e4>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	f003 020f 	and.w	r2, r3, #15
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4422      	add	r2, r4
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800270a:	46bd      	mov	sp, r7
 800270c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002710:	51eb851f 	.word	0x51eb851f

08002714 <std>:
 8002714:	2300      	movs	r3, #0
 8002716:	b510      	push	{r4, lr}
 8002718:	4604      	mov	r4, r0
 800271a:	e9c0 3300 	strd	r3, r3, [r0]
 800271e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002722:	6083      	str	r3, [r0, #8]
 8002724:	8181      	strh	r1, [r0, #12]
 8002726:	6643      	str	r3, [r0, #100]	@ 0x64
 8002728:	81c2      	strh	r2, [r0, #14]
 800272a:	6183      	str	r3, [r0, #24]
 800272c:	4619      	mov	r1, r3
 800272e:	2208      	movs	r2, #8
 8002730:	305c      	adds	r0, #92	@ 0x5c
 8002732:	f000 f9e7 	bl	8002b04 <memset>
 8002736:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <std+0x58>)
 8002738:	6263      	str	r3, [r4, #36]	@ 0x24
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <std+0x5c>)
 800273c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <std+0x60>)
 8002740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <std+0x64>)
 8002744:	6323      	str	r3, [r4, #48]	@ 0x30
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <std+0x68>)
 8002748:	6224      	str	r4, [r4, #32]
 800274a:	429c      	cmp	r4, r3
 800274c:	d006      	beq.n	800275c <std+0x48>
 800274e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002752:	4294      	cmp	r4, r2
 8002754:	d002      	beq.n	800275c <std+0x48>
 8002756:	33d0      	adds	r3, #208	@ 0xd0
 8002758:	429c      	cmp	r4, r3
 800275a:	d105      	bne.n	8002768 <std+0x54>
 800275c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002764:	f000 ba46 	b.w	8002bf4 <__retarget_lock_init_recursive>
 8002768:	bd10      	pop	{r4, pc}
 800276a:	bf00      	nop
 800276c:	08002955 	.word	0x08002955
 8002770:	08002977 	.word	0x08002977
 8002774:	080029af 	.word	0x080029af
 8002778:	080029d3 	.word	0x080029d3
 800277c:	200000d4 	.word	0x200000d4

08002780 <stdio_exit_handler>:
 8002780:	4a02      	ldr	r2, [pc, #8]	@ (800278c <stdio_exit_handler+0xc>)
 8002782:	4903      	ldr	r1, [pc, #12]	@ (8002790 <stdio_exit_handler+0x10>)
 8002784:	4803      	ldr	r0, [pc, #12]	@ (8002794 <stdio_exit_handler+0x14>)
 8002786:	f000 b869 	b.w	800285c <_fwalk_sglue>
 800278a:	bf00      	nop
 800278c:	2000000c 	.word	0x2000000c
 8002790:	08002ef5 	.word	0x08002ef5
 8002794:	2000001c 	.word	0x2000001c

08002798 <cleanup_stdio>:
 8002798:	6841      	ldr	r1, [r0, #4]
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <cleanup_stdio+0x34>)
 800279c:	4299      	cmp	r1, r3
 800279e:	b510      	push	{r4, lr}
 80027a0:	4604      	mov	r4, r0
 80027a2:	d001      	beq.n	80027a8 <cleanup_stdio+0x10>
 80027a4:	f000 fba6 	bl	8002ef4 <_fflush_r>
 80027a8:	68a1      	ldr	r1, [r4, #8]
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <cleanup_stdio+0x38>)
 80027ac:	4299      	cmp	r1, r3
 80027ae:	d002      	beq.n	80027b6 <cleanup_stdio+0x1e>
 80027b0:	4620      	mov	r0, r4
 80027b2:	f000 fb9f 	bl	8002ef4 <_fflush_r>
 80027b6:	68e1      	ldr	r1, [r4, #12]
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <cleanup_stdio+0x3c>)
 80027ba:	4299      	cmp	r1, r3
 80027bc:	d004      	beq.n	80027c8 <cleanup_stdio+0x30>
 80027be:	4620      	mov	r0, r4
 80027c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c4:	f000 bb96 	b.w	8002ef4 <_fflush_r>
 80027c8:	bd10      	pop	{r4, pc}
 80027ca:	bf00      	nop
 80027cc:	200000d4 	.word	0x200000d4
 80027d0:	2000013c 	.word	0x2000013c
 80027d4:	200001a4 	.word	0x200001a4

080027d8 <global_stdio_init.part.0>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <global_stdio_init.part.0+0x30>)
 80027dc:	4c0b      	ldr	r4, [pc, #44]	@ (800280c <global_stdio_init.part.0+0x34>)
 80027de:	4a0c      	ldr	r2, [pc, #48]	@ (8002810 <global_stdio_init.part.0+0x38>)
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	4620      	mov	r0, r4
 80027e4:	2200      	movs	r2, #0
 80027e6:	2104      	movs	r1, #4
 80027e8:	f7ff ff94 	bl	8002714 <std>
 80027ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80027f0:	2201      	movs	r2, #1
 80027f2:	2109      	movs	r1, #9
 80027f4:	f7ff ff8e 	bl	8002714 <std>
 80027f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80027fc:	2202      	movs	r2, #2
 80027fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002802:	2112      	movs	r1, #18
 8002804:	f7ff bf86 	b.w	8002714 <std>
 8002808:	2000020c 	.word	0x2000020c
 800280c:	200000d4 	.word	0x200000d4
 8002810:	08002781 	.word	0x08002781

08002814 <__sfp_lock_acquire>:
 8002814:	4801      	ldr	r0, [pc, #4]	@ (800281c <__sfp_lock_acquire+0x8>)
 8002816:	f000 b9ee 	b.w	8002bf6 <__retarget_lock_acquire_recursive>
 800281a:	bf00      	nop
 800281c:	20000215 	.word	0x20000215

08002820 <__sfp_lock_release>:
 8002820:	4801      	ldr	r0, [pc, #4]	@ (8002828 <__sfp_lock_release+0x8>)
 8002822:	f000 b9e9 	b.w	8002bf8 <__retarget_lock_release_recursive>
 8002826:	bf00      	nop
 8002828:	20000215 	.word	0x20000215

0800282c <__sinit>:
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	f7ff fff0 	bl	8002814 <__sfp_lock_acquire>
 8002834:	6a23      	ldr	r3, [r4, #32]
 8002836:	b11b      	cbz	r3, 8002840 <__sinit+0x14>
 8002838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800283c:	f7ff bff0 	b.w	8002820 <__sfp_lock_release>
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <__sinit+0x28>)
 8002842:	6223      	str	r3, [r4, #32]
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__sinit+0x2c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f5      	bne.n	8002838 <__sinit+0xc>
 800284c:	f7ff ffc4 	bl	80027d8 <global_stdio_init.part.0>
 8002850:	e7f2      	b.n	8002838 <__sinit+0xc>
 8002852:	bf00      	nop
 8002854:	08002799 	.word	0x08002799
 8002858:	2000020c 	.word	0x2000020c

0800285c <_fwalk_sglue>:
 800285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002860:	4607      	mov	r7, r0
 8002862:	4688      	mov	r8, r1
 8002864:	4614      	mov	r4, r2
 8002866:	2600      	movs	r6, #0
 8002868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800286c:	f1b9 0901 	subs.w	r9, r9, #1
 8002870:	d505      	bpl.n	800287e <_fwalk_sglue+0x22>
 8002872:	6824      	ldr	r4, [r4, #0]
 8002874:	2c00      	cmp	r4, #0
 8002876:	d1f7      	bne.n	8002868 <_fwalk_sglue+0xc>
 8002878:	4630      	mov	r0, r6
 800287a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800287e:	89ab      	ldrh	r3, [r5, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d907      	bls.n	8002894 <_fwalk_sglue+0x38>
 8002884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002888:	3301      	adds	r3, #1
 800288a:	d003      	beq.n	8002894 <_fwalk_sglue+0x38>
 800288c:	4629      	mov	r1, r5
 800288e:	4638      	mov	r0, r7
 8002890:	47c0      	blx	r8
 8002892:	4306      	orrs	r6, r0
 8002894:	3568      	adds	r5, #104	@ 0x68
 8002896:	e7e9      	b.n	800286c <_fwalk_sglue+0x10>

08002898 <_puts_r>:
 8002898:	6a03      	ldr	r3, [r0, #32]
 800289a:	b570      	push	{r4, r5, r6, lr}
 800289c:	6884      	ldr	r4, [r0, #8]
 800289e:	4605      	mov	r5, r0
 80028a0:	460e      	mov	r6, r1
 80028a2:	b90b      	cbnz	r3, 80028a8 <_puts_r+0x10>
 80028a4:	f7ff ffc2 	bl	800282c <__sinit>
 80028a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028aa:	07db      	lsls	r3, r3, #31
 80028ac:	d405      	bmi.n	80028ba <_puts_r+0x22>
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	0598      	lsls	r0, r3, #22
 80028b2:	d402      	bmi.n	80028ba <_puts_r+0x22>
 80028b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028b6:	f000 f99e 	bl	8002bf6 <__retarget_lock_acquire_recursive>
 80028ba:	89a3      	ldrh	r3, [r4, #12]
 80028bc:	0719      	lsls	r1, r3, #28
 80028be:	d502      	bpl.n	80028c6 <_puts_r+0x2e>
 80028c0:	6923      	ldr	r3, [r4, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d135      	bne.n	8002932 <_puts_r+0x9a>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4628      	mov	r0, r5
 80028ca:	f000 f8c5 	bl	8002a58 <__swsetup_r>
 80028ce:	b380      	cbz	r0, 8002932 <_puts_r+0x9a>
 80028d0:	f04f 35ff 	mov.w	r5, #4294967295
 80028d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028d6:	07da      	lsls	r2, r3, #31
 80028d8:	d405      	bmi.n	80028e6 <_puts_r+0x4e>
 80028da:	89a3      	ldrh	r3, [r4, #12]
 80028dc:	059b      	lsls	r3, r3, #22
 80028de:	d402      	bmi.n	80028e6 <_puts_r+0x4e>
 80028e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028e2:	f000 f989 	bl	8002bf8 <__retarget_lock_release_recursive>
 80028e6:	4628      	mov	r0, r5
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da04      	bge.n	80028f8 <_puts_r+0x60>
 80028ee:	69a2      	ldr	r2, [r4, #24]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	dc17      	bgt.n	8002924 <_puts_r+0x8c>
 80028f4:	290a      	cmp	r1, #10
 80028f6:	d015      	beq.n	8002924 <_puts_r+0x8c>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	6022      	str	r2, [r4, #0]
 80028fe:	7019      	strb	r1, [r3, #0]
 8002900:	68a3      	ldr	r3, [r4, #8]
 8002902:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002906:	3b01      	subs	r3, #1
 8002908:	60a3      	str	r3, [r4, #8]
 800290a:	2900      	cmp	r1, #0
 800290c:	d1ed      	bne.n	80028ea <_puts_r+0x52>
 800290e:	2b00      	cmp	r3, #0
 8002910:	da11      	bge.n	8002936 <_puts_r+0x9e>
 8002912:	4622      	mov	r2, r4
 8002914:	210a      	movs	r1, #10
 8002916:	4628      	mov	r0, r5
 8002918:	f000 f85f 	bl	80029da <__swbuf_r>
 800291c:	3001      	adds	r0, #1
 800291e:	d0d7      	beq.n	80028d0 <_puts_r+0x38>
 8002920:	250a      	movs	r5, #10
 8002922:	e7d7      	b.n	80028d4 <_puts_r+0x3c>
 8002924:	4622      	mov	r2, r4
 8002926:	4628      	mov	r0, r5
 8002928:	f000 f857 	bl	80029da <__swbuf_r>
 800292c:	3001      	adds	r0, #1
 800292e:	d1e7      	bne.n	8002900 <_puts_r+0x68>
 8002930:	e7ce      	b.n	80028d0 <_puts_r+0x38>
 8002932:	3e01      	subs	r6, #1
 8002934:	e7e4      	b.n	8002900 <_puts_r+0x68>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	6022      	str	r2, [r4, #0]
 800293c:	220a      	movs	r2, #10
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e7ee      	b.n	8002920 <_puts_r+0x88>
	...

08002944 <puts>:
 8002944:	4b02      	ldr	r3, [pc, #8]	@ (8002950 <puts+0xc>)
 8002946:	4601      	mov	r1, r0
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	f7ff bfa5 	b.w	8002898 <_puts_r>
 800294e:	bf00      	nop
 8002950:	20000018 	.word	0x20000018

08002954 <__sread>:
 8002954:	b510      	push	{r4, lr}
 8002956:	460c      	mov	r4, r1
 8002958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295c:	f000 f8fc 	bl	8002b58 <_read_r>
 8002960:	2800      	cmp	r0, #0
 8002962:	bfab      	itete	ge
 8002964:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002966:	89a3      	ldrhlt	r3, [r4, #12]
 8002968:	181b      	addge	r3, r3, r0
 800296a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800296e:	bfac      	ite	ge
 8002970:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002972:	81a3      	strhlt	r3, [r4, #12]
 8002974:	bd10      	pop	{r4, pc}

08002976 <__swrite>:
 8002976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800297a:	461f      	mov	r7, r3
 800297c:	898b      	ldrh	r3, [r1, #12]
 800297e:	05db      	lsls	r3, r3, #23
 8002980:	4605      	mov	r5, r0
 8002982:	460c      	mov	r4, r1
 8002984:	4616      	mov	r6, r2
 8002986:	d505      	bpl.n	8002994 <__swrite+0x1e>
 8002988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298c:	2302      	movs	r3, #2
 800298e:	2200      	movs	r2, #0
 8002990:	f000 f8d0 	bl	8002b34 <_lseek_r>
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800299a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800299e:	81a3      	strh	r3, [r4, #12]
 80029a0:	4632      	mov	r2, r6
 80029a2:	463b      	mov	r3, r7
 80029a4:	4628      	mov	r0, r5
 80029a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029aa:	f000 b8e7 	b.w	8002b7c <_write_r>

080029ae <__sseek>:
 80029ae:	b510      	push	{r4, lr}
 80029b0:	460c      	mov	r4, r1
 80029b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b6:	f000 f8bd 	bl	8002b34 <_lseek_r>
 80029ba:	1c43      	adds	r3, r0, #1
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	bf15      	itete	ne
 80029c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80029c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80029c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80029ca:	81a3      	strheq	r3, [r4, #12]
 80029cc:	bf18      	it	ne
 80029ce:	81a3      	strhne	r3, [r4, #12]
 80029d0:	bd10      	pop	{r4, pc}

080029d2 <__sclose>:
 80029d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d6:	f000 b89d 	b.w	8002b14 <_close_r>

080029da <__swbuf_r>:
 80029da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029dc:	460e      	mov	r6, r1
 80029de:	4614      	mov	r4, r2
 80029e0:	4605      	mov	r5, r0
 80029e2:	b118      	cbz	r0, 80029ec <__swbuf_r+0x12>
 80029e4:	6a03      	ldr	r3, [r0, #32]
 80029e6:	b90b      	cbnz	r3, 80029ec <__swbuf_r+0x12>
 80029e8:	f7ff ff20 	bl	800282c <__sinit>
 80029ec:	69a3      	ldr	r3, [r4, #24]
 80029ee:	60a3      	str	r3, [r4, #8]
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	071a      	lsls	r2, r3, #28
 80029f4:	d501      	bpl.n	80029fa <__swbuf_r+0x20>
 80029f6:	6923      	ldr	r3, [r4, #16]
 80029f8:	b943      	cbnz	r3, 8002a0c <__swbuf_r+0x32>
 80029fa:	4621      	mov	r1, r4
 80029fc:	4628      	mov	r0, r5
 80029fe:	f000 f82b 	bl	8002a58 <__swsetup_r>
 8002a02:	b118      	cbz	r0, 8002a0c <__swbuf_r+0x32>
 8002a04:	f04f 37ff 	mov.w	r7, #4294967295
 8002a08:	4638      	mov	r0, r7
 8002a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	6922      	ldr	r2, [r4, #16]
 8002a10:	1a98      	subs	r0, r3, r2
 8002a12:	6963      	ldr	r3, [r4, #20]
 8002a14:	b2f6      	uxtb	r6, r6
 8002a16:	4283      	cmp	r3, r0
 8002a18:	4637      	mov	r7, r6
 8002a1a:	dc05      	bgt.n	8002a28 <__swbuf_r+0x4e>
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f000 fa68 	bl	8002ef4 <_fflush_r>
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d1ed      	bne.n	8002a04 <__swbuf_r+0x2a>
 8002a28:	68a3      	ldr	r3, [r4, #8]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60a3      	str	r3, [r4, #8]
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	6022      	str	r2, [r4, #0]
 8002a34:	701e      	strb	r6, [r3, #0]
 8002a36:	6962      	ldr	r2, [r4, #20]
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d004      	beq.n	8002a48 <__swbuf_r+0x6e>
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	07db      	lsls	r3, r3, #31
 8002a42:	d5e1      	bpl.n	8002a08 <__swbuf_r+0x2e>
 8002a44:	2e0a      	cmp	r6, #10
 8002a46:	d1df      	bne.n	8002a08 <__swbuf_r+0x2e>
 8002a48:	4621      	mov	r1, r4
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f000 fa52 	bl	8002ef4 <_fflush_r>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d0d9      	beq.n	8002a08 <__swbuf_r+0x2e>
 8002a54:	e7d6      	b.n	8002a04 <__swbuf_r+0x2a>
	...

08002a58 <__swsetup_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4b29      	ldr	r3, [pc, #164]	@ (8002b00 <__swsetup_r+0xa8>)
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	460c      	mov	r4, r1
 8002a62:	b118      	cbz	r0, 8002a6c <__swsetup_r+0x14>
 8002a64:	6a03      	ldr	r3, [r0, #32]
 8002a66:	b90b      	cbnz	r3, 8002a6c <__swsetup_r+0x14>
 8002a68:	f7ff fee0 	bl	800282c <__sinit>
 8002a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a70:	0719      	lsls	r1, r3, #28
 8002a72:	d422      	bmi.n	8002aba <__swsetup_r+0x62>
 8002a74:	06da      	lsls	r2, r3, #27
 8002a76:	d407      	bmi.n	8002a88 <__swsetup_r+0x30>
 8002a78:	2209      	movs	r2, #9
 8002a7a:	602a      	str	r2, [r5, #0]
 8002a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a80:	81a3      	strh	r3, [r4, #12]
 8002a82:	f04f 30ff 	mov.w	r0, #4294967295
 8002a86:	e033      	b.n	8002af0 <__swsetup_r+0x98>
 8002a88:	0758      	lsls	r0, r3, #29
 8002a8a:	d512      	bpl.n	8002ab2 <__swsetup_r+0x5a>
 8002a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a8e:	b141      	cbz	r1, 8002aa2 <__swsetup_r+0x4a>
 8002a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a94:	4299      	cmp	r1, r3
 8002a96:	d002      	beq.n	8002a9e <__swsetup_r+0x46>
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f000 f8af 	bl	8002bfc <_free_r>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002aa8:	81a3      	strh	r3, [r4, #12]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	6063      	str	r3, [r4, #4]
 8002aae:	6923      	ldr	r3, [r4, #16]
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	f043 0308 	orr.w	r3, r3, #8
 8002ab8:	81a3      	strh	r3, [r4, #12]
 8002aba:	6923      	ldr	r3, [r4, #16]
 8002abc:	b94b      	cbnz	r3, 8002ad2 <__swsetup_r+0x7a>
 8002abe:	89a3      	ldrh	r3, [r4, #12]
 8002ac0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ac8:	d003      	beq.n	8002ad2 <__swsetup_r+0x7a>
 8002aca:	4621      	mov	r1, r4
 8002acc:	4628      	mov	r0, r5
 8002ace:	f000 fa5f 	bl	8002f90 <__smakebuf_r>
 8002ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ad6:	f013 0201 	ands.w	r2, r3, #1
 8002ada:	d00a      	beq.n	8002af2 <__swsetup_r+0x9a>
 8002adc:	2200      	movs	r2, #0
 8002ade:	60a2      	str	r2, [r4, #8]
 8002ae0:	6962      	ldr	r2, [r4, #20]
 8002ae2:	4252      	negs	r2, r2
 8002ae4:	61a2      	str	r2, [r4, #24]
 8002ae6:	6922      	ldr	r2, [r4, #16]
 8002ae8:	b942      	cbnz	r2, 8002afc <__swsetup_r+0xa4>
 8002aea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002aee:	d1c5      	bne.n	8002a7c <__swsetup_r+0x24>
 8002af0:	bd38      	pop	{r3, r4, r5, pc}
 8002af2:	0799      	lsls	r1, r3, #30
 8002af4:	bf58      	it	pl
 8002af6:	6962      	ldrpl	r2, [r4, #20]
 8002af8:	60a2      	str	r2, [r4, #8]
 8002afa:	e7f4      	b.n	8002ae6 <__swsetup_r+0x8e>
 8002afc:	2000      	movs	r0, #0
 8002afe:	e7f7      	b.n	8002af0 <__swsetup_r+0x98>
 8002b00:	20000018 	.word	0x20000018

08002b04 <memset>:
 8002b04:	4402      	add	r2, r0
 8002b06:	4603      	mov	r3, r0
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <memset+0xa>
 8002b0c:	4770      	bx	lr
 8002b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b12:	e7f9      	b.n	8002b08 <memset+0x4>

08002b14 <_close_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4d06      	ldr	r5, [pc, #24]	@ (8002b30 <_close_r+0x1c>)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	602b      	str	r3, [r5, #0]
 8002b20:	f7fe f97c 	bl	8000e1c <_close>
 8002b24:	1c43      	adds	r3, r0, #1
 8002b26:	d102      	bne.n	8002b2e <_close_r+0x1a>
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	b103      	cbz	r3, 8002b2e <_close_r+0x1a>
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	bd38      	pop	{r3, r4, r5, pc}
 8002b30:	20000210 	.word	0x20000210

08002b34 <_lseek_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4d07      	ldr	r5, [pc, #28]	@ (8002b54 <_lseek_r+0x20>)
 8002b38:	4604      	mov	r4, r0
 8002b3a:	4608      	mov	r0, r1
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	2200      	movs	r2, #0
 8002b40:	602a      	str	r2, [r5, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f7fe f991 	bl	8000e6a <_lseek>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d102      	bne.n	8002b52 <_lseek_r+0x1e>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	b103      	cbz	r3, 8002b52 <_lseek_r+0x1e>
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	20000210 	.word	0x20000210

08002b58 <_read_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4d07      	ldr	r5, [pc, #28]	@ (8002b78 <_read_r+0x20>)
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	4608      	mov	r0, r1
 8002b60:	4611      	mov	r1, r2
 8002b62:	2200      	movs	r2, #0
 8002b64:	602a      	str	r2, [r5, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	f7fe f91f 	bl	8000daa <_read>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d102      	bne.n	8002b76 <_read_r+0x1e>
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	b103      	cbz	r3, 8002b76 <_read_r+0x1e>
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	20000210 	.word	0x20000210

08002b7c <_write_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4d07      	ldr	r5, [pc, #28]	@ (8002b9c <_write_r+0x20>)
 8002b80:	4604      	mov	r4, r0
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	2200      	movs	r2, #0
 8002b88:	602a      	str	r2, [r5, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f7fe f92a 	bl	8000de4 <_write>
 8002b90:	1c43      	adds	r3, r0, #1
 8002b92:	d102      	bne.n	8002b9a <_write_r+0x1e>
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	b103      	cbz	r3, 8002b9a <_write_r+0x1e>
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
 8002b9c:	20000210 	.word	0x20000210

08002ba0 <__errno>:
 8002ba0:	4b01      	ldr	r3, [pc, #4]	@ (8002ba8 <__errno+0x8>)
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000018 	.word	0x20000018

08002bac <__libc_init_array>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	4d0d      	ldr	r5, [pc, #52]	@ (8002be4 <__libc_init_array+0x38>)
 8002bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8002be8 <__libc_init_array+0x3c>)
 8002bb2:	1b64      	subs	r4, r4, r5
 8002bb4:	10a4      	asrs	r4, r4, #2
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	42a6      	cmp	r6, r4
 8002bba:	d109      	bne.n	8002bd0 <__libc_init_array+0x24>
 8002bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8002bec <__libc_init_array+0x40>)
 8002bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8002bf0 <__libc_init_array+0x44>)
 8002bc0:	f000 fa54 	bl	800306c <_init>
 8002bc4:	1b64      	subs	r4, r4, r5
 8002bc6:	10a4      	asrs	r4, r4, #2
 8002bc8:	2600      	movs	r6, #0
 8002bca:	42a6      	cmp	r6, r4
 8002bcc:	d105      	bne.n	8002bda <__libc_init_array+0x2e>
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd4:	4798      	blx	r3
 8002bd6:	3601      	adds	r6, #1
 8002bd8:	e7ee      	b.n	8002bb8 <__libc_init_array+0xc>
 8002bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bde:	4798      	blx	r3
 8002be0:	3601      	adds	r6, #1
 8002be2:	e7f2      	b.n	8002bca <__libc_init_array+0x1e>
 8002be4:	080030e4 	.word	0x080030e4
 8002be8:	080030e4 	.word	0x080030e4
 8002bec:	080030e4 	.word	0x080030e4
 8002bf0:	080030e8 	.word	0x080030e8

08002bf4 <__retarget_lock_init_recursive>:
 8002bf4:	4770      	bx	lr

08002bf6 <__retarget_lock_acquire_recursive>:
 8002bf6:	4770      	bx	lr

08002bf8 <__retarget_lock_release_recursive>:
 8002bf8:	4770      	bx	lr
	...

08002bfc <_free_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4605      	mov	r5, r0
 8002c00:	2900      	cmp	r1, #0
 8002c02:	d041      	beq.n	8002c88 <_free_r+0x8c>
 8002c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c08:	1f0c      	subs	r4, r1, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bfb8      	it	lt
 8002c0e:	18e4      	addlt	r4, r4, r3
 8002c10:	f000 f8e0 	bl	8002dd4 <__malloc_lock>
 8002c14:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <_free_r+0x90>)
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	b933      	cbnz	r3, 8002c28 <_free_r+0x2c>
 8002c1a:	6063      	str	r3, [r4, #4]
 8002c1c:	6014      	str	r4, [r2, #0]
 8002c1e:	4628      	mov	r0, r5
 8002c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c24:	f000 b8dc 	b.w	8002de0 <__malloc_unlock>
 8002c28:	42a3      	cmp	r3, r4
 8002c2a:	d908      	bls.n	8002c3e <_free_r+0x42>
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	1821      	adds	r1, r4, r0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	bf01      	itttt	eq
 8002c34:	6819      	ldreq	r1, [r3, #0]
 8002c36:	685b      	ldreq	r3, [r3, #4]
 8002c38:	1809      	addeq	r1, r1, r0
 8002c3a:	6021      	streq	r1, [r4, #0]
 8002c3c:	e7ed      	b.n	8002c1a <_free_r+0x1e>
 8002c3e:	461a      	mov	r2, r3
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	b10b      	cbz	r3, 8002c48 <_free_r+0x4c>
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d9fa      	bls.n	8002c3e <_free_r+0x42>
 8002c48:	6811      	ldr	r1, [r2, #0]
 8002c4a:	1850      	adds	r0, r2, r1
 8002c4c:	42a0      	cmp	r0, r4
 8002c4e:	d10b      	bne.n	8002c68 <_free_r+0x6c>
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	4401      	add	r1, r0
 8002c54:	1850      	adds	r0, r2, r1
 8002c56:	4283      	cmp	r3, r0
 8002c58:	6011      	str	r1, [r2, #0]
 8002c5a:	d1e0      	bne.n	8002c1e <_free_r+0x22>
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	6053      	str	r3, [r2, #4]
 8002c62:	4408      	add	r0, r1
 8002c64:	6010      	str	r0, [r2, #0]
 8002c66:	e7da      	b.n	8002c1e <_free_r+0x22>
 8002c68:	d902      	bls.n	8002c70 <_free_r+0x74>
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	e7d6      	b.n	8002c1e <_free_r+0x22>
 8002c70:	6820      	ldr	r0, [r4, #0]
 8002c72:	1821      	adds	r1, r4, r0
 8002c74:	428b      	cmp	r3, r1
 8002c76:	bf04      	itt	eq
 8002c78:	6819      	ldreq	r1, [r3, #0]
 8002c7a:	685b      	ldreq	r3, [r3, #4]
 8002c7c:	6063      	str	r3, [r4, #4]
 8002c7e:	bf04      	itt	eq
 8002c80:	1809      	addeq	r1, r1, r0
 8002c82:	6021      	streq	r1, [r4, #0]
 8002c84:	6054      	str	r4, [r2, #4]
 8002c86:	e7ca      	b.n	8002c1e <_free_r+0x22>
 8002c88:	bd38      	pop	{r3, r4, r5, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000021c 	.word	0x2000021c

08002c90 <sbrk_aligned>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	4e0f      	ldr	r6, [pc, #60]	@ (8002cd0 <sbrk_aligned+0x40>)
 8002c94:	460c      	mov	r4, r1
 8002c96:	6831      	ldr	r1, [r6, #0]
 8002c98:	4605      	mov	r5, r0
 8002c9a:	b911      	cbnz	r1, 8002ca2 <sbrk_aligned+0x12>
 8002c9c:	f000 f9d6 	bl	800304c <_sbrk_r>
 8002ca0:	6030      	str	r0, [r6, #0]
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	f000 f9d1 	bl	800304c <_sbrk_r>
 8002caa:	1c43      	adds	r3, r0, #1
 8002cac:	d103      	bne.n	8002cb6 <sbrk_aligned+0x26>
 8002cae:	f04f 34ff 	mov.w	r4, #4294967295
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
 8002cb6:	1cc4      	adds	r4, r0, #3
 8002cb8:	f024 0403 	bic.w	r4, r4, #3
 8002cbc:	42a0      	cmp	r0, r4
 8002cbe:	d0f8      	beq.n	8002cb2 <sbrk_aligned+0x22>
 8002cc0:	1a21      	subs	r1, r4, r0
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	f000 f9c2 	bl	800304c <_sbrk_r>
 8002cc8:	3001      	adds	r0, #1
 8002cca:	d1f2      	bne.n	8002cb2 <sbrk_aligned+0x22>
 8002ccc:	e7ef      	b.n	8002cae <sbrk_aligned+0x1e>
 8002cce:	bf00      	nop
 8002cd0:	20000218 	.word	0x20000218

08002cd4 <_malloc_r>:
 8002cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd8:	1ccd      	adds	r5, r1, #3
 8002cda:	f025 0503 	bic.w	r5, r5, #3
 8002cde:	3508      	adds	r5, #8
 8002ce0:	2d0c      	cmp	r5, #12
 8002ce2:	bf38      	it	cc
 8002ce4:	250c      	movcc	r5, #12
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	4606      	mov	r6, r0
 8002cea:	db01      	blt.n	8002cf0 <_malloc_r+0x1c>
 8002cec:	42a9      	cmp	r1, r5
 8002cee:	d904      	bls.n	8002cfa <_malloc_r+0x26>
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	6033      	str	r3, [r6, #0]
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002dd0 <_malloc_r+0xfc>
 8002cfe:	f000 f869 	bl	8002dd4 <__malloc_lock>
 8002d02:	f8d8 3000 	ldr.w	r3, [r8]
 8002d06:	461c      	mov	r4, r3
 8002d08:	bb44      	cbnz	r4, 8002d5c <_malloc_r+0x88>
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	f7ff ffbf 	bl	8002c90 <sbrk_aligned>
 8002d12:	1c43      	adds	r3, r0, #1
 8002d14:	4604      	mov	r4, r0
 8002d16:	d158      	bne.n	8002dca <_malloc_r+0xf6>
 8002d18:	f8d8 4000 	ldr.w	r4, [r8]
 8002d1c:	4627      	mov	r7, r4
 8002d1e:	2f00      	cmp	r7, #0
 8002d20:	d143      	bne.n	8002daa <_malloc_r+0xd6>
 8002d22:	2c00      	cmp	r4, #0
 8002d24:	d04b      	beq.n	8002dbe <_malloc_r+0xea>
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	4639      	mov	r1, r7
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	eb04 0903 	add.w	r9, r4, r3
 8002d30:	f000 f98c 	bl	800304c <_sbrk_r>
 8002d34:	4581      	cmp	r9, r0
 8002d36:	d142      	bne.n	8002dbe <_malloc_r+0xea>
 8002d38:	6821      	ldr	r1, [r4, #0]
 8002d3a:	1a6d      	subs	r5, r5, r1
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f7ff ffa6 	bl	8002c90 <sbrk_aligned>
 8002d44:	3001      	adds	r0, #1
 8002d46:	d03a      	beq.n	8002dbe <_malloc_r+0xea>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	442b      	add	r3, r5
 8002d4c:	6023      	str	r3, [r4, #0]
 8002d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	bb62      	cbnz	r2, 8002db0 <_malloc_r+0xdc>
 8002d56:	f8c8 7000 	str.w	r7, [r8]
 8002d5a:	e00f      	b.n	8002d7c <_malloc_r+0xa8>
 8002d5c:	6822      	ldr	r2, [r4, #0]
 8002d5e:	1b52      	subs	r2, r2, r5
 8002d60:	d420      	bmi.n	8002da4 <_malloc_r+0xd0>
 8002d62:	2a0b      	cmp	r2, #11
 8002d64:	d917      	bls.n	8002d96 <_malloc_r+0xc2>
 8002d66:	1961      	adds	r1, r4, r5
 8002d68:	42a3      	cmp	r3, r4
 8002d6a:	6025      	str	r5, [r4, #0]
 8002d6c:	bf18      	it	ne
 8002d6e:	6059      	strne	r1, [r3, #4]
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	bf08      	it	eq
 8002d74:	f8c8 1000 	streq.w	r1, [r8]
 8002d78:	5162      	str	r2, [r4, r5]
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f000 f82f 	bl	8002de0 <__malloc_unlock>
 8002d82:	f104 000b 	add.w	r0, r4, #11
 8002d86:	1d23      	adds	r3, r4, #4
 8002d88:	f020 0007 	bic.w	r0, r0, #7
 8002d8c:	1ac2      	subs	r2, r0, r3
 8002d8e:	bf1c      	itt	ne
 8002d90:	1a1b      	subne	r3, r3, r0
 8002d92:	50a3      	strne	r3, [r4, r2]
 8002d94:	e7af      	b.n	8002cf6 <_malloc_r+0x22>
 8002d96:	6862      	ldr	r2, [r4, #4]
 8002d98:	42a3      	cmp	r3, r4
 8002d9a:	bf0c      	ite	eq
 8002d9c:	f8c8 2000 	streq.w	r2, [r8]
 8002da0:	605a      	strne	r2, [r3, #4]
 8002da2:	e7eb      	b.n	8002d7c <_malloc_r+0xa8>
 8002da4:	4623      	mov	r3, r4
 8002da6:	6864      	ldr	r4, [r4, #4]
 8002da8:	e7ae      	b.n	8002d08 <_malloc_r+0x34>
 8002daa:	463c      	mov	r4, r7
 8002dac:	687f      	ldr	r7, [r7, #4]
 8002dae:	e7b6      	b.n	8002d1e <_malloc_r+0x4a>
 8002db0:	461a      	mov	r2, r3
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	42a3      	cmp	r3, r4
 8002db6:	d1fb      	bne.n	8002db0 <_malloc_r+0xdc>
 8002db8:	2300      	movs	r3, #0
 8002dba:	6053      	str	r3, [r2, #4]
 8002dbc:	e7de      	b.n	8002d7c <_malloc_r+0xa8>
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	6033      	str	r3, [r6, #0]
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f000 f80c 	bl	8002de0 <__malloc_unlock>
 8002dc8:	e794      	b.n	8002cf4 <_malloc_r+0x20>
 8002dca:	6005      	str	r5, [r0, #0]
 8002dcc:	e7d6      	b.n	8002d7c <_malloc_r+0xa8>
 8002dce:	bf00      	nop
 8002dd0:	2000021c 	.word	0x2000021c

08002dd4 <__malloc_lock>:
 8002dd4:	4801      	ldr	r0, [pc, #4]	@ (8002ddc <__malloc_lock+0x8>)
 8002dd6:	f7ff bf0e 	b.w	8002bf6 <__retarget_lock_acquire_recursive>
 8002dda:	bf00      	nop
 8002ddc:	20000214 	.word	0x20000214

08002de0 <__malloc_unlock>:
 8002de0:	4801      	ldr	r0, [pc, #4]	@ (8002de8 <__malloc_unlock+0x8>)
 8002de2:	f7ff bf09 	b.w	8002bf8 <__retarget_lock_release_recursive>
 8002de6:	bf00      	nop
 8002de8:	20000214 	.word	0x20000214

08002dec <__sflush_r>:
 8002dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df4:	0716      	lsls	r6, r2, #28
 8002df6:	4605      	mov	r5, r0
 8002df8:	460c      	mov	r4, r1
 8002dfa:	d454      	bmi.n	8002ea6 <__sflush_r+0xba>
 8002dfc:	684b      	ldr	r3, [r1, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	dc02      	bgt.n	8002e08 <__sflush_r+0x1c>
 8002e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dd48      	ble.n	8002e9a <__sflush_r+0xae>
 8002e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e0a:	2e00      	cmp	r6, #0
 8002e0c:	d045      	beq.n	8002e9a <__sflush_r+0xae>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e14:	682f      	ldr	r7, [r5, #0]
 8002e16:	6a21      	ldr	r1, [r4, #32]
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	d030      	beq.n	8002e7e <__sflush_r+0x92>
 8002e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	0759      	lsls	r1, r3, #29
 8002e22:	d505      	bpl.n	8002e30 <__sflush_r+0x44>
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e2a:	b10b      	cbz	r3, 8002e30 <__sflush_r+0x44>
 8002e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	2300      	movs	r3, #0
 8002e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e34:	6a21      	ldr	r1, [r4, #32]
 8002e36:	4628      	mov	r0, r5
 8002e38:	47b0      	blx	r6
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	d106      	bne.n	8002e4e <__sflush_r+0x62>
 8002e40:	6829      	ldr	r1, [r5, #0]
 8002e42:	291d      	cmp	r1, #29
 8002e44:	d82b      	bhi.n	8002e9e <__sflush_r+0xb2>
 8002e46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef0 <__sflush_r+0x104>)
 8002e48:	410a      	asrs	r2, r1
 8002e4a:	07d6      	lsls	r6, r2, #31
 8002e4c:	d427      	bmi.n	8002e9e <__sflush_r+0xb2>
 8002e4e:	2200      	movs	r2, #0
 8002e50:	6062      	str	r2, [r4, #4]
 8002e52:	04d9      	lsls	r1, r3, #19
 8002e54:	6922      	ldr	r2, [r4, #16]
 8002e56:	6022      	str	r2, [r4, #0]
 8002e58:	d504      	bpl.n	8002e64 <__sflush_r+0x78>
 8002e5a:	1c42      	adds	r2, r0, #1
 8002e5c:	d101      	bne.n	8002e62 <__sflush_r+0x76>
 8002e5e:	682b      	ldr	r3, [r5, #0]
 8002e60:	b903      	cbnz	r3, 8002e64 <__sflush_r+0x78>
 8002e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e66:	602f      	str	r7, [r5, #0]
 8002e68:	b1b9      	cbz	r1, 8002e9a <__sflush_r+0xae>
 8002e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	d002      	beq.n	8002e78 <__sflush_r+0x8c>
 8002e72:	4628      	mov	r0, r5
 8002e74:	f7ff fec2 	bl	8002bfc <_free_r>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e7c:	e00d      	b.n	8002e9a <__sflush_r+0xae>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b0      	blx	r6
 8002e84:	4602      	mov	r2, r0
 8002e86:	1c50      	adds	r0, r2, #1
 8002e88:	d1c9      	bne.n	8002e1e <__sflush_r+0x32>
 8002e8a:	682b      	ldr	r3, [r5, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0c6      	beq.n	8002e1e <__sflush_r+0x32>
 8002e90:	2b1d      	cmp	r3, #29
 8002e92:	d001      	beq.n	8002e98 <__sflush_r+0xac>
 8002e94:	2b16      	cmp	r3, #22
 8002e96:	d11e      	bne.n	8002ed6 <__sflush_r+0xea>
 8002e98:	602f      	str	r7, [r5, #0]
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	e022      	b.n	8002ee4 <__sflush_r+0xf8>
 8002e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	e01b      	b.n	8002ede <__sflush_r+0xf2>
 8002ea6:	690f      	ldr	r7, [r1, #16]
 8002ea8:	2f00      	cmp	r7, #0
 8002eaa:	d0f6      	beq.n	8002e9a <__sflush_r+0xae>
 8002eac:	0793      	lsls	r3, r2, #30
 8002eae:	680e      	ldr	r6, [r1, #0]
 8002eb0:	bf08      	it	eq
 8002eb2:	694b      	ldreq	r3, [r1, #20]
 8002eb4:	600f      	str	r7, [r1, #0]
 8002eb6:	bf18      	it	ne
 8002eb8:	2300      	movne	r3, #0
 8002eba:	eba6 0807 	sub.w	r8, r6, r7
 8002ebe:	608b      	str	r3, [r1, #8]
 8002ec0:	f1b8 0f00 	cmp.w	r8, #0
 8002ec4:	dde9      	ble.n	8002e9a <__sflush_r+0xae>
 8002ec6:	6a21      	ldr	r1, [r4, #32]
 8002ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002eca:	4643      	mov	r3, r8
 8002ecc:	463a      	mov	r2, r7
 8002ece:	4628      	mov	r0, r5
 8002ed0:	47b0      	blx	r6
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	dc08      	bgt.n	8002ee8 <__sflush_r+0xfc>
 8002ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ede:	81a3      	strh	r3, [r4, #12]
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ee8:	4407      	add	r7, r0
 8002eea:	eba8 0800 	sub.w	r8, r8, r0
 8002eee:	e7e7      	b.n	8002ec0 <__sflush_r+0xd4>
 8002ef0:	dfbffffe 	.word	0xdfbffffe

08002ef4 <_fflush_r>:
 8002ef4:	b538      	push	{r3, r4, r5, lr}
 8002ef6:	690b      	ldr	r3, [r1, #16]
 8002ef8:	4605      	mov	r5, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	b913      	cbnz	r3, 8002f04 <_fflush_r+0x10>
 8002efe:	2500      	movs	r5, #0
 8002f00:	4628      	mov	r0, r5
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
 8002f04:	b118      	cbz	r0, 8002f0e <_fflush_r+0x1a>
 8002f06:	6a03      	ldr	r3, [r0, #32]
 8002f08:	b90b      	cbnz	r3, 8002f0e <_fflush_r+0x1a>
 8002f0a:	f7ff fc8f 	bl	800282c <__sinit>
 8002f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f3      	beq.n	8002efe <_fflush_r+0xa>
 8002f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f18:	07d0      	lsls	r0, r2, #31
 8002f1a:	d404      	bmi.n	8002f26 <_fflush_r+0x32>
 8002f1c:	0599      	lsls	r1, r3, #22
 8002f1e:	d402      	bmi.n	8002f26 <_fflush_r+0x32>
 8002f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f22:	f7ff fe68 	bl	8002bf6 <__retarget_lock_acquire_recursive>
 8002f26:	4628      	mov	r0, r5
 8002f28:	4621      	mov	r1, r4
 8002f2a:	f7ff ff5f 	bl	8002dec <__sflush_r>
 8002f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f30:	07da      	lsls	r2, r3, #31
 8002f32:	4605      	mov	r5, r0
 8002f34:	d4e4      	bmi.n	8002f00 <_fflush_r+0xc>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	059b      	lsls	r3, r3, #22
 8002f3a:	d4e1      	bmi.n	8002f00 <_fflush_r+0xc>
 8002f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f3e:	f7ff fe5b 	bl	8002bf8 <__retarget_lock_release_recursive>
 8002f42:	e7dd      	b.n	8002f00 <_fflush_r+0xc>

08002f44 <__swhatbuf_r>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	460c      	mov	r4, r1
 8002f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f4c:	2900      	cmp	r1, #0
 8002f4e:	b096      	sub	sp, #88	@ 0x58
 8002f50:	4615      	mov	r5, r2
 8002f52:	461e      	mov	r6, r3
 8002f54:	da0d      	bge.n	8002f72 <__swhatbuf_r+0x2e>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2340      	movne	r3, #64	@ 0x40
 8002f64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002f68:	2000      	movs	r0, #0
 8002f6a:	6031      	str	r1, [r6, #0]
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	b016      	add	sp, #88	@ 0x58
 8002f70:	bd70      	pop	{r4, r5, r6, pc}
 8002f72:	466a      	mov	r2, sp
 8002f74:	f000 f848 	bl	8003008 <_fstat_r>
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	dbec      	blt.n	8002f56 <__swhatbuf_r+0x12>
 8002f7c:	9901      	ldr	r1, [sp, #4]
 8002f7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002f82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002f86:	4259      	negs	r1, r3
 8002f88:	4159      	adcs	r1, r3
 8002f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f8e:	e7eb      	b.n	8002f68 <__swhatbuf_r+0x24>

08002f90 <__smakebuf_r>:
 8002f90:	898b      	ldrh	r3, [r1, #12]
 8002f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f94:	079d      	lsls	r5, r3, #30
 8002f96:	4606      	mov	r6, r0
 8002f98:	460c      	mov	r4, r1
 8002f9a:	d507      	bpl.n	8002fac <__smakebuf_r+0x1c>
 8002f9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002fa0:	6023      	str	r3, [r4, #0]
 8002fa2:	6123      	str	r3, [r4, #16]
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	6163      	str	r3, [r4, #20]
 8002fa8:	b003      	add	sp, #12
 8002faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fac:	ab01      	add	r3, sp, #4
 8002fae:	466a      	mov	r2, sp
 8002fb0:	f7ff ffc8 	bl	8002f44 <__swhatbuf_r>
 8002fb4:	9f00      	ldr	r7, [sp, #0]
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	4639      	mov	r1, r7
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f7ff fe8a 	bl	8002cd4 <_malloc_r>
 8002fc0:	b948      	cbnz	r0, 8002fd6 <__smakebuf_r+0x46>
 8002fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc6:	059a      	lsls	r2, r3, #22
 8002fc8:	d4ee      	bmi.n	8002fa8 <__smakebuf_r+0x18>
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	81a3      	strh	r3, [r4, #12]
 8002fd4:	e7e2      	b.n	8002f9c <__smakebuf_r+0xc>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	6020      	str	r0, [r4, #0]
 8002fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	9b01      	ldr	r3, [sp, #4]
 8002fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002fe6:	b15b      	cbz	r3, 8003000 <__smakebuf_r+0x70>
 8002fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fec:	4630      	mov	r0, r6
 8002fee:	f000 f81d 	bl	800302c <_isatty_r>
 8002ff2:	b128      	cbz	r0, 8003000 <__smakebuf_r+0x70>
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	431d      	orrs	r5, r3
 8003004:	81a5      	strh	r5, [r4, #12]
 8003006:	e7cf      	b.n	8002fa8 <__smakebuf_r+0x18>

08003008 <_fstat_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	4d07      	ldr	r5, [pc, #28]	@ (8003028 <_fstat_r+0x20>)
 800300c:	2300      	movs	r3, #0
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	602b      	str	r3, [r5, #0]
 8003016:	f7fd ff0d 	bl	8000e34 <_fstat>
 800301a:	1c43      	adds	r3, r0, #1
 800301c:	d102      	bne.n	8003024 <_fstat_r+0x1c>
 800301e:	682b      	ldr	r3, [r5, #0]
 8003020:	b103      	cbz	r3, 8003024 <_fstat_r+0x1c>
 8003022:	6023      	str	r3, [r4, #0]
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	bf00      	nop
 8003028:	20000210 	.word	0x20000210

0800302c <_isatty_r>:
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	4d06      	ldr	r5, [pc, #24]	@ (8003048 <_isatty_r+0x1c>)
 8003030:	2300      	movs	r3, #0
 8003032:	4604      	mov	r4, r0
 8003034:	4608      	mov	r0, r1
 8003036:	602b      	str	r3, [r5, #0]
 8003038:	f7fd ff0c 	bl	8000e54 <_isatty>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_isatty_r+0x1a>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	b103      	cbz	r3, 8003046 <_isatty_r+0x1a>
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	20000210 	.word	0x20000210

0800304c <_sbrk_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4d06      	ldr	r5, [pc, #24]	@ (8003068 <_sbrk_r+0x1c>)
 8003050:	2300      	movs	r3, #0
 8003052:	4604      	mov	r4, r0
 8003054:	4608      	mov	r0, r1
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	f7fd ff14 	bl	8000e84 <_sbrk>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_sbrk_r+0x1a>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	b103      	cbz	r3, 8003066 <_sbrk_r+0x1a>
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	20000210 	.word	0x20000210

0800306c <_init>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr

08003078 <_fini>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr
